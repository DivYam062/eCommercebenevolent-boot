{"ast":null,"code":"'use client';\n\nimport { scale } from \"./chunk-XRZH7COS.mjs\";\nimport { useTooltip } from \"./chunk-P7BNLW77.mjs\";\n\n// src/tooltip.tsx\nimport { popperCSSVars } from \"@chakra-ui/popper\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useTheme, getCSSVar } from \"@chakra-ui/system\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// ../../utilities/object-utils/src/pick.ts\nfunction pick(object, keysToPick) {\n  const result = {};\n  for (const key of keysToPick) {\n    if (key in object) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\n\n// src/tooltip.tsx\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Children, cloneElement } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar MotionDiv = chakra(motion.div);\nvar Tooltip = forwardRef((props, ref) => {\n  var _a, _b;\n  const styles = useStyleConfig(\"Tooltip\", props);\n  const ownProps = omitThemingProps(props);\n  const theme = useTheme();\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    portalProps,\n    background,\n    backgroundColor,\n    bgColor,\n    motionProps,\n    ...rest\n  } = ownProps;\n  const userDefinedBg = (_b = (_a = background != null ? background : backgroundColor) != null ? _a : bg) != null ? _b : bgColor;\n  if (userDefinedBg) {\n    styles.bg = userDefinedBg;\n    const bgVar = getCSSVar(theme, \"colors\", userDefinedBg);\n    styles[popperCSSVars.arrowBg.var] = bgVar;\n  }\n  const tooltip = useTooltip({\n    ...rest,\n    direction: theme.direction\n  });\n  const shouldWrap = typeof children === \"string\" || shouldWrapChildren;\n  let trigger;\n  if (shouldWrap) {\n    trigger = /* @__PURE__ */jsx(chakra.span, {\n      display: \"inline-block\",\n      tabIndex: 0,\n      ...tooltip.getTriggerProps(),\n      children\n    });\n  } else {\n    const child = Children.only(children);\n    trigger = cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));\n  }\n  const hasAriaLabel = !!ariaLabel;\n  const _tooltipProps = tooltip.getTooltipProps({}, ref);\n  const tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  const srOnlyProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  if (!label) {\n    return /* @__PURE__ */jsx(Fragment, {\n      children\n    });\n  }\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [trigger, /* @__PURE__ */jsx(AnimatePresence, {\n      children: tooltip.isOpen && /* @__PURE__ */jsx(Portal, {\n        ...portalProps,\n        children: /* @__PURE__ */jsx(chakra.div, {\n          ...tooltip.getTooltipPositionerProps(),\n          __css: {\n            zIndex: styles.zIndex,\n            pointerEvents: \"none\"\n          },\n          children: /* @__PURE__ */jsxs(MotionDiv, {\n            variants: scale,\n            initial: \"exit\",\n            animate: \"enter\",\n            exit: \"exit\",\n            ...motionProps,\n            ...tooltipProps,\n            __css: styles,\n            children: [label, hasAriaLabel && /* @__PURE__ */jsx(chakra.span, {\n              srOnly: true,\n              ...srOnlyProps,\n              children: ariaLabel\n            }), hasArrow && /* @__PURE__ */jsx(chakra.div, {\n              \"data-popper-arrow\": true,\n              className: \"chakra-tooltip__arrow-wrapper\",\n              children: /* @__PURE__ */jsx(chakra.div, {\n                \"data-popper-arrow-inner\": true,\n                className: \"chakra-tooltip__arrow\",\n                __css: {\n                  bg: styles.bg\n                }\n              })\n            })]\n          })\n        })\n      })\n    })]\n  });\n});\nTooltip.displayName = \"Tooltip\";\nexport { Tooltip };","map":{"version":3,"names":["popperCSSVars","Portal","chakra","forwardRef","omitThemingProps","useStyleConfig","useTheme","getCSSVar","omit","object","keysToOmit","clone","Object","assign","key","pick","keysToPick","result","AnimatePresence","motion","Children","cloneElement","Fragment","jsx","jsxs","MotionDiv","div","Tooltip","props","ref","_a","_b","styles","ownProps","theme","children","label","shouldWrapChildren","ariaLabel","hasArrow","bg","portalProps","background","backgroundColor","bgColor","motionProps","rest","userDefinedBg","bgVar","arrowBg","var","tooltip","useTooltip","direction","shouldWrap","trigger","span","display","tabIndex","getTriggerProps","child","only","hasAriaLabel","_tooltipProps","getTooltipProps","tooltipProps","srOnlyProps","isOpen","getTooltipPositionerProps","__css","zIndex","pointerEvents","variants","scale","initial","animate","exit","srOnly","className","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\tooltip\\src\\tooltip.tsx","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\utilities\\object-utils\\src\\omit.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\utilities\\object-utils\\src\\pick.ts"],"sourcesContent":["import { popperCSSVars } from \"@chakra-ui/popper\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useTheme,\n  getCSSVar,\n} from \"@chakra-ui/system\"\nimport { omit, pick } from \"@chakra-ui/object-utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport { Children, cloneElement } from \"react\"\nimport { scale } from \"./tooltip.transition\"\nimport { useTooltip, UseTooltipProps } from \"./use-tooltip\"\n\nexport interface TooltipProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Tooltip\">,\n    UseTooltipProps {\n  /**\n   * The React component to use as the\n   * trigger for the tooltip\n   */\n  children: React.ReactNode\n  /**\n   * The label of the tooltip\n   */\n  label?: React.ReactNode\n  /**\n   * The accessible, human friendly label to use for\n   * screen readers.\n   *\n   * If passed, tooltip will show the content `label`\n   * but expose only `aria-label` to assistive technologies\n   */\n  \"aria-label\"?: string\n  /**\n   * If `true`, the tooltip will wrap its children\n   * in a `<span/>` with `tabIndex=0`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true`, the tooltip will show an arrow tip\n   * @default false\n   */\n  hasArrow?: boolean\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n  motionProps?: HTMLMotionProps<\"div\">\n}\n\nconst MotionDiv = chakra(motion.div)\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/docs/overlay/tooltip\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/\n */\nexport const Tooltip = forwardRef<TooltipProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Tooltip\", props)\n  const ownProps = omitThemingProps(props)\n  const theme = useTheme()\n\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    portalProps,\n    background,\n    backgroundColor,\n    bgColor,\n    motionProps,\n    ...rest\n  } = ownProps\n\n  const userDefinedBg = background ?? backgroundColor ?? bg ?? bgColor\n\n  if (userDefinedBg) {\n    styles.bg = userDefinedBg\n    const bgVar = getCSSVar(theme, \"colors\", userDefinedBg)\n    ;(styles as any)[popperCSSVars.arrowBg.var] = bgVar\n  }\n  const tooltip = useTooltip({ ...rest, direction: theme.direction })\n\n  const shouldWrap = typeof children === \"string\" || shouldWrapChildren\n\n  let trigger: React.ReactElement\n\n  if (shouldWrap) {\n    trigger = (\n      <chakra.span\n        display=\"inline-block\"\n        tabIndex={0}\n        {...tooltip.getTriggerProps()}\n      >\n        {children}\n      </chakra.span>\n    )\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    const child = Children.only(children) as React.ReactElement & {\n      ref?: React.Ref<any>\n    }\n    trigger = cloneElement(\n      child,\n      tooltip.getTriggerProps(child.props, child.ref),\n    )\n  }\n\n  const hasAriaLabel = !!ariaLabel\n\n  const _tooltipProps = tooltip.getTooltipProps({}, ref)\n\n  const tooltipProps = hasAriaLabel\n    ? omit(_tooltipProps, [\"role\", \"id\"])\n    : _tooltipProps\n\n  const srOnlyProps = pick(_tooltipProps, [\"role\", \"id\"])\n\n  /**\n   * If the `label` is empty, there's no point showing the tooltip.\n   * Let's simply return the children\n   */\n  if (!label) {\n    return <>{children}</>\n  }\n\n  return (\n    <>\n      {trigger}\n      <AnimatePresence>\n        {tooltip.isOpen && (\n          <Portal {...portalProps}>\n            <chakra.div\n              {...tooltip.getTooltipPositionerProps()}\n              __css={{\n                zIndex: styles.zIndex,\n                pointerEvents: \"none\",\n              }}\n            >\n              <MotionDiv\n                variants={scale}\n                initial=\"exit\"\n                animate=\"enter\"\n                exit=\"exit\"\n                {...motionProps}\n                {...(tooltipProps as any)}\n                __css={styles}\n              >\n                {label}\n                {hasAriaLabel && (\n                  <chakra.span srOnly {...srOnlyProps}>\n                    {ariaLabel}\n                  </chakra.span>\n                )}\n                {hasArrow && (\n                  <chakra.div\n                    data-popper-arrow\n                    className=\"chakra-tooltip__arrow-wrapper\"\n                  >\n                    <chakra.div\n                      data-popper-arrow-inner\n                      className=\"chakra-tooltip__arrow\"\n                      __css={{ bg: styles.bg }}\n                    />\n                  </chakra.div>\n                )}\n              </MotionDiv>\n            </chakra.div>\n          </Portal>\n        )}\n      </AnimatePresence>\n    </>\n  )\n})\n\nTooltip.displayName = \"Tooltip\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","export function pick<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToPick: K[],\n) {\n  const result = {} as {\n    [P in K]: T[P]\n  }\n  for (const key of keysToPick) {\n    if (key in object) {\n      result[key] = object[key]\n    }\n  }\n  return result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}