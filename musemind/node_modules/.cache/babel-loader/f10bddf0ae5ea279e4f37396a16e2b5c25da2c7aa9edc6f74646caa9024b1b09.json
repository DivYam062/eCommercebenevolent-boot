{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(next => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\nexport { useControllableProp, useControllableState };","map":{"version":3,"names":["useMemo","useState","useCallbackRef","useControllableProp","prop","state","controlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","uncontrolledState","setUncontrolledState","setValue","setter","nextValue"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\react-use-controllable-state\\src\\index.ts"],"sourcesContent":["import { useMemo, useState } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\n/**\n * Given a prop value and state value, the useControllableProp hook is used to determine whether a component is controlled or uncontrolled, and also returns the computed value.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollableprop\n */\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const controlled = typeof prop !== \"undefined\"\n  const value = controlled ? prop : state\n  return useMemo<[boolean, T]>(() => [controlled, value], [controlled, value])\n}\n\nexport interface UseControllableStateProps<T> {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * The `useControllableState` hook returns the state and function that updates the state, just like React.useState does.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollablestate\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue as T)\n  const controlled = valueProp !== undefined\n  const value = controlled ? valueProp : uncontrolledState\n\n  const setValue = useCallbackRef(\n    (next: React.SetStateAction<T>) => {\n      const setter = next as (prevState?: T) => T\n      const nextValue = typeof next === \"function\" ? setter(value) : next\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!controlled) {\n        setUncontrolledState(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [controlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, setValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"mappings":";;;AAAA,SAASA,OAAA,EAASC,QAAA,QAAgB;AAClC,SAASC,cAAA,QAAsB;AAOxB,SAASC,oBAAuBC,IAAA,EAAqBC,KAAA,EAAU;EACpE,MAAMC,UAAA,GAAa,OAAOF,IAAA,KAAS;EACnC,MAAMG,KAAA,GAAQD,UAAA,GAAaF,IAAA,GAAOC,KAAA;EAClC,OAAOL,OAAA,CAAsB,MAAM,CAACM,UAAA,EAAYC,KAAK,GAAG,CAACD,UAAA,EAAYC,KAAK,CAAC;AAC7E;AAcO,SAASC,qBAAwBC,KAAA,EAAqC;EAC3E,MAAM;IACJF,KAAA,EAAOG,SAAA;IACPC,YAAA;IACAC,QAAA;IACAC,YAAA,GAAeA,CAACC,IAAA,EAAMC,IAAA,KAASD,IAAA,KAASC;EAC1C,IAAIN,KAAA;EAEJ,MAAMO,YAAA,GAAed,cAAA,CAAeU,QAAQ;EAC5C,MAAMK,gBAAA,GAAmBf,cAAA,CAAeW,YAAY;EAEpD,MAAM,CAACK,iBAAA,EAAmBC,oBAAoB,IAAIlB,QAAA,CAASU,YAAiB;EAC5E,MAAML,UAAA,GAAaI,SAAA,KAAc;EACjC,MAAMH,KAAA,GAAQD,UAAA,GAAaI,SAAA,GAAYQ,iBAAA;EAEvC,MAAME,QAAA,GAAWlB,cAAA,CACda,IAAA,IAAkC;IACjC,MAAMM,MAAA,GAASN,IAAA;IACf,MAAMO,SAAA,GAAY,OAAOP,IAAA,KAAS,aAAaM,MAAA,CAAOd,KAAK,IAAIQ,IAAA;IAE/D,IAAI,CAACE,gBAAA,CAAiBV,KAAA,EAAOe,SAAS,GAAG;MACvC;IACF;IAEA,IAAI,CAAChB,UAAA,EAAY;MACfa,oBAAA,CAAqBG,SAAS;IAChC;IAEAN,YAAA,CAAaM,SAAS;EACxB,GACA,CAAChB,UAAA,EAAYU,YAAA,EAAcT,KAAA,EAAOU,gBAAgB,CACpD;EAEA,OAAO,CAACV,KAAA,EAAOa,QAAQ;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}