{"ast":null,"code":"'use client';\n\nimport { Icon } from \"./chunk-2GBDXOMA.mjs\";\n\n// src/create-icon.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { Children } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createIcon(options) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {}\n  } = options;\n  const path = Children.toArray(options.path);\n  const Comp = forwardRef((props, ref) => /* @__PURE__ */jsx(Icon, {\n    ref,\n    viewBox,\n    ...defaultProps,\n    ...props,\n    children: path.length ? path : /* @__PURE__ */jsx(\"path\", {\n      fill: \"currentColor\",\n      d: pathDefinition\n    })\n  }));\n  Comp.displayName = displayName;\n  return Comp;\n}\nexport { createIcon };","map":{"version":3,"names":["forwardRef","Children","jsx","createIcon","options","viewBox","d","pathDefinition","displayName","defaultProps","path","toArray","Comp","props","ref","Icon","children","length","fill"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\icon\\src\\create-icon.tsx"],"sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n"],"mappings":";;;;;AAAA,SAASA,UAAA,QAAkB;AAC3B,SAASC,QAAA,QAAgB;AAuCG,SAAAC,GAAA;AAXrB,SAASC,WAAWC,OAAA,EAA4B;EACrD,MAAM;IACJC,OAAA,GAAU;IACVC,CAAA,EAAGC,cAAA;IACHC,WAAA;IACAC,YAAA,GAAe,CAAC;EAClB,IAAIL,OAAA;EACJ,MAAMM,IAAA,GAAOT,QAAA,CAASU,OAAA,CAAQP,OAAA,CAAQM,IAAI;EAE1C,MAAME,IAAA,GAAOZ,UAAA,CAA6B,CAACa,KAAA,EAAOC,GAAA,KAChD,eAAAZ,GAAA,CAACa,IAAA;IAAKD,GAAA;IAAUT,OAAA;IAAmB,GAAGI,YAAA;IAAe,GAAGI,KAAA;IACrDG,QAAA,EAAAN,IAAA,CAAKO,MAAA,GAASP,IAAA,GAAO,eAAAR,GAAA,CAAC;MAAKgB,IAAA,EAAK;MAAeZ,CAAA,EAAGC;IAAA,CAAgB;EAAA,CACrE,CACD;EAEDK,IAAA,CAAKJ,WAAA,GAAcA,WAAA;EAEnB,OAAOI,IAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}