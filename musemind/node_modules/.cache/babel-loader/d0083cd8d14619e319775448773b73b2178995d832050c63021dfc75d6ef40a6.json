{"ast":null,"code":"'use client';\n\nimport { useId } from \"./chunk-6B2YUEGK.mjs\";\nimport { useControllableProp } from \"./chunk-7JSBRQFI.mjs\";\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props2 = {}) => ({\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props2.onClick, onToggle)\n    }),\n    getDisclosureProps: (props2 = {}) => ({\n      ...props2,\n      hidden: !isOpen,\n      id\n    })\n  };\n}\nexport { useDisclosure };","map":{"version":3,"names":["callAllHandlers","useCallback","useState","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","onOpenPropCallbackRef","useCallbackRef","onClosePropCallbackRef","isOpenState","setIsOpen","defaultIsOpen","isControlled","useControllableProp","useId","onToggle","action","getButtonProps","props2","onClick","getDisclosureProps","hidden"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\hooks\\src\\use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"mappings":";;;;;;;AAAA,SAASA,eAAA,QAAuB;AAIhC,SAASC,WAAA,EAAaC,QAAA,QAAgB;AAU/B,SAASC,cAAcC,KAAA,GAA4B,CAAC,GAAG;EAC5D,MAAM;IACJC,OAAA,EAASC,WAAA;IACTC,MAAA,EAAQC,UAAA;IACRC,MAAA,EAAQC,UAAA;IACRC,EAAA,EAAIC;EACN,IAAIR,KAAA;EAEJ,MAAMS,qBAAA,GAAwBC,cAAA,CAAeN,UAAU;EACvD,MAAMO,sBAAA,GAAyBD,cAAA,CAAeR,WAAW;EACzD,MAAM,CAACU,WAAA,EAAaC,SAAS,IAAIf,QAAA,CAASE,KAAA,CAAMc,aAAA,IAAiB,KAAK;EACtE,MAAM,CAACC,YAAA,EAAcV,MAAM,IAAIW,mBAAA,CAAoBV,UAAA,EAAYM,WAAW;EAE1E,MAAML,EAAA,GAAKU,KAAA,CAAMT,MAAA,EAAQ,YAAY;EAErC,MAAMP,OAAA,GAAUJ,WAAA,CAAY,MAAM;IAChC,IAAI,CAACkB,YAAA,EAAc;MACjBF,SAAA,CAAU,KAAK;IACjB;IACAF,sBAAA,oBAAAA,sBAAA;EACF,GAAG,CAACI,YAAA,EAAcJ,sBAAsB,CAAC;EAEzC,MAAMR,MAAA,GAASN,WAAA,CAAY,MAAM;IAC/B,IAAI,CAACkB,YAAA,EAAc;MACjBF,SAAA,CAAU,IAAI;IAChB;IACAJ,qBAAA,oBAAAA,qBAAA;EACF,GAAG,CAACM,YAAA,EAAcN,qBAAqB,CAAC;EAExC,MAAMS,QAAA,GAAWrB,WAAA,CAAY,MAAM;IACjC,MAAMsB,MAAA,GAASd,MAAA,GAASJ,OAAA,GAAUE,MAAA;IAClCgB,MAAA,CAAO;EACT,GAAG,CAACd,MAAA,EAAQF,MAAA,EAAQF,OAAO,CAAC;EAE5B,OAAO;IACLI,MAAA,EAAQ,CAAC,CAACA,MAAA;IACVF,MAAA;IACAF,OAAA;IACAiB,QAAA;IACAH,YAAA;IACAK,cAAA,EAAgBA,CAACC,MAAA,GAAa,CAAC,OAAO;MACpC,GAAGA,MAAA;MACH,iBAAiBhB,MAAA;MACjB,iBAAiBE,EAAA;MACjBe,OAAA,EAAS1B,eAAA,CAAgByB,MAAA,CAAMC,OAAA,EAASJ,QAAQ;IAClD;IACAK,kBAAA,EAAoBA,CAACF,MAAA,GAAa,CAAC,OAAO;MACxC,GAAGA,MAAA;MACHG,MAAA,EAAQ,CAACnB,MAAA;MACTE;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}