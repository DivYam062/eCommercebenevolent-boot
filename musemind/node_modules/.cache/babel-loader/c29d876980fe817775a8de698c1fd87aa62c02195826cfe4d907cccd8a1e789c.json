{"ast":null,"code":"// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\nvar add = (...operands) => `calc(${toExpr(\"+\", ...operands)})`;\nvar subtract = (...operands) => `calc(${toExpr(\"-\", ...operands)})`;\nvar multiply = (...operands) => `calc(${toExpr(\"*\", ...operands)})`;\nvar divide = (...operands) => `calc(${toExpr(\"/\", ...operands)})`;\nvar negate = x => {\n  const value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\nvar calc = Object.assign(x => ({\n  add: (...operands) => calc(add(x, ...operands)),\n  subtract: (...operands) => calc(subtract(x, ...operands)),\n  multiply: (...operands) => calc(multiply(x, ...operands)),\n  divide: (...operands) => calc(divide(x, ...operands)),\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"names":["isObject","toRef","operand","reference","String","toExpr","operator","operands","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","toString"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\theme-tools\\src\\css-calc.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":";AAAA,SAASA,QAAA,QAAgB;AAQzB,SAASC,MAAMC,OAAA,EAA0B;EACvC,IAAIF,QAAA,CAASE,OAAO,KAAKA,OAAA,CAAQC,SAAA,EAAW;IAC1C,OAAOD,OAAA,CAAQC,SAAA;EACjB;EACA,OAAOC,MAAA,CAAOF,OAAO;AACvB;AAEA,IAAMG,MAAA,GAASA,CAACC,QAAA,KAAuBC,QAAA,KACrCA,QAAA,CAASC,GAAA,CAAIP,KAAK,EAAEQ,IAAA,CAAK,IAAIH,QAAQ,GAAG,EAAEI,OAAA,CAAQ,SAAS,EAAE;AAE/D,IAAMC,GAAA,GAAMA,CAAA,GAAIJ,QAAA,KAAuB,QAAQF,MAAA,CAAO,KAAK,GAAGE,QAAQ,CAAC;AAEvE,IAAMK,QAAA,GAAWA,CAAA,GAAIL,QAAA,KAAuB,QAAQF,MAAA,CAAO,KAAK,GAAGE,QAAQ,CAAC;AAE5E,IAAMM,QAAA,GAAWA,CAAA,GAAIN,QAAA,KAAuB,QAAQF,MAAA,CAAO,KAAK,GAAGE,QAAQ,CAAC;AAE5E,IAAMO,MAAA,GAASA,CAAA,GAAIP,QAAA,KAAuB,QAAQF,MAAA,CAAO,KAAK,GAAGE,QAAQ,CAAC;AAE1E,IAAMQ,MAAA,GAAUC,CAAA,IAAe;EAC7B,MAAMC,KAAA,GAAQhB,KAAA,CAAMe,CAAC;EAErB,IAAIC,KAAA,IAAS,QAAQ,CAACC,MAAA,CAAOC,KAAA,CAAMC,UAAA,CAAWH,KAAK,CAAC,GAAG;IACrD,OAAOb,MAAA,CAAOa,KAAK,EAAEI,UAAA,CAAW,GAAG,IAAIjB,MAAA,CAAOa,KAAK,EAAEK,KAAA,CAAM,CAAC,IAAI,IAAIL,KAAK;EAC3E;EAEA,OAAOJ,QAAA,CAASI,KAAA,EAAO,EAAE;AAC3B;AAWO,IAAMM,IAAA,GAAOC,MAAA,CAAOC,MAAA,CACxBT,CAAA,KAA2B;EAC1BL,GAAA,EAAKA,CAAA,GAAIJ,QAAA,KAAagB,IAAA,CAAKZ,GAAA,CAAIK,CAAA,EAAG,GAAGT,QAAQ,CAAC;EAC9CK,QAAA,EAAUA,CAAA,GAAIL,QAAA,KAAagB,IAAA,CAAKX,QAAA,CAASI,CAAA,EAAG,GAAGT,QAAQ,CAAC;EACxDM,QAAA,EAAUA,CAAA,GAAIN,QAAA,KAAagB,IAAA,CAAKV,QAAA,CAASG,CAAA,EAAG,GAAGT,QAAQ,CAAC;EACxDO,MAAA,EAAQA,CAAA,GAAIP,QAAA,KAAagB,IAAA,CAAKT,MAAA,CAAOE,CAAA,EAAG,GAAGT,QAAQ,CAAC;EACpDQ,MAAA,EAAQA,CAAA,KAAMQ,IAAA,CAAKR,MAAA,CAAOC,CAAC,CAAC;EAC5BU,QAAA,EAAUA,CAAA,KAAMV,CAAA,CAAEU,QAAA,CAAS;AAC7B,IACA;EACEf,GAAA;EACAC,QAAA;EACAC,QAAA;EACAC,MAAA;EACAC;AACF,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}