{"ast":null,"code":"'use client';\n\n// src/use-media-query.ts\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\nfunction useMediaQuery(query, options = {}) {\n  const {\n    ssr = true,\n    fallback\n  } = options;\n  const {\n    getWindow\n  } = useEnvironment();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(v => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n    }));\n  });\n  useEffect(() => {\n    const win = getWindow();\n    setValue(queries.map(query2 => ({\n      media: query2,\n      matches: win.matchMedia(query2).matches\n    })));\n    const mql = queries.map(query2 => win.matchMedia(query2));\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return {\n            ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n    mql.forEach(mql2 => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach(mql2 => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(item => item.matches);\n}\nexport { useMediaQuery };","map":{"version":3,"names":["useEnvironment","useEffect","useState","useMediaQuery","query","options","ssr","fallback","getWindow","queries","Array","isArray","fallbackValues","filter","v","value","setValue","map","query2","index","media","matches","matchMedia","win","mql","handler","evt","prev","slice","item","forEach","mql2","addListener","addEventListener","removeListener","removeEventListener"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\media-query\\src\\use-media-query.ts"],"sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n"],"mappings":";;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAASC,SAAA,EAAWC,QAAA,QAAgB;AAe7B,SAASC,cACdC,KAAA,EACAC,OAAA,GAAgC,CAAC,GACtB;EACX,MAAM;IAAEC,GAAA,GAAM;IAAMC;EAAS,IAAIF,OAAA;EAEjC,MAAM;IAAEG;EAAU,IAAIR,cAAA,CAAe;EAErC,MAAMS,OAAA,GAAUC,KAAA,CAAMC,OAAA,CAAQP,KAAK,IAAIA,KAAA,GAAQ,CAACA,KAAK;EAErD,IAAIQ,cAAA,GAAiBF,KAAA,CAAMC,OAAA,CAAQJ,QAAQ,IAAIA,QAAA,GAAW,CAACA,QAAQ;EACnEK,cAAA,GAAiBA,cAAA,CAAeC,MAAA,CAAQC,CAAA,IAAMA,CAAA,IAAK,IAAI;EAEvD,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAId,QAAA,CAAS,MAAM;IACvC,OAAOO,OAAA,CAAQQ,GAAA,CAAI,CAACC,MAAA,EAAOC,KAAA,MAAW;MACpCC,KAAA,EAAOF,MAAA;MACPG,OAAA,EAASf,GAAA,GACL,CAAC,CAACM,cAAA,CAAeO,KAAK,IACtBX,SAAA,CAAU,EAAEc,UAAA,CAAWJ,MAAK,EAAEG;IACpC,EAAE;EACJ,CAAC;EAEDpB,SAAA,CAAU,MAAM;IACd,MAAMsB,GAAA,GAAMf,SAAA,CAAU;IACtBQ,QAAA,CACEP,OAAA,CAAQQ,GAAA,CAAKC,MAAA,KAAW;MACtBE,KAAA,EAAOF,MAAA;MACPG,OAAA,EAASE,GAAA,CAAID,UAAA,CAAWJ,MAAK,EAAEG;IACjC,EAAE,CACJ;IAEA,MAAMG,GAAA,GAAMf,OAAA,CAAQQ,GAAA,CAAKC,MAAA,IAAUK,GAAA,CAAID,UAAA,CAAWJ,MAAK,CAAC;IAExD,MAAMO,OAAA,GAAWC,GAAA,IAA6B;MAC5CV,QAAA,CAAUW,IAAA,IAAS;QACjB,OAAOA,IAAA,CAAKC,KAAA,CAAM,EAAEX,GAAA,CAAKY,IAAA,IAAS;UAChC,IAAIA,IAAA,CAAKT,KAAA,KAAUM,GAAA,CAAIN,KAAA,EAAO,OAAO;YAAE,GAAGS,IAAA;YAAMR,OAAA,EAASK,GAAA,CAAIL;UAAQ;UACrE,OAAOQ,IAAA;QACT,CAAC;MACH,CAAC;IACH;IAEAL,GAAA,CAAIM,OAAA,CAASC,IAAA,IAAQ;MACnB,IAAI,OAAOA,IAAA,CAAIC,WAAA,KAAgB,YAAY;QACzCD,IAAA,CAAIC,WAAA,CAAYP,OAAO;MACzB,OAAO;QACLM,IAAA,CAAIE,gBAAA,CAAiB,UAAUR,OAAO;MACxC;IACF,CAAC;IAED,OAAO,MAAM;MACXD,GAAA,CAAIM,OAAA,CAASC,IAAA,IAAQ;QACnB,IAAI,OAAOA,IAAA,CAAIG,cAAA,KAAmB,YAAY;UAC5CH,IAAA,CAAIG,cAAA,CAAeT,OAAO;QAC5B,OAAO;UACLM,IAAA,CAAII,mBAAA,CAAoB,UAAUV,OAAO;QAC3C;MACF,CAAC;IACH;EAEF,GAAG,CAACjB,SAAS,CAAC;EAEd,OAAOO,KAAA,CAAME,GAAA,CAAKY,IAAA,IAASA,IAAA,CAAKR,OAAO;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}