{"ast":null,"code":"'use client';\n\nimport { Grid } from \"./chunk-JARCRF6W.mjs\";\n\n// src/simple-grid.tsx\nimport { forwardRef, getToken, useTheme } from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(function SimpleGrid2(props, ref) {\n  const {\n    columns,\n    spacingX,\n    spacingY,\n    spacing,\n    minChildWidth,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n  return /* @__PURE__ */jsx(Grid, {\n    ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns,\n    ...rest\n  });\n});\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, value => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(count, value => value === null ? null : `repeat(${value}, minmax(0, 1fr))`);\n}\nexport { SimpleGrid };","map":{"version":3,"names":["forwardRef","getToken","useTheme","mapResponsive","jsx","SimpleGrid","SimpleGrid2","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","theme","templateColumns","widthToColumns","countToColumns","Grid","gap","columnGap","rowGap","displayName","toPx","n","width","value","_value","count"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\layout\\src\\simple-grid.tsx"],"sourcesContent":["import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"mappings":";;;;;AAAA,SACEA,UAAA,EACAC,QAAA,EAEAC,QAAA,QACK;AACP,SAASC,aAAA,QAAqB;AAiDxB,SAAAC,GAAA;AAXC,IAAMC,UAAA,GAAaL,UAAA,CACxB,SAASM,YAAWC,KAAA,EAAOC,GAAA,EAAK;EAC9B,MAAM;IAAEC,OAAA;IAASC,QAAA;IAAUC,QAAA;IAAUC,OAAA;IAASC,aAAA;IAAe,GAAGC;EAAK,IACnEP,KAAA;EAEF,MAAMQ,KAAA,GAAQb,QAAA,CAAS;EACvB,MAAMc,eAAA,GAAkBH,aAAA,GACpBI,cAAA,CAAeJ,aAAA,EAAeE,KAAK,IACnCG,cAAA,CAAeT,OAAO;EAE1B,OACE,eAAAL,GAAA,CAACe,IAAA;IACCX,GAAA;IACAY,GAAA,EAAKR,OAAA;IACLS,SAAA,EAAWX,QAAA;IACXY,MAAA,EAAQX,QAAA;IACRK,eAAA;IACC,GAAGF;EAAA,CACN;AAEJ,CACF;AAEAT,UAAA,CAAWkB,WAAA,GAAc;AAEzB,SAASC,KAAKC,CAAA,EAAoB;EAChC,OAAO,OAAOA,CAAA,KAAM,WAAW,GAAGA,CAAC,OAAOA,CAAA;AAC5C;AAEA,SAASR,eAAeS,KAAA,EAAYX,KAAA,EAA4B;EAC9D,OAAOZ,aAAA,CAAcuB,KAAA,EAAQC,KAAA,IAAU;IACrC,MAAMC,MAAA,GAAS3B,QAAA,CAAS,SAAS0B,KAAA,EAAOH,IAAA,CAAKG,KAAK,CAAC,EAAEZ,KAAK;IAC1D,OAAOY,KAAA,KAAU,OAAO,OAAO,2BAA2BC,MAAM;EAClE,CAAC;AACH;AAEA,SAASV,eAAeW,KAAA,EAAY;EAClC,OAAO1B,aAAA,CAAc0B,KAAA,EAAQF,KAAA,IAC3BA,KAAA,KAAU,OAAO,OAAO,UAAUA,KAAK,mBACzC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}