{"ast":null,"code":"'use client';\n\n// src/get-next-item-from-search.ts\nfunction getNextItemFromSearch(items, searchString, itemToString, currentItem) {\n  if (searchString == null) {\n    return currentItem;\n  }\n  if (!currentItem) {\n    const foundItem = items.find(item => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));\n    return foundItem;\n  }\n  const matchingItems = items.filter(item => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));\n  if (matchingItems.length > 0) {\n    let nextIndex;\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem);\n      nextIndex = currentIndex + 1;\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0;\n      }\n      return matchingItems[nextIndex];\n    }\n    nextIndex = items.indexOf(matchingItems[0]);\n    return items[nextIndex];\n  }\n  return currentItem;\n}\nexport { getNextItemFromSearch };","map":{"version":3,"names":["getNextItemFromSearch","items","searchString","itemToString","currentItem","foundItem","find","item","toLowerCase","startsWith","matchingItems","filter","length","nextIndex","includes","currentIndex","indexOf"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\menu\\src\\get-next-item-from-search.ts"],"sourcesContent":["/**\n * Gets the next item based on a search string\n *\n * @param items array of items\n * @param searchString the search string\n * @param itemToString resolves an item to string\n * @param currentItem the current selected item\n */\nexport function getNextItemFromSearch<T>(\n  items: T[],\n  searchString: string,\n  itemToString: (item: T) => string,\n  currentItem: T,\n): T | undefined {\n  if (searchString == null) {\n    return currentItem\n  }\n\n  // If current item doesn't exist, find the item that matches the search string\n  if (!currentItem) {\n    const foundItem = items.find((item) =>\n      itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n    )\n    return foundItem\n  }\n\n  // Filter items for ones that match the search string (case insensitive)\n  const matchingItems = items.filter((item) =>\n    itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n  )\n\n  // If there's a match, let's get the next item to select\n  if (matchingItems.length > 0) {\n    let nextIndex: number\n\n    // If the currentItem is in the available items, we move to the next available option\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem)\n      nextIndex = currentIndex + 1\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0\n      }\n      return matchingItems[nextIndex]\n    }\n    // Else, we pick the first item in the available items\n    nextIndex = items.indexOf(matchingItems[0])\n    return items[nextIndex]\n  }\n\n  // a decent fallback to the currentItem\n  return currentItem\n}\n"],"mappings":";;;AAQO,SAASA,sBACdC,KAAA,EACAC,YAAA,EACAC,YAAA,EACAC,WAAA,EACe;EACf,IAAIF,YAAA,IAAgB,MAAM;IACxB,OAAOE,WAAA;EACT;EAGA,IAAI,CAACA,WAAA,EAAa;IAChB,MAAMC,SAAA,GAAYJ,KAAA,CAAMK,IAAA,CAAMC,IAAA,IAC5BJ,YAAA,CAAaI,IAAI,EAAEC,WAAA,CAAY,EAAEC,UAAA,CAAWP,YAAA,CAAaM,WAAA,CAAY,CAAC,CACxE;IACA,OAAOH,SAAA;EACT;EAGA,MAAMK,aAAA,GAAgBT,KAAA,CAAMU,MAAA,CAAQJ,IAAA,IAClCJ,YAAA,CAAaI,IAAI,EAAEC,WAAA,CAAY,EAAEC,UAAA,CAAWP,YAAA,CAAaM,WAAA,CAAY,CAAC,CACxE;EAGA,IAAIE,aAAA,CAAcE,MAAA,GAAS,GAAG;IAC5B,IAAIC,SAAA;IAGJ,IAAIH,aAAA,CAAcI,QAAA,CAASV,WAAW,GAAG;MACvC,MAAMW,YAAA,GAAeL,aAAA,CAAcM,OAAA,CAAQZ,WAAW;MACtDS,SAAA,GAAYE,YAAA,GAAe;MAC3B,IAAIF,SAAA,KAAcH,aAAA,CAAcE,MAAA,EAAQ;QACtCC,SAAA,GAAY;MACd;MACA,OAAOH,aAAA,CAAcG,SAAS;IAChC;IAEAA,SAAA,GAAYZ,KAAA,CAAMe,OAAA,CAAQN,aAAA,CAAc,CAAC,CAAC;IAC1C,OAAOT,KAAA,CAAMY,SAAS;EACxB;EAGA,OAAOT,WAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}