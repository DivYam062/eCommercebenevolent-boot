{"ast":null,"code":"'use client';\n\n// src/box.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Box = chakra(\"div\");\nBox.displayName = \"Box\";\nvar Square = forwardRef(function Square2(props, ref) {\n  const {\n    size,\n    centerContent = true,\n    ...rest\n  } = props;\n  const styles = centerContent ? {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  } : {};\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    boxSize: size,\n    __css: {\n      ...styles,\n      flexShrink: 0,\n      flexGrow: 0\n    },\n    ...rest\n  });\n});\nSquare.displayName = \"Square\";\nvar Circle = forwardRef(function Circle2(props, ref) {\n  const {\n    size,\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(Square, {\n    size,\n    ref,\n    borderRadius: \"9999px\",\n    ...rest\n  });\n});\nCircle.displayName = \"Circle\";\nexport { Box, Square, Circle };","map":{"version":3,"names":["chakra","forwardRef","jsx","Box","displayName","Square","Square2","props","ref","size","centerContent","rest","styles","display","alignItems","justifyContent","boxSize","__css","flexShrink","flexGrow","Circle","Circle2","borderRadius"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\layout\\src\\box.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n"],"mappings":";;;AAAA,SACEA,MAAA,EACAC,UAAA,QAGK;AA4CH,SAAAC,GAAA;AAlCG,IAAMC,GAAA,GAAMH,MAAA,CAAO,KAAK;AAE/BG,GAAA,CAAIC,WAAA,GAAc;AAqBX,IAAMC,MAAA,GAASJ,UAAA,CAA+B,SAASK,QAC5DC,KAAA,EACAC,GAAA,EACA;EACA,MAAM;IAAEC,IAAA;IAAMC,aAAA,GAAgB;IAAM,GAAGC;EAAK,IAAIJ,KAAA;EAEhD,MAAMK,MAAA,GAA4BF,aAAA,GAC9B;IAAEG,OAAA,EAAS;IAAQC,UAAA,EAAY;IAAUC,cAAA,EAAgB;EAAS,IAClE,CAAC;EAEL,OACE,eAAAb,GAAA,CAACC,GAAA;IACCK,GAAA;IACAQ,OAAA,EAASP,IAAA;IACTQ,KAAA,EAAO;MACL,GAAGL,MAAA;MACHM,UAAA,EAAY;MACZC,QAAA,EAAU;IACZ;IACC,GAAGR;EAAA,CACN;AAEJ,CAAC;AAEDN,MAAA,CAAOD,WAAA,GAAc;AAEd,IAAMgB,MAAA,GAASnB,UAAA,CAA+B,SAASoB,QAC5Dd,KAAA,EACAC,GAAA,EACA;EACA,MAAM;IAAEC,IAAA;IAAM,GAAGE;EAAK,IAAIJ,KAAA;EAC1B,OAAO,eAAAL,GAAA,CAACG,MAAA;IAAOI,IAAA;IAAYD,GAAA;IAAUc,YAAA,EAAa;IAAU,GAAGX;EAAA,CAAM;AACvE,CAAC;AAEDS,MAAA,CAAOhB,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}