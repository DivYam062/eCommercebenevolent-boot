{"ast":null,"code":"'use client';\n\nimport { CheckboxGroupProvider } from \"./chunk-LYGBQ47X.mjs\";\nimport { useCheckboxGroup } from \"./chunk-TOQK4WO2.mjs\";\n\n// src/checkbox-group.tsx\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction CheckboxGroup(props) {\n  const {\n    colorScheme,\n    size,\n    variant,\n    children,\n    isDisabled\n  } = props;\n  const {\n    value,\n    onChange\n  } = useCheckboxGroup(props);\n  const group = useMemo(() => ({\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant,\n    isDisabled\n  }), [size, onChange, colorScheme, value, variant, isDisabled]);\n  return /* @__PURE__ */jsx(CheckboxGroupProvider, {\n    value: group,\n    children\n  });\n}\nCheckboxGroup.displayName = \"CheckboxGroup\";\nexport { CheckboxGroup };","map":{"version":3,"names":["useMemo","jsx","CheckboxGroup","props","colorScheme","size","variant","children","isDisabled","value","onChange","useCheckboxGroup","group","CheckboxGroupProvider","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\checkbox\\src\\checkbox-group.tsx"],"sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\nimport { CheckboxGroupProvider } from \"./checkbox-context\"\nimport { UseCheckboxGroupProps } from \"./checkbox-types\"\nimport { useCheckboxGroup } from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {\n  children?: React.ReactNode\n}\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport function CheckboxGroup(props: CheckboxGroupProps) {\n  const { colorScheme, size, variant, children, isDisabled } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n    }),\n    [size, onChange, colorScheme, value, variant, isDisabled],\n  )\n\n  return <CheckboxGroupProvider value={group} children={children} />\n}\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"],"mappings":";;;;;;AACA,SAASA,OAAA,QAAe;AAiCf,SAAAC,GAAA;AAhBF,SAASC,cAAcC,KAAA,EAA2B;EACvD,MAAM;IAAEC,WAAA;IAAaC,IAAA;IAAMC,OAAA;IAASC,QAAA;IAAUC;EAAW,IAAIL,KAAA;EAC7D,MAAM;IAAEM,KAAA;IAAOC;EAAS,IAAIC,gBAAA,CAAiBR,KAAK;EAElD,MAAMS,KAAA,GAAQZ,OAAA,CACZ,OAAO;IACLK,IAAA;IACAK,QAAA;IACAN,WAAA;IACAK,KAAA;IACAH,OAAA;IACAE;EACF,IACA,CAACH,IAAA,EAAMK,QAAA,EAAUN,WAAA,EAAaK,KAAA,EAAOH,OAAA,EAASE,UAAU,CAC1D;EAEA,OAAO,eAAAP,GAAA,CAACY,qBAAA;IAAsBJ,KAAA,EAAOG,KAAA;IAAOL;EAAA,CAAoB;AAClE;AAEAL,aAAA,CAAcY,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}