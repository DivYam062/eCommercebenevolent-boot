{"ast":null,"code":"'use client';\n\n// src/use-spinner.ts\nimport { useInterval } from \"@chakra-ui/react-use-interval\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\nvar CONTINUOUS_CHANGE_DELAY = 300;\nfunction useSpinner(increment, decrement) {\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [action, setAction] = useState(null);\n  const [runOnce, setRunOnce] = useState(true);\n  const timeoutRef = useRef(null);\n  const removeTimeout = () => clearTimeout(timeoutRef.current);\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);\n  const up = useCallback(() => {\n    if (runOnce) {\n      increment();\n    }\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]);\n  const down = useCallback(() => {\n    if (runOnce) {\n      decrement();\n    }\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]);\n  const stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  useEffect(() => {\n    return () => removeTimeout();\n  }, []);\n  return {\n    up,\n    down,\n    stop,\n    isSpinning\n  };\n}\nexport { useSpinner };","map":{"version":3,"names":["useInterval","useCallback","useEffect","useRef","useState","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","action","setAction","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\number-input\\src\\use-spinner.ts"],"sourcesContent":["import { useInterval } from \"@chakra-ui/react-use-interval\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first time\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first time\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinning (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useEffect(() => {\n    return () => removeTimeout()\n  }, [])\n\n  return { up, down, stop, isSpinning }\n}\n"],"mappings":";;;AAAA,SAASA,WAAA,QAAmB;AAC5B,SAASC,WAAA,EAAaC,SAAA,EAAWC,MAAA,EAAQC,QAAA,QAAgB;AAKzD,IAAMC,0BAAA,GAA6B;AAKnC,IAAMC,uBAAA,GAA0B;AAWzB,SAASC,WAAWC,SAAA,EAAqBC,SAAA,EAAqB;EAInE,MAAM,CAACC,UAAA,EAAYC,aAAa,IAAIP,QAAA,CAAS,KAAK;EAGlD,MAAM,CAACQ,MAAA,EAAQC,SAAS,IAAIT,QAAA,CAAwB,IAAI;EAGxD,MAAM,CAACU,OAAA,EAASC,UAAU,IAAIX,QAAA,CAAS,IAAI;EAG3C,MAAMY,UAAA,GAAab,MAAA,CAAY,IAAI;EAGnC,MAAMc,aAAA,GAAgBA,CAAA,KAAMC,YAAA,CAAaF,UAAA,CAAWG,OAAO;EAM3DnB,WAAA,CACE,MAAM;IACJ,IAAIY,MAAA,KAAW,aAAa;MAC1BJ,SAAA,CAAU;IACZ;IACA,IAAII,MAAA,KAAW,aAAa;MAC1BH,SAAA,CAAU;IACZ;EACF,GACAC,UAAA,GAAaL,0BAAA,GAA6B,IAC5C;EAGA,MAAMe,EAAA,GAAKnB,WAAA,CAAY,MAAM;IAE3B,IAAIa,OAAA,EAAS;MACXN,SAAA,CAAU;IACZ;IAGAQ,UAAA,CAAWG,OAAA,GAAUE,UAAA,CAAW,MAAM;MACpCN,UAAA,CAAW,KAAK;MAChBJ,aAAA,CAAc,IAAI;MAClBE,SAAA,CAAU,WAAW;IACvB,GAAGP,uBAAuB;EAC5B,GAAG,CAACE,SAAA,EAAWM,OAAO,CAAC;EAGvB,MAAMQ,IAAA,GAAOrB,WAAA,CAAY,MAAM;IAE7B,IAAIa,OAAA,EAAS;MACXL,SAAA,CAAU;IACZ;IAGAO,UAAA,CAAWG,OAAA,GAAUE,UAAA,CAAW,MAAM;MACpCN,UAAA,CAAW,KAAK;MAChBJ,aAAA,CAAc,IAAI;MAClBE,SAAA,CAAU,WAAW;IACvB,GAAGP,uBAAuB;EAC5B,GAAG,CAACG,SAAA,EAAWK,OAAO,CAAC;EAGvB,MAAMS,IAAA,GAAOtB,WAAA,CAAY,MAAM;IAC7Bc,UAAA,CAAW,IAAI;IACfJ,aAAA,CAAc,KAAK;IACnBM,aAAA,CAAc;EAChB,GAAG,EAAE;EAMLf,SAAA,CAAU,MAAM;IACd,OAAO,MAAMe,aAAA,CAAc;EAC7B,GAAG,EAAE;EAEL,OAAO;IAAEG,EAAA;IAAIE,IAAA;IAAMC,IAAA;IAAMb;EAAW;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}