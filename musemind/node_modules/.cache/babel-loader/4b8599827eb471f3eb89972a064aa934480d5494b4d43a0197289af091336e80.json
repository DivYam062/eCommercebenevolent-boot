{"ast":null,"code":"'use client';\n\nimport { Modal } from \"./chunk-MSA2NPQT.mjs\";\n\n// src/drawer.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nvar placementMap = {\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\nfunction getDrawerPlacement(placement, dir) {\n  var _a, _b;\n  if (!placement) return;\n  return (_b = (_a = placementMap[placement]) == null ? void 0 : _a[dir]) != null ? _b : placement;\n}\nfunction Drawer(props) {\n  var _a;\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const drawerStyleConfig = (_a = theme.components) == null ? void 0 : _a.Drawer;\n  const placement = getDrawerPlacement(placementProp, theme.direction);\n  return /* @__PURE__ */jsx(DrawerContextProvider, {\n    value: {\n      placement\n    },\n    children: /* @__PURE__ */jsx(Modal, {\n      isOpen,\n      onClose,\n      styleConfig: drawerStyleConfig,\n      ...rest,\n      children\n    })\n  });\n}\nexport { useDrawerContext, Drawer };","map":{"version":3,"names":["createContext","useTheme","jsx","DrawerContextProvider","useDrawerContext","placementMap","start","ltr","rtl","end","getDrawerPlacement","placement","dir","_a","_b","Drawer","props","isOpen","onClose","placementProp","children","rest","theme","drawerStyleConfig","components","direction","value","Modal","styleConfig"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\modal\\src\\drawer.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps, useTheme } from \"@chakra-ui/system\"\nimport { SlideOptions } from \"@chakra-ui/transition\"\nimport { Modal, ModalProps } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(\n  placement: DrawerPlacement | undefined,\n  dir: \"ltr\" | \"rtl\",\n) {\n  if (!placement) return\n  //@ts-expect-error\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   * @default \"right\"\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    ThemingProps<\"Drawer\">,\n    Omit<\n      ModalProps,\n      \"scrollBehavior\" | \"motionPreset\" | \"isCentered\" | keyof ThemingProps\n    > {}\n\n/**\n * The Drawer component is a panel that slides out from the edge of the screen.\n * It can be useful when you need users to complete a task or view some details without leaving the current page.\n *\n * @see Docs https://chakra-ui.com/docs/components/drawer\n */\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nexport { ModalBody as DrawerBody } from \"./modal-body\"\nexport { ModalCloseButton as DrawerCloseButton } from \"./modal-close-button\"\nexport { ModalFooter as DrawerFooter } from \"./modal-footer\"\nexport { ModalHeader as DrawerHeader } from \"./modal-header\"\nexport { ModalOverlay as DrawerOverlay } from \"./modal-overlay\"\n\nexport { useDrawerContext }\n"],"mappings":";;;;;AAAA,SAASA,aAAA,QAAqB;AAC9B,SAAuBC,QAAA,QAAgB;AAqEjC,SAAAC,GAAA;AAjEN,IAAM,CAACC,qBAAA,EAAuBC,gBAAgB,IAAIJ,aAAA,CAA6B;AAS/E,IAAMK,YAAA,GAAoC;EACxCC,KAAA,EAAO;IAAEC,GAAA,EAAK;IAAQC,GAAA,EAAK;EAAQ;EACnCC,GAAA,EAAK;IAAEF,GAAA,EAAK;IAASC,GAAA,EAAK;EAAO;AACnC;AAEA,SAASE,mBACPC,SAAA,EACAC,GAAA,EACA;EAtBF,IAAAC,EAAA,EAAAC,EAAA;EAuBE,IAAI,CAACH,SAAA,EAAW;EAEhB,QAAOG,EAAA,IAAAD,EAAA,GAAAR,YAAA,CAAaM,SAAS,MAAtB,gBAAAE,EAAA,CAA0BD,GAAA,MAA1B,OAAAE,EAAA,GAAkCH,SAAA;AAC3C;AA6BO,SAASI,OAAOC,KAAA,EAAoB;EAvD3C,IAAAH,EAAA;EAwDE,MAAM;IACJI,MAAA;IACAC,OAAA;IACAP,SAAA,EAAWQ,aAAA,GAAgB;IAC3BC,QAAA;IACA,GAAGC;EACL,IAAIL,KAAA;EAEJ,MAAMM,KAAA,GAAQrB,QAAA,CAAS;EACvB,MAAMsB,iBAAA,IAAoBV,EAAA,GAAAS,KAAA,CAAME,UAAA,KAAN,gBAAAX,EAAA,CAAkBE,MAAA;EAC5C,MAAMJ,SAAA,GAAYD,kBAAA,CAAmBS,aAAA,EAAeG,KAAA,CAAMG,SAAS;EAEnE,OACE,eAAAvB,GAAA,CAACC,qBAAA;IAAsBuB,KAAA,EAAO;MAAEf;IAAU;IACxCS,QAAA,iBAAAlB,GAAA,CAACyB,KAAA;MACCV,MAAA;MACAC,OAAA;MACAU,WAAA,EAAaL,iBAAA;MACZ,GAAGF,IAAA;MAEHD;IAAA,CACH;EAAA,CACF;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}