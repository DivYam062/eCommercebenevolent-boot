{"ast":null,"code":"'use client';\n\n// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter(props = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    var _a;\n    if (defaultValue == null) return \"\";\n    return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp != null ? precisionProp : decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback((step = stepProp) => {\n    let next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback((step = stepProp) => {\n    let next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    var _a;\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    var _a;\n    const nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}\nexport { useCounter };","map":{"version":3,"names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","_a","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","value2","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","isNaN"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\counter\\src\\use-counter.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision,\n} from \"@chakra-ui/number-utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: string | number\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: string | number\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default Number.MIN_SAFE_INTEGER\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<string | number>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: string | number) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: string | number\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: string | number) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: string | number) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: string | number, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}