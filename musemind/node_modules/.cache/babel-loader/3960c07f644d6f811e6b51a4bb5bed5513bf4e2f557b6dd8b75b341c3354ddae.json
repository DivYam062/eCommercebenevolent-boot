{"ast":null,"code":"'use client';\n\n// src/wrap.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { Children, useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Wrap = forwardRef(function Wrap2(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const _children = useMemo(() => shouldWrapChildren ? Children.map(children, (child, index) => /* @__PURE__ */jsx(WrapItem, {\n    children: child\n  }, index)) : children, [children, shouldWrapChildren]);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    className: cx(\"chakra-wrap\", className),\n    ...rest,\n    children: /* @__PURE__ */jsx(chakra.ul, {\n      className: \"chakra-wrap__list\",\n      __css: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: justify,\n        alignItems: align,\n        flexDirection: direction,\n        listStyleType: \"none\",\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        padding: \"0\"\n      },\n      children: _children\n    })\n  });\n});\nWrap.displayName = \"Wrap\";\nvar WrapItem = forwardRef(function WrapItem2(props, ref) {\n  const {\n    className,\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(chakra.li, {\n    ref,\n    __css: {\n      display: \"flex\",\n      alignItems: \"flex-start\"\n    },\n    className: cx(\"chakra-wrap__listitem\", className),\n    ...rest\n  });\n});\nWrapItem.displayName = \"WrapItem\";\nexport { Wrap, WrapItem };","map":{"version":3,"names":["cx","chakra","forwardRef","Children","useMemo","jsx","Wrap","Wrap2","props","ref","spacing","spacingX","spacingY","children","justify","direction","align","className","shouldWrapChildren","rest","_children","map","child","index","WrapItem","div","ul","__css","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","gap","columnGap","rowGap","padding","displayName","WrapItem2","li"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\layout\\src\\wrap.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n"],"mappings":";;;AAAA,SAASA,EAAA,QAAU;AACnB,SACEC,MAAA,EACAC,UAAA,QAGK;AACP,SAASC,QAAA,EAAUC,OAAA,QAAe;AAoEtB,SAAAC,GAAA;AAlBL,IAAMC,IAAA,GAAOJ,UAAA,CAA6B,SAASK,MAAKC,KAAA,EAAOC,GAAA,EAAK;EACzE,MAAM;IACJC,OAAA,GAAU;IACVC,QAAA;IACAC,QAAA;IACAC,QAAA;IACAC,OAAA;IACAC,SAAA;IACAC,KAAA;IACAC,SAAA;IACAC,kBAAA;IACA,GAAGC;EACL,IAAIX,KAAA;EAEJ,MAAMY,SAAA,GAAYhB,OAAA,CAChB,MACEc,kBAAA,GACIf,QAAA,CAASkB,GAAA,CAAIR,QAAA,EAAU,CAACS,KAAA,EAAOC,KAAA,KAC7B,eAAAlB,GAAA,CAACmB,QAAA;IAAsBX,QAAA,EAAAS;EAAA,GAARC,KAAc,CAC9B,IACDV,QAAA,EACN,CAACA,QAAA,EAAUK,kBAAkB,CAC/B;EAEA,OACE,eAAAb,GAAA,CAACJ,MAAA,CAAOwB,GAAA,EAAP;IAAWhB,GAAA;IAAUQ,SAAA,EAAWjB,EAAA,CAAG,eAAeiB,SAAS;IAAI,GAAGE,IAAA;IACjEN,QAAA,iBAAAR,GAAA,CAACJ,MAAA,CAAOyB,EAAA,EAAP;MACCT,SAAA,EAAU;MACVU,KAAA,EAAO;QACLC,OAAA,EAAS;QACTC,QAAA,EAAU;QACVC,cAAA,EAAgBhB,OAAA;QAChBiB,UAAA,EAAYf,KAAA;QACZgB,aAAA,EAAejB,SAAA;QACfkB,aAAA,EAAe;QACfC,GAAA,EAAKxB,OAAA;QACLyB,SAAA,EAAWxB,QAAA;QACXyB,MAAA,EAAQxB,QAAA;QACRyB,OAAA,EAAS;MACX;MAECxB,QAAA,EAAAO;IAAA,CACH;EAAA,CACF;AAEJ,CAAC;AAEDd,IAAA,CAAKgC,WAAA,GAAc;AAIZ,IAAMd,QAAA,GAAWtB,UAAA,CAAgC,SAASqC,UAC/D/B,KAAA,EACAC,GAAA,EACA;EACA,MAAM;IAAEQ,SAAA;IAAW,GAAGE;EAAK,IAAIX,KAAA;EAC/B,OACE,eAAAH,GAAA,CAACJ,MAAA,CAAOuC,EAAA,EAAP;IACC/B,GAAA;IACAkB,KAAA,EAAO;MAAEC,OAAA,EAAS;MAAQG,UAAA,EAAY;IAAa;IACnDd,SAAA,EAAWjB,EAAA,CAAG,yBAAyBiB,SAAS;IAC/C,GAAGE;EAAA,CACN;AAEJ,CAAC;AAEDK,QAAA,CAASc,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}