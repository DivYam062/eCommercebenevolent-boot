{"ast":null,"code":"'use client';\n\nimport { useIsFirstRender } from \"./chunk-AASO4CLC.mjs\";\n\n// src/skeleton.tsx\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, cssVar, forwardRef, keyframes, omitThemingProps, useStyleConfig, useToken } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef((props, ref) => {\n  const skeletonProps = {\n    ...props,\n    fadeDuration: typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8\n  };\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps);\n  const isFirstRender = useIsFirstRender();\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps);\n  const [startColorVar, endColorVar] = useToken(\"colors\", [startColor, endColor]);\n  const wasPreviouslyLoaded = usePrevious(isLoaded);\n  const _className = cx(\"chakra-skeleton\", className);\n  const cssVarStyles = {\n    ...(startColorVar && {\n      [$startColor.variable]: startColorVar\n    }),\n    ...(endColorVar && {\n      [$endColor.variable]: endColorVar\n    })\n  };\n  if (isLoaded) {\n    const animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`;\n    return /* @__PURE__ */jsx(chakra.div, {\n      ref,\n      className: _className,\n      __css: {\n        animation\n      },\n      ...rest\n    });\n  }\n  return /* @__PURE__ */jsx(StyledSkeleton, {\n    ref,\n    className: _className,\n    ...rest,\n    __css: {\n      width: fitContent ? \"fit-content\" : void 0,\n      ...styles,\n      ...cssVarStyles,\n      _dark: {\n        ...styles[\"_dark\"],\n        ...cssVarStyles\n      },\n      animation: `${speed}s linear infinite alternate ${bgFade}`\n    }\n  });\n});\nSkeleton.displayName = \"Skeleton\";\nexport { Skeleton };","map":{"version":3,"names":["usePrevious","cx","chakra","cssVar","forwardRef","keyframes","omitThemingProps","useStyleConfig","useToken","jsx","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","$startColor","$endColor","fade","from","opacity","to","bgFade","borderColor","reference","background","Skeleton","props","ref","skeletonProps","fadeDuration","speed","styles","isFirstRender","useIsFirstRender","startColor","endColor","isLoaded","className","fitContent","rest","startColorVar","endColorVar","wasPreviouslyLoaded","_className","cssVarStyles","variable","animation","div","__css","width","_dark","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\skeleton\\src\\skeleton.tsx"],"sourcesContent":["import { usePrevious } from \"@chakra-ui/react-use-previous\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  HTMLChakraProps,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useToken,\n} from \"@chakra-ui/system\"\nimport { useIsFirstRender } from \"./use-is-first-render\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   *\n   * @default 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: number\n  /**\n   * If `true`, the skeleton will take the width of it's children\n   * @default false\n   */\n  fitContent?: boolean\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nconst $startColor = cssVar(\"skeleton-start-color\")\nconst $endColor = cssVar(\"skeleton-end-color\")\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference,\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference,\n  },\n})\n\n/**\n * `Skeleton` is used to display the loading state of some component.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const skeletonProps: SkeletonProps = {\n    ...props,\n    fadeDuration:\n      typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8,\n  }\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps)\n\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor,\n  ])\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  const cssVarStyles = {\n    ...(startColorVar && { [$startColor.variable]: startColorVar }),\n    ...(endColorVar && { [$endColor.variable]: endColorVar }),\n  }\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton\n      ref={ref}\n      className={_className}\n      {...rest}\n      __css={{\n        width: fitContent ? \"fit-content\" : undefined,\n        ...styles,\n        ...cssVarStyles,\n        _dark: { ...(styles as any)[\"_dark\"], ...cssVarStyles },\n        animation: `${speed}s linear infinite alternate ${bgFade}`,\n      }}\n    />\n  )\n})\n\nSkeleton.displayName = \"Skeleton\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}