{"ast":null,"code":"// src/index.ts\nimport * as React2 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/with-selector.js\";\n\n// src/utils/react.ts\nimport * as ReactOriginal from \"react\";\nvar React =\n// prettier-ignore\n// @ts-ignore\n\"default\" in ReactOriginal ? ReactOriginal[\"default\"] : ReactOriginal;\n\n// src/components/Context.ts\nvar ContextKey = Symbol.for(`react-redux-context`);\nvar gT = typeof globalThis !== \"undefined\" ? globalThis : ( /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */\n{});\nfunction getContext() {\n  if (!React.createContext) return {};\n  const contextMap = gT[ContextKey] ?? (gT[ContextKey] = /* @__PURE__ */new Map());\n  let realContext = contextMap.get(React.createContext);\n  if (!realContext) {\n    realContext = React.createContext(null);\n    if (process.env.NODE_ENV !== \"production\") {\n      realContext.displayName = \"ReactRedux\";\n    }\n    contextMap.set(React.createContext, realContext);\n  }\n  return realContext;\n}\nvar ReactReduxContext = /* @__PURE__ */getContext();\n\n// src/utils/useSyncExternalStore.ts\nvar notInitialized = () => {\n  throw new Error(\"uSES not initialized!\");\n};\n\n// src/hooks/useReduxContext.ts\nfunction createReduxContextHook(context = ReactReduxContext) {\n  return function useReduxContext2() {\n    const contextValue = React.useContext(context);\n    if (process.env.NODE_ENV !== \"production\" && !contextValue) {\n      throw new Error(\"could not find react-redux context value; please ensure the component is wrapped in a <Provider>\");\n    }\n    return contextValue;\n  };\n}\nvar useReduxContext = /* @__PURE__ */createReduxContextHook();\n\n// src/hooks/useSelector.ts\nvar useSyncExternalStoreWithSelector = notInitialized;\nvar initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\nvar refEquality = (a, b) => a === b;\nfunction createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);\n  return function useSelector2(selector, equalityFnOrOptions = {}) {\n    const {\n      equalityFn = refEquality,\n      devModeChecks = {}\n    } = typeof equalityFnOrOptions === \"function\" ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n      if (typeof selector !== \"function\") {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n      if (typeof equalityFn !== \"function\") {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck,\n      identityFunctionCheck\n    } = useReduxContext2();\n    const firstRun = React.useRef(true);\n    const wrappedSelector = React.useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n        if (process.env.NODE_ENV !== \"production\") {\n          const {\n            identityFunctionCheck: finalIdentityFunctionCheck,\n            stabilityCheck: finalStabilityCheck\n          } = {\n            stabilityCheck,\n            identityFunctionCheck,\n            ...devModeChecks\n          };\n          if (finalStabilityCheck === \"always\" || finalStabilityCheck === \"once\" && firstRun.current) {\n            const toCompare = selector(state);\n            if (!equalityFn(selected, toCompare)) {\n              let stack = void 0;\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n              console.warn(\"Selector \" + (selector.name || \"unknown\") + \" returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization\", {\n                state,\n                selected,\n                selected2: toCompare,\n                stack\n              });\n            }\n          }\n          if (finalIdentityFunctionCheck === \"always\" || finalIdentityFunctionCheck === \"once\" && firstRun.current) {\n            if (selected === state) {\n              let stack = void 0;\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n              console.warn(\"Selector \" + (selector.name || \"unknown\") + \" returned the root state when called. This can lead to unnecessary rerenders.\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.\", {\n                stack\n              });\n            }\n          }\n          if (firstRun.current) firstRun.current = false;\n        }\n        return selected;\n      }\n    }[selector.name], [selector, stabilityCheck, devModeChecks.stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    React.useDebugValue(selectedState);\n    return selectedState;\n  };\n}\nvar useSelector = /* @__PURE__ */createSelectorHook();\n\n// src/utils/react-is.ts\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\nvar REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\nvar REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nvar REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\nvar REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\nvar REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\nvar REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\nvar REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\nvar REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\nvar REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\nvar REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\nvar REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\nvar REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nfunction isValidElementType(type) {\n  if (typeof type === \"string\" || typeof type === \"function\") {\n    return true;\n  }\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE) {\n    return true;\n  }\n  if (typeof type === \"object\" && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||\n    // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE || type.getModuleId !== void 0) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction typeOf(object) {\n  if (typeof object === \"object\" && object !== null) {\n    const $$typeof = object.$$typeof;\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        {\n          const type = object.type;\n          switch (type) {\n            case REACT_FRAGMENT_TYPE:\n            case REACT_PROFILER_TYPE:\n            case REACT_STRICT_MODE_TYPE:\n            case REACT_SUSPENSE_TYPE:\n            case REACT_SUSPENSE_LIST_TYPE:\n              return type;\n            default:\n              {\n                const $$typeofType = type && type.$$typeof;\n                switch ($$typeofType) {\n                  case REACT_SERVER_CONTEXT_TYPE:\n                  case REACT_CONTEXT_TYPE:\n                  case REACT_FORWARD_REF_TYPE:\n                  case REACT_LAZY_TYPE:\n                  case REACT_MEMO_TYPE:\n                  case REACT_PROVIDER_TYPE:\n                    return $$typeofType;\n                  default:\n                    return $$typeof;\n                }\n              }\n          }\n        }\n      case REACT_PORTAL_TYPE:\n        {\n          return $$typeof;\n        }\n    }\n  }\n  return void 0;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\n\n// src/utils/warning.ts\nfunction warning(message) {\n  if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(message);\n  }\n  try {\n    throw new Error(message);\n  } catch (e) {}\n}\n\n// src/connect/verifySubselectors.ts\nfunction verify(selector, methodName) {\n  if (!selector) {\n    throw new Error(`Unexpected value for ${methodName} in connect.`);\n  } else if (methodName === \"mapStateToProps\" || methodName === \"mapDispatchToProps\") {\n    if (!Object.prototype.hasOwnProperty.call(selector, \"dependsOnOwnProps\")) {\n      warning(`The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`);\n    }\n  }\n}\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {\n  verify(mapStateToProps, \"mapStateToProps\");\n  verify(mapDispatchToProps, \"mapDispatchToProps\");\n  verify(mergeProps, \"mergeProps\");\n}\n\n// src/connect/selectorFactory.ts\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, {\n  areStatesEqual,\n  areOwnPropsEqual,\n  areStatePropsEqual\n}) {\n  let hasRunAtLeastOnce = false;\n  let state;\n  let ownProps;\n  let stateProps;\n  let dispatchProps;\n  let mergedProps;\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n  function handleNewState() {\n    const nextStateProps = mapStateToProps(state, ownProps);\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    const stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n}\nfunction finalPropsSelectorFactory(dispatch, {\n  initMapStateToProps,\n  initMapDispatchToProps,\n  initMergeProps,\n  ...options\n}) {\n  const mapStateToProps = initMapStateToProps(dispatch, options);\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  const mergeProps = initMergeProps(dispatch, options);\n  if (process.env.NODE_ENV !== \"production\") {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);\n  }\n  return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}\n\n// src/utils/bindActionCreators.ts\nfunction bindActionCreators(actionCreators, dispatch) {\n  const boundActionCreators = {};\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key];\n    if (typeof actionCreator === \"function\") {\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args));\n    }\n  }\n  return boundActionCreators;\n}\n\n// src/utils/isPlainObject.ts\nfunction isPlainObject(obj) {\n  if (typeof obj !== \"object\" || obj === null) return false;\n  let proto = Object.getPrototypeOf(obj);\n  if (proto === null) return true;\n  let baseProto = proto;\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n  return proto === baseProto;\n}\n\n// src/utils/verifyPlainObject.ts\nfunction verifyPlainObject(value, displayName, methodName) {\n  if (!isPlainObject(value)) {\n    warning(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);\n  }\n}\n\n// src/connect/wrapMapToProps.ts\nfunction wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch) {\n    const constant = getConstant(dispatch);\n    function constantSelector() {\n      return constant;\n    }\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n}\nfunction getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n}\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, {\n    displayName\n  }) {\n    const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);\n    };\n    proxy.dependsOnOwnProps = true;\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      let props = proxy(stateOrDispatch, ownProps);\n      if (typeof props === \"function\") {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n      if (process.env.NODE_ENV !== \"production\") verifyPlainObject(props, displayName, methodName);\n      return props;\n    };\n    return proxy;\n  };\n}\n\n// src/connect/invalidArgFactory.ts\nfunction createInvalidArgFactory(arg, name) {\n  return (dispatch, options) => {\n    throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);\n  };\n}\n\n// src/connect/mapDispatchToProps.ts\nfunction mapDispatchToPropsFactory(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === \"object\" ? wrapMapToPropsConstant(dispatch =>\n  // @ts-ignore\n  bindActionCreators(mapDispatchToProps, dispatch)) : !mapDispatchToProps ? wrapMapToPropsConstant(dispatch => ({\n    dispatch\n  })) : typeof mapDispatchToProps === \"function\" ?\n  // @ts-ignore\n  wrapMapToPropsFunc(mapDispatchToProps, \"mapDispatchToProps\") : createInvalidArgFactory(mapDispatchToProps, \"mapDispatchToProps\");\n}\n\n// src/connect/mapStateToProps.ts\nfunction mapStateToPropsFactory(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === \"function\" ?\n  // @ts-ignore\n  wrapMapToPropsFunc(mapStateToProps, \"mapStateToProps\") : createInvalidArgFactory(mapStateToProps, \"mapStateToProps\");\n}\n\n// src/connect/mergeProps.ts\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return {\n    ...ownProps,\n    ...stateProps,\n    ...dispatchProps\n  };\n}\nfunction wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, {\n    displayName,\n    areMergedPropsEqual\n  }) {\n    let hasRunOnce = false;\n    let mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n      if (hasRunOnce) {\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (process.env.NODE_ENV !== \"production\") verifyPlainObject(mergedProps, displayName, \"mergeProps\");\n      }\n      return mergedProps;\n    };\n  };\n}\nfunction mergePropsFactory(mergeProps) {\n  return !mergeProps ? () => defaultMergeProps : typeof mergeProps === \"function\" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, \"mergeProps\");\n}\n\n// src/utils/batch.ts\nfunction defaultNoopBatch(callback) {\n  callback();\n}\n\n// src/utils/Subscription.ts\nfunction createListenerCollection() {\n  let first = null;\n  let last = null;\n  return {\n    clear() {\n      first = null;\n      last = null;\n    },\n    notify() {\n      defaultNoopBatch(() => {\n        let listener = first;\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n    get() {\n      let listeners = [];\n      let listener = first;\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n      return listeners;\n    },\n    subscribe(callback) {\n      let isSubscribed = true;\n      let listener = last = {\n        callback,\n        next: null,\n        prev: last\n      };\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n  };\n}\nvar nullListeners = {\n  notify() {},\n  get: () => []\n};\nfunction createSubscription(store, parentSub) {\n  let unsubscribe;\n  let listeners = nullListeners;\n  let subscriptionsAmount = 0;\n  let selfSubscribed = false;\n  function addNestedSub(listener) {\n    trySubscribe();\n    const cleanupListener = listeners.subscribe(listener);\n    let removed = false;\n    return () => {\n      if (!removed) {\n        removed = true;\n        cleanupListener();\n        tryUnsubscribe();\n      }\n    };\n  }\n  function notifyNestedSubs() {\n    listeners.notify();\n  }\n  function handleChangeWrapper() {\n    if (subscription.onStateChange) {\n      subscription.onStateChange();\n    }\n  }\n  function isSubscribed() {\n    return selfSubscribed;\n  }\n  function trySubscribe() {\n    subscriptionsAmount++;\n    if (!unsubscribe) {\n      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);\n      listeners = createListenerCollection();\n    }\n  }\n  function tryUnsubscribe() {\n    subscriptionsAmount--;\n    if (unsubscribe && subscriptionsAmount === 0) {\n      unsubscribe();\n      unsubscribe = void 0;\n      listeners.clear();\n      listeners = nullListeners;\n    }\n  }\n  function trySubscribeSelf() {\n    if (!selfSubscribed) {\n      selfSubscribed = true;\n      trySubscribe();\n    }\n  }\n  function tryUnsubscribeSelf() {\n    if (selfSubscribed) {\n      selfSubscribed = false;\n      tryUnsubscribe();\n    }\n  }\n  const subscription = {\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe: trySubscribeSelf,\n    tryUnsubscribe: tryUnsubscribeSelf,\n    getListeners: () => listeners\n  };\n  return subscription;\n}\n\n// src/utils/useIsomorphicLayoutEffect.ts\nvar canUseDOM = !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\nvar useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect;\n\n// src/utils/shallowEqual.ts\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// src/utils/hoistStatics.ts\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {\n  [ForwardRef]: FORWARD_REF_STATICS,\n  [Memo]: MEMO_STATICS\n};\nfunction getStatics(component) {\n  if (isMemo(component)) {\n    return MEMO_STATICS;\n  }\n  return TYPE_STATICS[component[\"$$typeof\"]] || REACT_STATICS;\n}\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent) {\n  if (typeof sourceComponent !== \"string\") {\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent);\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent);\n      }\n    }\n    let keys = getOwnPropertyNames(sourceComponent);\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n    const targetStatics = getStatics(targetComponent);\n    const sourceStatics = getStatics(sourceComponent);\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i];\n      if (!KNOWN_STATICS[key] && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n        try {\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n  return targetComponent;\n}\n\n// src/components/connect.tsx\nvar useSyncExternalStore = notInitialized;\nvar initializeConnect = fn => {\n  useSyncExternalStore = fn;\n};\nvar NO_SUBSCRIPTION_ARRAY = [null, null];\nvar stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n}\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false;\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n}\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {\n  if (!shouldHandleStateChanges) return () => {};\n  let didUnsubscribe = false;\n  let lastThrownError = null;\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      return;\n    }\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n    try {\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n    if (!error) {\n      lastThrownError = null;\n    }\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true;\n      additionalSubscribeListener();\n    }\n  };\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe();\n  checkForUpdates();\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n    if (lastThrownError) {\n      throw lastThrownError;\n    }\n  };\n  return unsubscribeWrapper;\n}\nfunction strictEqual(a, b) {\n  return a === b;\n}\nvar hasWarnedAboutDeprecatedPureOption = false;\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n  // @ts-ignore\n  pure,\n  areStatesEqual = strictEqual,\n  areOwnPropsEqual = shallowEqual,\n  areStatePropsEqual = shallowEqual,\n  areMergedPropsEqual = shallowEqual,\n  // use React's forwardRef to expose a ref of the wrapped component\n  forwardRef = false,\n  // the context consumer to use\n  context = ReactReduxContext\n} = {}) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== \"production\") {\n      const isValid = /* @__PURE__ */isValidElementType(WrappedComponent);\n      if (!isValid) throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = React.useMemo(() => {\n        const {\n          reactReduxForwardedRef: reactReduxForwardedRef2,\n          ...wrapperProps2\n        } = props;\n        return [props.context, reactReduxForwardedRef2, wrapperProps2];\n      }, [props]);\n      const ContextToUse = React.useMemo(() => {\n        let ResultContext = Context;\n        if (propsContext?.Consumer) {\n          if (process.env.NODE_ENV !== \"production\") {\n            const isValid = /* @__PURE__ */isContextConsumer(\n            // @ts-ignore\n            /* @__PURE__ */\n            React.createElement(propsContext.Consumer, null));\n            if (!isValid) {\n              throw new Error(\"You must pass a valid React context consumer as `props.context`\");\n            }\n            ResultContext = propsContext;\n          }\n        }\n        return ResultContext;\n      }, [propsContext, Context]);\n      const contextValue = React.useContext(ContextToUse);\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n      if (process.env.NODE_ENV !== \"production\" && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of \"${displayName}\". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`);\n      }\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = React.useMemo(() => {\n        return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;\n        const subscription2 = createSubscription(store, didStoreComeFromProps ? void 0 : contextValue.subscription);\n        const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);\n        return [subscription2, notifyNestedSubs2];\n      }, [store, didStoreComeFromProps, contextValue]);\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          return contextValue;\n        }\n        return {\n          ...contextValue,\n          subscription\n        };\n      }, [didStoreComeFromProps, contextValue, subscription]);\n      const lastChildProps = React.useRef();\n      const lastWrapperProps = React.useRef(wrapperProps);\n      const childPropsFromStoreUpdate = React.useRef();\n      const renderIsScheduled = React.useRef(false);\n      const isProcessingDispatch = React.useRef(false);\n      const isMounted = React.useRef(false);\n      const latestSubscriptionCallbackError = React.useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          }\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n        return selector;\n      }, [store, wrapperProps]);\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription,\n          // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n      try {\n        actualChildProps = useSyncExternalStore(\n        // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact,\n        // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\nThe error may be correlated with this previous error:\n${latestSubscriptionCallbackError.current.stack}\n\n`;\n        }\n        throw err;\n      }\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = void 0;\n        childPropsFromStoreUpdate.current = void 0;\n        lastChildProps.current = actualChildProps;\n      });\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (\n          // @ts-ignore\n          /* @__PURE__ */\n          React.createElement(WrappedComponent, {\n            ...actualChildProps,\n            ref: reactReduxForwardedRef\n          })\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          return /* @__PURE__ */React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n    const _Connect = React.memo(ConnectFunction);\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        return /* @__PURE__ */React.createElement(Connect, {\n          ...props,\n          reactReduxForwardedRef: ref\n        });\n      });\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return /* @__PURE__ */hoistNonReactStatics(forwarded, WrappedComponent);\n    }\n    return /* @__PURE__ */hoistNonReactStatics(Connect, WrappedComponent);\n  };\n  return wrapWithConnect;\n}\nvar connect_default = connect;\n\n// src/components/Provider.tsx\nfunction Provider({\n  store,\n  context,\n  children,\n  serverState,\n  stabilityCheck = \"once\",\n  identityFunctionCheck = \"once\"\n}) {\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store);\n    return {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : void 0,\n      stabilityCheck,\n      identityFunctionCheck\n    };\n  }, [store, serverState, stabilityCheck, identityFunctionCheck]);\n  const previousState = React.useMemo(() => store.getState(), [store]);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      subscription\n    } = contextValue;\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    subscription.trySubscribe();\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n    return () => {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = void 0;\n    };\n  }, [contextValue, previousState]);\n  const Context = context || ReactReduxContext;\n  return /* @__PURE__ */React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\nvar Provider_default = Provider;\n\n// src/hooks/useStore.ts\nfunction createStoreHook(context = ReactReduxContext) {\n  const useReduxContext2 =\n  // @ts-ignore\n  context === ReactReduxContext ? useReduxContext :\n  // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore2() {\n    const {\n      store\n    } = useReduxContext2();\n    return store;\n  };\n}\nvar useStore = /* @__PURE__ */createStoreHook();\n\n// src/hooks/useDispatch.ts\nfunction createDispatchHook(context = ReactReduxContext) {\n  const useStore2 =\n  // @ts-ignore\n  context === ReactReduxContext ? useStore : createStoreHook(context);\n  return function useDispatch2() {\n    const store = useStore2();\n    return store.dispatch;\n  };\n}\nvar useDispatch = /* @__PURE__ */createDispatchHook();\n\n// src/exports.ts\nvar batch = defaultNoopBatch;\n\n// src/index.ts\ninitializeUseSelector(useSyncExternalStoreWithSelector2);\ninitializeConnect(React2.useSyncExternalStore);\nexport { Provider_default as Provider, ReactReduxContext, batch, connect_default as connect, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useDispatch, useSelector, useStore };","map":{"version":3,"names":["React2","useSyncExternalStoreWithSelector","useSyncExternalStoreWithSelector2","ReactOriginal","React","ContextKey","Symbol","for","gT","globalThis","getContext","createContext","contextMap","Map","realContext","get","process","env","NODE_ENV","displayName","set","ReactReduxContext","notInitialized","Error","createReduxContextHook","context","useReduxContext2","contextValue","useContext","useReduxContext","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","useSelector2","selector","equalityFnOrOptions","equalityFn","devModeChecks","store","subscription","getServerState","stabilityCheck","identityFunctionCheck","firstRun","useRef","wrappedSelector","useCallback","name","state","selected","finalIdentityFunctionCheck","finalStabilityCheck","current","toCompare","stack","e","console","warn","selected2","selectedState","addNestedSub","getState","useDebugValue","useSelector","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","REACT_CLIENT_REFERENCE","ForwardRef","Memo","isValidElementType","type","$$typeof","getModuleId","typeOf","object","$$typeofType","isContextConsumer","isMemo","warning","message","error","verify","methodName","Object","prototype","hasOwnProperty","call","verifySubselectors","mapStateToProps","mapDispatchToProps","mergeProps","pureFinalPropsSelectorFactory","dispatch","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","hasRunAtLeastOnce","ownProps","stateProps","dispatchProps","mergedProps","handleFirstCall","firstState","firstOwnProps","handleNewPropsAndNewState","dependsOnOwnProps","handleNewProps","handleNewState","nextStateProps","statePropsChanged","handleSubsequentCalls","nextState","nextOwnProps","propsChanged","stateChanged","pureFinalPropsSelector","finalPropsSelectorFactory","initMapStateToProps","initMapDispatchToProps","initMergeProps","options","bindActionCreators","actionCreators","boundActionCreators","key","actionCreator","args","isPlainObject","obj","proto","getPrototypeOf","baseProto","verifyPlainObject","value","wrapMapToPropsConstant","getConstant","initConstantSelector","constant","constantSelector","getDependsOnOwnProps","mapToProps","Boolean","length","wrapMapToPropsFunc","initProxySelector","proxy","mapToPropsProxy","stateOrDispatch","detectFactoryAndVerify","props","createInvalidArgFactory","arg","wrappedComponentName","mapDispatchToPropsFactory","mapStateToPropsFactory","defaultMergeProps","wrapMergePropsFunc","initMergePropsProxy","areMergedPropsEqual","hasRunOnce","mergePropsProxy","nextMergedProps","mergePropsFactory","defaultNoopBatch","callback","createListenerCollection","first","last","clear","notify","listener","next","listeners","push","subscribe","isSubscribed","prev","unsubscribe","nullListeners","createSubscription","parentSub","subscriptionsAmount","selfSubscribed","trySubscribe","cleanupListener","removed","tryUnsubscribe","notifyNestedSubs","handleChangeWrapper","onStateChange","trySubscribeSelf","tryUnsubscribeSelf","getListeners","canUseDOM","window","document","createElement","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","is","x","y","shallowEqual","objA","objB","keysA","keys","keysB","i","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arguments","arity","FORWARD_REF_STATICS","render","MEMO_STATICS","compare","TYPE_STATICS","getStatics","component","defineProperty","getOwnPropertyNames","getOwnPropertySymbols","getOwnPropertyDescriptor","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","inheritedComponent","concat","targetStatics","sourceStatics","descriptor","useSyncExternalStore","initializeConnect","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","subscribeUpdates","shouldHandleStateChanges","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","newChildProps","unsubscribeWrapper","strictEqual","hasWarnedAboutDeprecatedPureOption","connect","pure","forwardRef","Context","wrapWithConnect","WrappedComponent","isValid","selectorFactoryOptions","ConnectFunction","propsContext","reactReduxForwardedRef","useMemo","reactReduxForwardedRef2","wrapperProps2","ContextToUse","ResultContext","Consumer","didStoreComeFromProps","didStoreComeFromContext","subscription2","notifyNestedSubs2","bind","overriddenContextValue","isProcessingDispatch","latestSubscriptionCallbackError","actualChildPropsSelector","subscribeForReact","reactListener","actualChildProps","renderedWrappedComponent","ref","renderedChild","Provider","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded","connect_default","children","serverState","previousState","Provider_default","createStoreHook","useStore2","useStore","createDispatchHook","useDispatch2","useDispatch","batch"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\index.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\react.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\components\\Context.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\useSyncExternalStore.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\hooks\\useReduxContext.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\hooks\\useSelector.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\react-is.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\warning.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\verifySubselectors.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\selectorFactory.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\bindActionCreators.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\isPlainObject.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\verifyPlainObject.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\wrapMapToProps.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\invalidArgFactory.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\mapDispatchToProps.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\mapStateToProps.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\connect\\mergeProps.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\batch.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\Subscription.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\useIsomorphicLayoutEffect.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\shallowEqual.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\utils\\hoistStatics.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\components\\connect.tsx","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\components\\Provider.tsx","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\hooks\\useStore.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\hooks\\useDispatch.ts","C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\react-redux\\src\\exports.ts"],"sourcesContent":["// The primary entry point assumes we are working with React 18, and thus have\r\n// useSyncExternalStore available. We can import that directly from React itself.\r\n// The useSyncExternalStoreWithSelector has to be imported, but we can use the\r\n// non-shim version. This shaves off the byte size of the shim.\r\n\r\nimport * as React from 'react'\r\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector.js'\r\n\r\nimport { initializeUseSelector } from './hooks/useSelector'\r\nimport { initializeConnect } from './components/connect'\r\n\r\ninitializeUseSelector(useSyncExternalStoreWithSelector)\r\ninitializeConnect(React.useSyncExternalStore)\r\n\r\nexport * from './exports'\r\n","import * as ReactOriginal from 'react'\r\nimport type * as ReactNamespace from 'react'\r\n\r\nexport const React: typeof ReactNamespace =\r\n  // prettier-ignore\r\n  // @ts-ignore\r\n  'default' in ReactOriginal ? ReactOriginal['default'] : ReactOriginal as any\r\n","import type { Context } from 'react'\r\nimport { React } from '../utils/react'\r\nimport type { Action, Store, UnknownAction } from 'redux'\r\nimport type { Subscription } from '../utils/Subscription'\r\nimport type { ProviderProps } from './Provider'\r\n\r\nexport interface ReactReduxContextValue<\r\n  SS = any,\r\n  A extends Action<string> = UnknownAction\r\n> extends Pick<ProviderProps, 'stabilityCheck' | 'identityFunctionCheck'> {\r\n  store: Store<SS, A>\r\n  subscription: Subscription\r\n  getServerState?: () => SS\r\n}\r\n\r\nconst ContextKey = Symbol.for(`react-redux-context`)\r\nconst gT: {\r\n  [ContextKey]?: Map<\r\n    typeof React.createContext,\r\n    Context<ReactReduxContextValue | null>\r\n  >\r\n} = (\r\n  typeof globalThis !== 'undefined'\r\n    ? globalThis\r\n    : /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */ {}\r\n) as any\r\n\r\nfunction getContext(): Context<ReactReduxContextValue | null> {\r\n  if (!React.createContext) return {} as any\r\n\r\n  const contextMap = (gT[ContextKey] ??= new Map<\r\n    typeof React.createContext,\r\n    Context<ReactReduxContextValue | null>\r\n  >())\r\n  let realContext = contextMap.get(React.createContext)\r\n  if (!realContext) {\r\n    realContext = React.createContext<ReactReduxContextValue | null>(\r\n      null as any\r\n    )\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      realContext.displayName = 'ReactRedux'\r\n    }\r\n    contextMap.set(React.createContext, realContext)\r\n  }\r\n  return realContext\r\n}\r\n\r\nexport const ReactReduxContext = /*#__PURE__*/ getContext()\r\n\r\nexport type ReactReduxContextInstance = typeof ReactReduxContext\r\n\r\nexport default ReactReduxContext\r\n","import type { useSyncExternalStore } from 'use-sync-external-store'\r\nimport type { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector'\r\n\r\nexport const notInitialized = () => {\r\n  throw new Error('uSES not initialized!')\r\n}\r\n\r\nexport type uSES = typeof useSyncExternalStore\r\nexport type uSESWS = typeof useSyncExternalStoreWithSelector\r\n","import { React } from '../utils/react'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\n\r\n/**\r\n * Hook factory, which creates a `useReduxContext` hook bound to a given context. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useReduxContext` hook bound to the specified context.\r\n */\r\nexport function createReduxContextHook(context = ReactReduxContext) {\r\n  return function useReduxContext(): ReactReduxContextValue {\r\n    const contextValue = React.useContext(context)\r\n\r\n    if (process.env.NODE_ENV !== 'production' && !contextValue) {\r\n      throw new Error(\r\n        'could not find react-redux context value; please ensure the component is wrapped in a <Provider>'\r\n      )\r\n    }\r\n\r\n    return contextValue!\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @returns {any} the value of the `ReactReduxContext`\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useReduxContext } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const { store } = useReduxContext()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\r\nexport const useReduxContext = /*#__PURE__*/ createReduxContextHook()\r\n","//import * as React from 'react'\r\nimport { React } from '../utils/react'\r\n\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport type { EqualityFn, NoInfer } from '../types'\r\nimport type { uSESWS } from '../utils/useSyncExternalStore'\r\nimport { notInitialized } from '../utils/useSyncExternalStore'\r\nimport {\r\n  createReduxContextHook,\r\n  useReduxContext as useDefaultReduxContext,\r\n} from './useReduxContext'\r\n\r\n/**\r\n * The frequency of development mode checks.\r\n *\r\n * @since 8.1.0\r\n * @internal\r\n */\r\nexport type DevModeCheckFrequency = 'never' | 'once' | 'always'\r\n\r\n/**\r\n * Represents the configuration for development mode checks.\r\n *\r\n * @since 9.0.0\r\n * @internal\r\n */\r\nexport interface DevModeChecks {\r\n  /**\r\n   * Overrides the global stability check for the selector.\r\n   * - `once` - Run only the first time the selector is called.\r\n   * - `always` - Run every time the selector is called.\r\n   * - `never` - Never run the stability check.\r\n   *\r\n   * @default 'once'\r\n   *\r\n   * @since 8.1.0\r\n   */\r\n  stabilityCheck: DevModeCheckFrequency\r\n\r\n  /**\r\n   * Overrides the global identity function check for the selector.\r\n   * - `once` - Run only the first time the selector is called.\r\n   * - `always` - Run every time the selector is called.\r\n   * - `never` - Never run the identity function check.\r\n   *\r\n   * **Note**: Previously referred to as `noopCheck`.\r\n   *\r\n   * @default 'once'\r\n   *\r\n   * @since 9.0.0\r\n   */\r\n  identityFunctionCheck: DevModeCheckFrequency\r\n}\r\n\r\nexport interface UseSelectorOptions<Selected = unknown> {\r\n  equalityFn?: EqualityFn<Selected>\r\n\r\n  /**\r\n   * `useSelector` performs additional checks in development mode to help\r\n   * identify and warn about potential issues in selector behavior. This\r\n   * option allows you to customize the behavior of these checks per selector.\r\n   *\r\n   * @since 9.0.0\r\n   */\r\n  devModeChecks?: Partial<DevModeChecks>\r\n}\r\n\r\nexport interface UseSelector {\r\n  <TState = unknown, Selected = unknown>(\r\n    selector: (state: TState) => Selected,\r\n    equalityFn?: EqualityFn<Selected>\r\n  ): Selected\r\n  <TState = unknown, Selected = unknown>(\r\n    selector: (state: TState) => Selected,\r\n    options?: UseSelectorOptions<Selected>\r\n  ): Selected\r\n}\r\n\r\nlet useSyncExternalStoreWithSelector = notInitialized as uSESWS\r\nexport const initializeUseSelector = (fn: uSESWS) => {\r\n  useSyncExternalStoreWithSelector = fn\r\n}\r\n\r\nconst refEquality: EqualityFn<any> = (a, b) => a === b\r\n\r\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\r\nexport function createSelectorHook(\r\n  context: React.Context<ReactReduxContextValue<\r\n    any,\r\n    any\r\n  > | null> = ReactReduxContext\r\n): UseSelector {\r\n  const useReduxContext =\r\n    context === ReactReduxContext\r\n      ? useDefaultReduxContext\r\n      : createReduxContextHook(context)\r\n\r\n  return function useSelector<TState, Selected extends unknown>(\r\n    selector: (state: TState) => Selected,\r\n    equalityFnOrOptions:\r\n      | EqualityFn<NoInfer<Selected>>\r\n      | UseSelectorOptions<NoInfer<Selected>> = {}\r\n  ): Selected {\r\n    const { equalityFn = refEquality, devModeChecks = {} } =\r\n      typeof equalityFnOrOptions === 'function'\r\n        ? { equalityFn: equalityFnOrOptions }\r\n        : equalityFnOrOptions\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!selector) {\r\n        throw new Error(`You must pass a selector to useSelector`)\r\n      }\r\n      if (typeof selector !== 'function') {\r\n        throw new Error(`You must pass a function as a selector to useSelector`)\r\n      }\r\n      if (typeof equalityFn !== 'function') {\r\n        throw new Error(\r\n          `You must pass a function as an equality function to useSelector`\r\n        )\r\n      }\r\n    }\r\n\r\n    const {\r\n      store,\r\n      subscription,\r\n      getServerState,\r\n      stabilityCheck,\r\n      identityFunctionCheck,\r\n    } = useReduxContext()\r\n\r\n    const firstRun = React.useRef(true)\r\n\r\n    const wrappedSelector = React.useCallback<typeof selector>(\r\n      {\r\n        [selector.name](state: TState) {\r\n          const selected = selector(state)\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            const {\r\n              identityFunctionCheck: finalIdentityFunctionCheck,\r\n              stabilityCheck: finalStabilityCheck,\r\n            } = {\r\n              stabilityCheck,\r\n              identityFunctionCheck,\r\n              ...devModeChecks,\r\n            }\r\n            if (\r\n              finalStabilityCheck === 'always' ||\r\n              (finalStabilityCheck === 'once' && firstRun.current)\r\n            ) {\r\n              const toCompare = selector(state)\r\n              if (!equalityFn(selected, toCompare)) {\r\n                let stack: string | undefined = undefined\r\n                try {\r\n                  throw new Error()\r\n                } catch (e) {\r\n                  ;({ stack } = e as Error)\r\n                }\r\n                console.warn(\r\n                  'Selector ' +\r\n                    (selector.name || 'unknown') +\r\n                    ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' +\r\n                    '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization',\r\n                  {\r\n                    state,\r\n                    selected,\r\n                    selected2: toCompare,\r\n                    stack,\r\n                  }\r\n                )\r\n              }\r\n            }\r\n            if (\r\n              finalIdentityFunctionCheck === 'always' ||\r\n              (finalIdentityFunctionCheck === 'once' && firstRun.current)\r\n            ) {\r\n              // @ts-ignore\r\n              if (selected === state) {\r\n                let stack: string | undefined = undefined\r\n                try {\r\n                  throw new Error()\r\n                } catch (e) {\r\n                  ;({ stack } = e as Error)\r\n                }\r\n                console.warn(\r\n                  'Selector ' +\r\n                    (selector.name || 'unknown') +\r\n                    ' returned the root state when called. This can lead to unnecessary rerenders.' +\r\n                    '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.',\r\n                  { stack }\r\n                )\r\n              }\r\n            }\r\n            if (firstRun.current) firstRun.current = false\r\n          }\r\n          return selected\r\n        },\r\n      }[selector.name],\r\n      [selector, stabilityCheck, devModeChecks.stabilityCheck]\r\n    )\r\n\r\n    const selectedState = useSyncExternalStoreWithSelector(\r\n      subscription.addNestedSub,\r\n      store.getState,\r\n      getServerState || store.getState,\r\n      wrappedSelector,\r\n      equalityFn\r\n    )\r\n\r\n    React.useDebugValue(selectedState)\r\n\r\n    return selectedState\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\r\nexport const useSelector = /*#__PURE__*/ createSelectorHook()\r\n","import type { ElementType, MemoExoticComponent, ReactElement } from 'react'\r\n\r\n// Directly ported from:\r\n// https://unpkg.com/browse/react-is@18.3.0-canary-ee68446ff-20231115/cjs/react-is.production.js\r\n// It's very possible this could change in the future, but given that\r\n// we only use these in `connect`, this is a low priority.\r\n\r\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element')\r\nconst REACT_PORTAL_TYPE = Symbol.for('react.portal')\r\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment')\r\nconst REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode')\r\nconst REACT_PROFILER_TYPE = Symbol.for('react.profiler')\r\nconst REACT_PROVIDER_TYPE = Symbol.for('react.provider')\r\nconst REACT_CONTEXT_TYPE = Symbol.for('react.context')\r\nconst REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context')\r\nconst REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref')\r\nconst REACT_SUSPENSE_TYPE = Symbol.for('react.suspense')\r\nconst REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list')\r\nconst REACT_MEMO_TYPE = Symbol.for('react.memo')\r\nconst REACT_LAZY_TYPE = Symbol.for('react.lazy')\r\nconst REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen')\r\nconst REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference')\r\n\r\nexport const ForwardRef = REACT_FORWARD_REF_TYPE\r\nexport const Memo = REACT_MEMO_TYPE\r\n\r\nexport function isValidElementType(type: any): type is ElementType {\r\n  if (typeof type === 'string' || typeof type === 'function') {\r\n    return true\r\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\r\n\r\n  if (\r\n    type === REACT_FRAGMENT_TYPE ||\r\n    type === REACT_PROFILER_TYPE ||\r\n    type === REACT_STRICT_MODE_TYPE ||\r\n    type === REACT_SUSPENSE_TYPE ||\r\n    type === REACT_SUSPENSE_LIST_TYPE ||\r\n    type === REACT_OFFSCREEN_TYPE\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  if (typeof type === 'object' && type !== null) {\r\n    if (\r\n      type.$$typeof === REACT_LAZY_TYPE ||\r\n      type.$$typeof === REACT_MEMO_TYPE ||\r\n      type.$$typeof === REACT_PROVIDER_TYPE ||\r\n      type.$$typeof === REACT_CONTEXT_TYPE ||\r\n      type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\r\n      // types supported by any Flight configuration anywhere since\r\n      // we don't know which Flight build this will end up being used\r\n      // with.\r\n      type.$$typeof === REACT_CLIENT_REFERENCE ||\r\n      type.getModuleId !== undefined\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction typeOf(object: any): symbol | undefined {\r\n  if (typeof object === 'object' && object !== null) {\r\n    const $$typeof = object.$$typeof\r\n\r\n    switch ($$typeof) {\r\n      case REACT_ELEMENT_TYPE: {\r\n        const type = object.type\r\n\r\n        switch (type) {\r\n          case REACT_FRAGMENT_TYPE:\r\n          case REACT_PROFILER_TYPE:\r\n          case REACT_STRICT_MODE_TYPE:\r\n          case REACT_SUSPENSE_TYPE:\r\n          case REACT_SUSPENSE_LIST_TYPE:\r\n            return type\r\n\r\n          default: {\r\n            const $$typeofType = type && type.$$typeof\r\n\r\n            switch ($$typeofType) {\r\n              case REACT_SERVER_CONTEXT_TYPE:\r\n              case REACT_CONTEXT_TYPE:\r\n              case REACT_FORWARD_REF_TYPE:\r\n              case REACT_LAZY_TYPE:\r\n              case REACT_MEMO_TYPE:\r\n              case REACT_PROVIDER_TYPE:\r\n                return $$typeofType\r\n\r\n              default:\r\n                return $$typeof\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      case REACT_PORTAL_TYPE: {\r\n        return $$typeof\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\nexport function isContextConsumer(object: any): object is ReactElement {\r\n  return typeOf(object) === REACT_CONTEXT_TYPE\r\n}\r\n\r\nexport function isMemo(object: any): object is MemoExoticComponent<any> {\r\n  return typeOf(object) === REACT_MEMO_TYPE\r\n}\r\n","/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */\r\nexport default function warning(message: string) {\r\n  /* eslint-disable no-console */\r\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n    console.error(message)\r\n  }\r\n  /* eslint-enable no-console */\r\n  try {\r\n    // This error was thrown as a convenience so that if you enable\r\n    // \"break on all exceptions\" in your console,\r\n    // it would pause the execution at this line.\r\n    throw new Error(message)\r\n    /* eslint-disable no-empty */\r\n  } catch (e) {}\r\n  /* eslint-enable no-empty */\r\n}\r\n","import warning from '../utils/warning'\r\n\r\nfunction verify(selector: unknown, methodName: string): void {\r\n  if (!selector) {\r\n    throw new Error(`Unexpected value for ${methodName} in connect.`)\r\n  } else if (\r\n    methodName === 'mapStateToProps' ||\r\n    methodName === 'mapDispatchToProps'\r\n  ) {\r\n    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {\r\n      warning(\r\n        `The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default function verifySubselectors(\r\n  mapStateToProps: unknown,\r\n  mapDispatchToProps: unknown,\r\n  mergeProps: unknown\r\n): void {\r\n  verify(mapStateToProps, 'mapStateToProps')\r\n  verify(mapDispatchToProps, 'mapDispatchToProps')\r\n  verify(mergeProps, 'mergeProps')\r\n}\r\n","import type { Dispatch, Action } from 'redux'\r\nimport type { ComponentType } from 'react'\r\nimport verifySubselectors from './verifySubselectors'\r\nimport type { EqualityFn, ExtendedEqualityFn } from '../types'\r\n\r\nexport type SelectorFactory<S, TProps, TOwnProps, TFactoryOptions> = (\r\n  dispatch: Dispatch<Action<string>>,\r\n  factoryOptions: TFactoryOptions\r\n) => Selector<S, TProps, TOwnProps>\r\n\r\nexport type Selector<S, TProps, TOwnProps = null> = TOwnProps extends\r\n  | null\r\n  | undefined\r\n  ? (state: S) => TProps\r\n  : (state: S, ownProps: TOwnProps) => TProps\r\n\r\nexport type MapStateToProps<TStateProps, TOwnProps, State> = (\r\n  state: State,\r\n  ownProps: TOwnProps\r\n) => TStateProps\r\n\r\nexport type MapStateToPropsFactory<TStateProps, TOwnProps, State> = (\r\n  initialState: State,\r\n  ownProps: TOwnProps\r\n) => MapStateToProps<TStateProps, TOwnProps, State>\r\n\r\nexport type MapStateToPropsParam<TStateProps, TOwnProps, State> =\r\n  | MapStateToPropsFactory<TStateProps, TOwnProps, State>\r\n  | MapStateToProps<TStateProps, TOwnProps, State>\r\n  | null\r\n  | undefined\r\n\r\nexport type MapDispatchToPropsFunction<TDispatchProps, TOwnProps> = (\r\n  dispatch: Dispatch<Action<string>>,\r\n  ownProps: TOwnProps\r\n) => TDispatchProps\r\n\r\nexport type MapDispatchToProps<TDispatchProps, TOwnProps> =\r\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\r\n  | TDispatchProps\r\n\r\nexport type MapDispatchToPropsFactory<TDispatchProps, TOwnProps> = (\r\n  dispatch: Dispatch<Action<string>>,\r\n  ownProps: TOwnProps\r\n) => MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\r\n\r\nexport type MapDispatchToPropsParam<TDispatchProps, TOwnProps> =\r\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\r\n  | MapDispatchToProps<TDispatchProps, TOwnProps>\r\n\r\nexport type MapDispatchToPropsNonObject<TDispatchProps, TOwnProps> =\r\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\r\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\r\n\r\nexport type MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> = (\r\n  stateProps: TStateProps,\r\n  dispatchProps: TDispatchProps,\r\n  ownProps: TOwnProps\r\n) => TMergedProps\r\n\r\ninterface PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\r\n  readonly areStatesEqual: ExtendedEqualityFn<State, TOwnProps>\r\n  readonly areStatePropsEqual: EqualityFn<TStateProps>\r\n  readonly areOwnPropsEqual: EqualityFn<TOwnProps>\r\n}\r\n\r\nexport function pureFinalPropsSelectorFactory<\r\n  TStateProps,\r\n  TOwnProps,\r\n  TDispatchProps,\r\n  TMergedProps,\r\n  State\r\n>(\r\n  mapStateToProps: WrappedMapStateToProps<TStateProps, TOwnProps, State>,\r\n  mapDispatchToProps: WrappedMapDispatchToProps<TDispatchProps, TOwnProps>,\r\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\r\n  dispatch: Dispatch<Action<string>>,\r\n  {\r\n    areStatesEqual,\r\n    areOwnPropsEqual,\r\n    areStatePropsEqual,\r\n  }: PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State>\r\n) {\r\n  let hasRunAtLeastOnce = false\r\n  let state: State\r\n  let ownProps: TOwnProps\r\n  let stateProps: TStateProps\r\n  let dispatchProps: TDispatchProps\r\n  let mergedProps: TMergedProps\r\n\r\n  function handleFirstCall(firstState: State, firstOwnProps: TOwnProps) {\r\n    state = firstState\r\n    ownProps = firstOwnProps\r\n    stateProps = mapStateToProps(state, ownProps)\r\n    dispatchProps = mapDispatchToProps(dispatch, ownProps)\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n    hasRunAtLeastOnce = true\r\n    return mergedProps\r\n  }\r\n\r\n  function handleNewPropsAndNewState() {\r\n    stateProps = mapStateToProps(state, ownProps)\r\n\r\n    if (mapDispatchToProps.dependsOnOwnProps)\r\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\r\n\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n    return mergedProps\r\n  }\r\n\r\n  function handleNewProps() {\r\n    if (mapStateToProps.dependsOnOwnProps)\r\n      stateProps = mapStateToProps(state, ownProps)\r\n\r\n    if (mapDispatchToProps.dependsOnOwnProps)\r\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\r\n\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n    return mergedProps\r\n  }\r\n\r\n  function handleNewState() {\r\n    const nextStateProps = mapStateToProps(state, ownProps)\r\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)\r\n    stateProps = nextStateProps\r\n\r\n    if (statePropsChanged)\r\n      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n\r\n    return mergedProps\r\n  }\r\n\r\n  function handleSubsequentCalls(nextState: State, nextOwnProps: TOwnProps) {\r\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)\r\n    const stateChanged = !areStatesEqual(\r\n      nextState,\r\n      state,\r\n      nextOwnProps,\r\n      ownProps\r\n    )\r\n    state = nextState\r\n    ownProps = nextOwnProps\r\n\r\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState()\r\n    if (propsChanged) return handleNewProps()\r\n    if (stateChanged) return handleNewState()\r\n    return mergedProps\r\n  }\r\n\r\n  return function pureFinalPropsSelector(\r\n    nextState: State,\r\n    nextOwnProps: TOwnProps\r\n  ) {\r\n    return hasRunAtLeastOnce\r\n      ? handleSubsequentCalls(nextState, nextOwnProps)\r\n      : handleFirstCall(nextState, nextOwnProps)\r\n  }\r\n}\r\n\r\ninterface WrappedMapStateToProps<TStateProps, TOwnProps, State> {\r\n  (state: State, ownProps: TOwnProps): TStateProps\r\n  readonly dependsOnOwnProps: boolean\r\n}\r\n\r\ninterface WrappedMapDispatchToProps<TDispatchProps, TOwnProps> {\r\n  (dispatch: Dispatch<Action<string>>, ownProps: TOwnProps): TDispatchProps\r\n  readonly dependsOnOwnProps: boolean\r\n}\r\n\r\nexport interface InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  extends PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\r\n  readonly shouldHandleStateChanges: boolean\r\n  readonly displayName: string\r\n  readonly wrappedComponentName: string\r\n  readonly WrappedComponent: ComponentType<TOwnProps>\r\n  readonly areMergedPropsEqual: EqualityFn<TMergedProps>\r\n}\r\n\r\nexport interface SelectorFactoryOptions<\r\n  TStateProps,\r\n  TOwnProps,\r\n  TDispatchProps,\r\n  TMergedProps,\r\n  State\r\n> extends InitOptions<TStateProps, TOwnProps, TMergedProps, State> {\r\n  readonly initMapStateToProps: (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  ) => WrappedMapStateToProps<TStateProps, TOwnProps, State>\r\n  readonly initMapDispatchToProps: (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  ) => WrappedMapDispatchToProps<TDispatchProps, TOwnProps>\r\n  readonly initMergeProps: (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>\r\n  ) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\r\n}\r\n\r\n// TODO: Add more comments\r\n\r\n// The selector returned by selectorFactory will memoize its results,\r\n// allowing connect's shouldComponentUpdate to return false if final\r\n// props have not changed.\r\n\r\nexport default function finalPropsSelectorFactory<\r\n  TStateProps,\r\n  TOwnProps,\r\n  TDispatchProps,\r\n  TMergedProps,\r\n  State\r\n>(\r\n  dispatch: Dispatch<Action<string>>,\r\n  {\r\n    initMapStateToProps,\r\n    initMapDispatchToProps,\r\n    initMergeProps,\r\n    ...options\r\n  }: SelectorFactoryOptions<\r\n    TStateProps,\r\n    TOwnProps,\r\n    TDispatchProps,\r\n    TMergedProps,\r\n    State\r\n  >\r\n) {\r\n  const mapStateToProps = initMapStateToProps(dispatch, options)\r\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options)\r\n  const mergeProps = initMergeProps(dispatch, options)\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps)\r\n  }\r\n\r\n  return pureFinalPropsSelectorFactory<\r\n    TStateProps,\r\n    TOwnProps,\r\n    TDispatchProps,\r\n    TMergedProps,\r\n    State\r\n  >(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options)\r\n}\r\n","import type { ActionCreatorsMapObject, Dispatch } from 'redux'\r\n\r\nexport default function bindActionCreators(\r\n  actionCreators: ActionCreatorsMapObject,\r\n  dispatch: Dispatch\r\n): ActionCreatorsMapObject {\r\n  const boundActionCreators: ActionCreatorsMapObject = {}\r\n\r\n  for (const key in actionCreators) {\r\n    const actionCreator = actionCreators[key]\r\n    if (typeof actionCreator === 'function') {\r\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args))\r\n    }\r\n  }\r\n  return boundActionCreators\r\n}\r\n","/**\r\n * @param {any} obj The object to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\r\nexport default function isPlainObject(obj: unknown) {\r\n  if (typeof obj !== 'object' || obj === null) return false\r\n\r\n  let proto = Object.getPrototypeOf(obj)\r\n  if (proto === null) return true\r\n\r\n  let baseProto = proto\r\n  while (Object.getPrototypeOf(baseProto) !== null) {\r\n    baseProto = Object.getPrototypeOf(baseProto)\r\n  }\r\n\r\n  return proto === baseProto\r\n}\r\n","import isPlainObject from './isPlainObject'\r\nimport warning from './warning'\r\n\r\nexport default function verifyPlainObject(\r\n  value: unknown,\r\n  displayName: string,\r\n  methodName: string\r\n) {\r\n  if (!isPlainObject(value)) {\r\n    warning(\r\n      `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`\r\n    )\r\n  }\r\n}\r\n","import type { ActionCreatorsMapObject, Dispatch, ActionCreator } from 'redux'\r\n\r\nimport type { FixTypeLater } from '../types'\r\nimport verifyPlainObject from '../utils/verifyPlainObject'\r\n\r\ntype AnyState = { [key: string]: any }\r\ntype StateOrDispatch<S extends AnyState = AnyState> = S | Dispatch\r\n\r\ntype AnyProps = { [key: string]: any }\r\n\r\nexport type MapToProps<P extends AnyProps = AnyProps> = {\r\n  // eslint-disable-next-line no-unused-vars\r\n  (stateOrDispatch: StateOrDispatch, ownProps?: P): FixTypeLater\r\n  dependsOnOwnProps?: boolean\r\n}\r\n\r\nexport function wrapMapToPropsConstant(\r\n  // * Note:\r\n  //  It seems that the dispatch argument\r\n  //  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)\r\n  //  and a state object in some others (ex: whenMapStateToPropsIsMissing)\r\n  // eslint-disable-next-line no-unused-vars\r\n  getConstant: (dispatch: Dispatch) =>\r\n    | {\r\n        dispatch?: Dispatch\r\n        dependsOnOwnProps?: boolean\r\n      }\r\n    | ActionCreatorsMapObject\r\n    | ActionCreator<any>\r\n) {\r\n  return function initConstantSelector(dispatch: Dispatch) {\r\n    const constant = getConstant(dispatch)\r\n\r\n    function constantSelector() {\r\n      return constant\r\n    }\r\n    constantSelector.dependsOnOwnProps = false\r\n    return constantSelector\r\n  }\r\n}\r\n\r\n// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\r\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\r\n// whether mapToProps needs to be invoked when props have changed.\r\n//\r\n// A length of one signals that mapToProps does not depend on props from the parent component.\r\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\r\n// therefore not reporting its length accurately..\r\n// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?\r\nexport function getDependsOnOwnProps(mapToProps: MapToProps) {\r\n  return mapToProps.dependsOnOwnProps\r\n    ? Boolean(mapToProps.dependsOnOwnProps)\r\n    : mapToProps.length !== 1\r\n}\r\n\r\n// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\r\n// this function wraps mapToProps in a proxy function which does several things:\r\n//\r\n//  * Detects whether the mapToProps function being called depends on props, which\r\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\r\n//\r\n//  * On first call, handles mapToProps if returns another function, and treats that\r\n//    new function as the true mapToProps for subsequent calls.\r\n//\r\n//  * On first call, verifies the first result is a plain object, in order to warn\r\n//    the developer that their mapToProps function is not returning a valid result.\r\n//\r\nexport function wrapMapToPropsFunc<P extends AnyProps = AnyProps>(\r\n  mapToProps: MapToProps,\r\n  methodName: string\r\n) {\r\n  return function initProxySelector(\r\n    dispatch: Dispatch,\r\n    { displayName }: { displayName: string }\r\n  ) {\r\n    const proxy = function mapToPropsProxy(\r\n      stateOrDispatch: StateOrDispatch,\r\n      ownProps?: P\r\n    ): MapToProps {\r\n      return proxy.dependsOnOwnProps\r\n        ? proxy.mapToProps(stateOrDispatch, ownProps)\r\n        : proxy.mapToProps(stateOrDispatch, undefined)\r\n    }\r\n\r\n    // allow detectFactoryAndVerify to get ownProps\r\n    proxy.dependsOnOwnProps = true\r\n\r\n    proxy.mapToProps = function detectFactoryAndVerify(\r\n      stateOrDispatch: StateOrDispatch,\r\n      ownProps?: P\r\n    ): MapToProps {\r\n      proxy.mapToProps = mapToProps\r\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)\r\n      let props = proxy(stateOrDispatch, ownProps)\r\n\r\n      if (typeof props === 'function') {\r\n        proxy.mapToProps = props\r\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)\r\n        props = proxy(stateOrDispatch, ownProps)\r\n      }\r\n\r\n      if (process.env.NODE_ENV !== 'production')\r\n        verifyPlainObject(props, displayName, methodName)\r\n\r\n      return props\r\n    }\r\n\r\n    return proxy\r\n  }\r\n}\r\n","import type { Action, Dispatch } from 'redux'\r\n\r\nexport function createInvalidArgFactory(arg: unknown, name: string) {\r\n  return (\r\n    dispatch: Dispatch<Action<string>>,\r\n    options: { readonly wrappedComponentName: string }\r\n  ) => {\r\n    throw new Error(\r\n      `Invalid value of type ${typeof arg} for ${name} argument when connecting component ${\r\n        options.wrappedComponentName\r\n      }.`\r\n    )\r\n  }\r\n}\r\n","import type { Action, Dispatch } from 'redux'\r\nimport bindActionCreators from '../utils/bindActionCreators'\r\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\r\nimport { createInvalidArgFactory } from './invalidArgFactory'\r\nimport type { MapDispatchToPropsParam } from './selectorFactory'\r\n\r\nexport function mapDispatchToPropsFactory<TDispatchProps, TOwnProps>(\r\n  mapDispatchToProps:\r\n    | MapDispatchToPropsParam<TDispatchProps, TOwnProps>\r\n    | undefined\r\n) {\r\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object'\r\n    ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) =>\r\n        // @ts-ignore\r\n        bindActionCreators(mapDispatchToProps, dispatch)\r\n      )\r\n    : !mapDispatchToProps\r\n    ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) => ({\r\n        dispatch,\r\n      }))\r\n    : typeof mapDispatchToProps === 'function'\r\n    ? // @ts-ignore\r\n      wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps')\r\n    : createInvalidArgFactory(mapDispatchToProps, 'mapDispatchToProps')\r\n}\r\n","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\r\nimport { createInvalidArgFactory } from './invalidArgFactory'\r\nimport type { MapStateToPropsParam } from './selectorFactory'\r\n\r\nexport function mapStateToPropsFactory<TStateProps, TOwnProps, State>(\r\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>\r\n) {\r\n  return !mapStateToProps\r\n    ? wrapMapToPropsConstant(() => ({}))\r\n    : typeof mapStateToProps === 'function'\r\n    ? // @ts-ignore\r\n      wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps')\r\n    : createInvalidArgFactory(mapStateToProps, 'mapStateToProps')\r\n}\r\n","import type { Action, Dispatch } from 'redux'\r\nimport verifyPlainObject from '../utils/verifyPlainObject'\r\nimport { createInvalidArgFactory } from './invalidArgFactory'\r\nimport type { MergeProps } from './selectorFactory'\r\nimport type { EqualityFn } from '../types'\r\n\r\nexport function defaultMergeProps<\r\n  TStateProps,\r\n  TDispatchProps,\r\n  TOwnProps,\r\n  TMergedProps\r\n>(\r\n  stateProps: TStateProps,\r\n  dispatchProps: TDispatchProps,\r\n  ownProps: TOwnProps\r\n): TMergedProps {\r\n  // @ts-ignore\r\n  return { ...ownProps, ...stateProps, ...dispatchProps }\r\n}\r\n\r\nexport function wrapMergePropsFunc<\r\n  TStateProps,\r\n  TDispatchProps,\r\n  TOwnProps,\r\n  TMergedProps\r\n>(\r\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\r\n): (\r\n  dispatch: Dispatch<Action<string>>,\r\n  options: {\r\n    readonly displayName: string\r\n    readonly areMergedPropsEqual: EqualityFn<TMergedProps>\r\n  }\r\n) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> {\r\n  return function initMergePropsProxy(\r\n    dispatch,\r\n    { displayName, areMergedPropsEqual }\r\n  ) {\r\n    let hasRunOnce = false\r\n    let mergedProps: TMergedProps\r\n\r\n    return function mergePropsProxy(\r\n      stateProps: TStateProps,\r\n      dispatchProps: TDispatchProps,\r\n      ownProps: TOwnProps\r\n    ) {\r\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps)\r\n\r\n      if (hasRunOnce) {\r\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps))\r\n          mergedProps = nextMergedProps\r\n      } else {\r\n        hasRunOnce = true\r\n        mergedProps = nextMergedProps\r\n\r\n        if (process.env.NODE_ENV !== 'production')\r\n          verifyPlainObject(mergedProps, displayName, 'mergeProps')\r\n      }\r\n\r\n      return mergedProps\r\n    }\r\n  }\r\n}\r\n\r\nexport function mergePropsFactory<\r\n  TStateProps,\r\n  TDispatchProps,\r\n  TOwnProps,\r\n  TMergedProps\r\n>(\r\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\r\n) {\r\n  return !mergeProps\r\n    ? () => defaultMergeProps\r\n    : typeof mergeProps === 'function'\r\n    ? wrapMergePropsFunc(mergeProps)\r\n    : createInvalidArgFactory(mergeProps, 'mergeProps')\r\n}\r\n","// Default to a dummy \"batch\" implementation that just runs the callback\r\nexport function defaultNoopBatch(callback: () => void) {\r\n  callback()\r\n}\r\n","import { defaultNoopBatch as batch } from './batch'\r\n\r\n// encapsulates the subscription logic for connecting a component to the redux store, as\r\n// well as nesting subscriptions of descendant components, so that we can ensure the\r\n// ancestor components re-render before descendants\r\n\r\ntype VoidFunc = () => void\r\n\r\ntype Listener = {\r\n  callback: VoidFunc\r\n  next: Listener | null\r\n  prev: Listener | null\r\n}\r\n\r\nfunction createListenerCollection() {\r\n  let first: Listener | null = null\r\n  let last: Listener | null = null\r\n\r\n  return {\r\n    clear() {\r\n      first = null\r\n      last = null\r\n    },\r\n\r\n    notify() {\r\n      batch(() => {\r\n        let listener = first\r\n        while (listener) {\r\n          listener.callback()\r\n          listener = listener.next\r\n        }\r\n      })\r\n    },\r\n\r\n    get() {\r\n      let listeners: Listener[] = []\r\n      let listener = first\r\n      while (listener) {\r\n        listeners.push(listener)\r\n        listener = listener.next\r\n      }\r\n      return listeners\r\n    },\r\n\r\n    subscribe(callback: () => void) {\r\n      let isSubscribed = true\r\n\r\n      let listener: Listener = (last = {\r\n        callback,\r\n        next: null,\r\n        prev: last,\r\n      })\r\n\r\n      if (listener.prev) {\r\n        listener.prev.next = listener\r\n      } else {\r\n        first = listener\r\n      }\r\n\r\n      return function unsubscribe() {\r\n        if (!isSubscribed || first === null) return\r\n        isSubscribed = false\r\n\r\n        if (listener.next) {\r\n          listener.next.prev = listener.prev\r\n        } else {\r\n          last = listener.prev\r\n        }\r\n        if (listener.prev) {\r\n          listener.prev.next = listener.next\r\n        } else {\r\n          first = listener.next\r\n        }\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\ntype ListenerCollection = ReturnType<typeof createListenerCollection>\r\n\r\nexport interface Subscription {\r\n  addNestedSub: (listener: VoidFunc) => VoidFunc\r\n  notifyNestedSubs: VoidFunc\r\n  handleChangeWrapper: VoidFunc\r\n  isSubscribed: () => boolean\r\n  onStateChange?: VoidFunc | null\r\n  trySubscribe: VoidFunc\r\n  tryUnsubscribe: VoidFunc\r\n  getListeners: () => ListenerCollection\r\n}\r\n\r\nconst nullListeners = {\r\n  notify() {},\r\n  get: () => [],\r\n} as unknown as ListenerCollection\r\n\r\nexport function createSubscription(store: any, parentSub?: Subscription) {\r\n  let unsubscribe: VoidFunc | undefined\r\n  let listeners: ListenerCollection = nullListeners\r\n\r\n  // Reasons to keep the subscription active\r\n  let subscriptionsAmount = 0\r\n\r\n  // Is this specific subscription subscribed (or only nested ones?)\r\n  let selfSubscribed = false\r\n\r\n  function addNestedSub(listener: () => void) {\r\n    trySubscribe()\r\n\r\n    const cleanupListener = listeners.subscribe(listener)\r\n\r\n    // cleanup nested sub\r\n    let removed = false\r\n    return () => {\r\n      if (!removed) {\r\n        removed = true\r\n        cleanupListener()\r\n        tryUnsubscribe()\r\n      }\r\n    }\r\n  }\r\n\r\n  function notifyNestedSubs() {\r\n    listeners.notify()\r\n  }\r\n\r\n  function handleChangeWrapper() {\r\n    if (subscription.onStateChange) {\r\n      subscription.onStateChange()\r\n    }\r\n  }\r\n\r\n  function isSubscribed() {\r\n    return selfSubscribed\r\n  }\r\n\r\n  function trySubscribe() {\r\n    subscriptionsAmount++\r\n    if (!unsubscribe) {\r\n      unsubscribe = parentSub\r\n        ? parentSub.addNestedSub(handleChangeWrapper)\r\n        : store.subscribe(handleChangeWrapper)\r\n\r\n      listeners = createListenerCollection()\r\n    }\r\n  }\r\n\r\n  function tryUnsubscribe() {\r\n    subscriptionsAmount--\r\n    if (unsubscribe && subscriptionsAmount === 0) {\r\n      unsubscribe()\r\n      unsubscribe = undefined\r\n      listeners.clear()\r\n      listeners = nullListeners\r\n    }\r\n  }\r\n\r\n  function trySubscribeSelf() {\r\n    if (!selfSubscribed) {\r\n      selfSubscribed = true\r\n      trySubscribe()\r\n    }\r\n  }\r\n\r\n  function tryUnsubscribeSelf() {\r\n    if (selfSubscribed) {\r\n      selfSubscribed = false\r\n      tryUnsubscribe()\r\n    }\r\n  }\r\n\r\n  const subscription: Subscription = {\r\n    addNestedSub,\r\n    notifyNestedSubs,\r\n    handleChangeWrapper,\r\n    isSubscribed,\r\n    trySubscribe: trySubscribeSelf,\r\n    tryUnsubscribe: tryUnsubscribeSelf,\r\n    getListeners: () => listeners,\r\n  }\r\n\r\n  return subscription\r\n}\r\n","import { React } from '../utils/react'\r\n\r\n// React currently throws a warning when using useLayoutEffect on the server.\r\n// To get around it, we can conditionally useEffect on the server (no-op) and\r\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\r\n// subscription callback always has the selector from the latest render commit\r\n// available, otherwise a store update may happen between render and the effect,\r\n// which may cause missed updates; we also must ensure the store subscription\r\n// is created synchronously, otherwise a store update may occur before the\r\n// subscription is created and an inconsistent state may be observed\r\n\r\n// Matches logic in React's `shared/ExecutionEnvironment` file\r\nexport const canUseDOM = !!(\r\n  typeof window !== 'undefined' &&\r\n  typeof window.document !== 'undefined' &&\r\n  typeof window.document.createElement !== 'undefined'\r\n)\r\n\r\nexport const useIsomorphicLayoutEffect = canUseDOM\r\n  ? React.useLayoutEffect\r\n  : React.useEffect\r\n","function is(x: unknown, y: unknown) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y\r\n  } else {\r\n    return x !== x && y !== y\r\n  }\r\n}\r\n\r\nexport default function shallowEqual(objA: any, objB: any) {\r\n  if (is(objA, objB)) return true\r\n\r\n  if (\r\n    typeof objA !== 'object' ||\r\n    objA === null ||\r\n    typeof objB !== 'object' ||\r\n    objB === null\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  const keysA = Object.keys(objA)\r\n  const keysB = Object.keys(objB)\r\n\r\n  if (keysA.length !== keysB.length) return false\r\n\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    if (\r\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\r\n      !is(objA[keysA[i]], objB[keysA[i]])\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n","// Copied directly from:\r\n// https://github.com/mridgway/hoist-non-react-statics/blob/main/src/index.js\r\n// https://unpkg.com/browse/@types/hoist-non-react-statics@3.3.1/index.d.ts\r\n\r\n/**\r\n * Copyright 2015, Yahoo! Inc.\r\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\r\n */\r\nimport type * as React from 'react'\r\nimport { ForwardRef, Memo, isMemo } from '../utils/react-is'\r\n\r\nconst REACT_STATICS = {\r\n  childContextTypes: true,\r\n  contextType: true,\r\n  contextTypes: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  getDefaultProps: true,\r\n  getDerivedStateFromError: true,\r\n  getDerivedStateFromProps: true,\r\n  mixins: true,\r\n  propTypes: true,\r\n  type: true,\r\n} as const\r\n\r\nconst KNOWN_STATICS = {\r\n  name: true,\r\n  length: true,\r\n  prototype: true,\r\n  caller: true,\r\n  callee: true,\r\n  arguments: true,\r\n  arity: true,\r\n} as const\r\n\r\nconst FORWARD_REF_STATICS = {\r\n  $$typeof: true,\r\n  render: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  propTypes: true,\r\n} as const\r\n\r\nconst MEMO_STATICS = {\r\n  $$typeof: true,\r\n  compare: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  propTypes: true,\r\n  type: true,\r\n} as const\r\n\r\nconst TYPE_STATICS = {\r\n  [ForwardRef]: FORWARD_REF_STATICS,\r\n  [Memo]: MEMO_STATICS,\r\n} as const\r\n\r\nfunction getStatics(component: any) {\r\n  // React v16.11 and below\r\n  if (isMemo(component)) {\r\n    return MEMO_STATICS\r\n  }\r\n\r\n  // React v16.12 and above\r\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS\r\n}\r\n\r\nexport type NonReactStatics<\r\n  S extends React.ComponentType<any>,\r\n  C extends {\r\n    [key: string]: true\r\n  } = {}\r\n> = {\r\n  [key in Exclude<\r\n    keyof S,\r\n    S extends React.MemoExoticComponent<any>\r\n      ? keyof typeof MEMO_STATICS | keyof C\r\n      : S extends React.ForwardRefExoticComponent<any>\r\n      ? keyof typeof FORWARD_REF_STATICS | keyof C\r\n      : keyof typeof REACT_STATICS | keyof typeof KNOWN_STATICS | keyof C\r\n  >]: S[key]\r\n}\r\n\r\nconst defineProperty = Object.defineProperty\r\nconst getOwnPropertyNames = Object.getOwnPropertyNames\r\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols\r\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor\r\nconst getPrototypeOf = Object.getPrototypeOf\r\nconst objectPrototype = Object.prototype\r\n\r\nexport default function hoistNonReactStatics<\r\n  T extends React.ComponentType<any>,\r\n  S extends React.ComponentType<any>,\r\n  C extends {\r\n    [key: string]: true\r\n  } = {}\r\n>(targetComponent: T, sourceComponent: S): T & NonReactStatics<S, C> {\r\n  if (typeof sourceComponent !== 'string') {\r\n    // don't hoist over string (html) components\r\n\r\n    if (objectPrototype) {\r\n      const inheritedComponent = getPrototypeOf(sourceComponent)\r\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\r\n        hoistNonReactStatics(targetComponent, inheritedComponent)\r\n      }\r\n    }\r\n\r\n    let keys: (string | symbol)[] = getOwnPropertyNames(sourceComponent)\r\n\r\n    if (getOwnPropertySymbols) {\r\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent))\r\n    }\r\n\r\n    const targetStatics = getStatics(targetComponent)\r\n    const sourceStatics = getStatics(sourceComponent)\r\n\r\n    for (let i = 0; i < keys.length; ++i) {\r\n      const key = keys[i]\r\n      if (\r\n        !KNOWN_STATICS[key as keyof typeof KNOWN_STATICS] &&\r\n        !(sourceStatics && sourceStatics[key as keyof typeof sourceStatics]) &&\r\n        !(targetStatics && targetStatics[key as keyof typeof targetStatics])\r\n      ) {\r\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key)\r\n        try {\r\n          // Avoid failures from read-only properties\r\n          defineProperty(targetComponent, key, descriptor!)\r\n        } catch (e) {\r\n          // ignore\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return targetComponent as any\r\n}\r\n","/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\r\nimport type { ComponentType } from 'react'\r\nimport { React } from '../utils/react'\r\nimport { isValidElementType, isContextConsumer } from '../utils/react-is'\r\n\r\nimport type { Store } from 'redux'\r\n\r\nimport type {\r\n  ConnectedComponent,\r\n  InferableComponentEnhancer,\r\n  InferableComponentEnhancerWithProps,\r\n  ResolveThunks,\r\n  DispatchProp,\r\n  ConnectPropsMaybeWithoutContext,\r\n} from '../types'\r\n\r\nimport type {\r\n  MapStateToPropsParam,\r\n  MapDispatchToPropsParam,\r\n  MergeProps,\r\n  MapDispatchToPropsNonObject,\r\n  SelectorFactoryOptions,\r\n} from '../connect/selectorFactory'\r\nimport defaultSelectorFactory from '../connect/selectorFactory'\r\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps'\r\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps'\r\nimport { mergePropsFactory } from '../connect/mergeProps'\r\n\r\nimport type { Subscription } from '../utils/Subscription'\r\nimport { createSubscription } from '../utils/Subscription'\r\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\r\nimport shallowEqual from '../utils/shallowEqual'\r\nimport hoistStatics from '../utils/hoistStatics'\r\nimport warning from '../utils/warning'\r\n\r\nimport type {\r\n  ReactReduxContextValue,\r\n  ReactReduxContextInstance,\r\n} from './Context'\r\nimport { ReactReduxContext } from './Context'\r\n\r\nimport type { uSES } from '../utils/useSyncExternalStore'\r\nimport { notInitialized } from '../utils/useSyncExternalStore'\r\n\r\nlet useSyncExternalStore = notInitialized as uSES\r\nexport const initializeConnect = (fn: uSES) => {\r\n  useSyncExternalStore = fn\r\n}\r\n\r\n// Define some constant arrays just to avoid re-creating these\r\nconst EMPTY_ARRAY: [unknown, number] = [null, 0]\r\nconst NO_SUBSCRIPTION_ARRAY = [null, null]\r\n\r\n// Attempts to stringify whatever not-really-a-component value we were given\r\n// for logging in an error message\r\nconst stringifyComponent = (Comp: unknown) => {\r\n  try {\r\n    return JSON.stringify(Comp)\r\n  } catch (err) {\r\n    return String(Comp)\r\n  }\r\n}\r\n\r\ntype EffectFunc = (...args: any[]) => void | ReturnType<React.EffectCallback>\r\n\r\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\r\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\r\n// - we extract this to a separate function to avoid closing over values\r\n//   and causing memory leaks\r\nfunction useIsomorphicLayoutEffectWithArgs(\r\n  effectFunc: EffectFunc,\r\n  effectArgs: any[],\r\n  dependencies?: React.DependencyList\r\n) {\r\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies)\r\n}\r\n\r\n// Effect callback, extracted: assign the latest props values to refs for later usage\r\nfunction captureWrapperProps(\r\n  lastWrapperProps: React.MutableRefObject<unknown>,\r\n  lastChildProps: React.MutableRefObject<unknown>,\r\n  renderIsScheduled: React.MutableRefObject<boolean>,\r\n  wrapperProps: unknown,\r\n  // actualChildProps: unknown,\r\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\r\n  notifyNestedSubs: () => void\r\n) {\r\n  // We want to capture the wrapper props and child props we used for later comparisons\r\n  lastWrapperProps.current = wrapperProps\r\n  renderIsScheduled.current = false\r\n\r\n  // If the render was from a store update, clear out that reference and cascade the subscriber update\r\n  if (childPropsFromStoreUpdate.current) {\r\n    childPropsFromStoreUpdate.current = null\r\n    notifyNestedSubs()\r\n  }\r\n}\r\n\r\n// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\r\n// check for updates after dispatched actions, and trigger re-renders.\r\nfunction subscribeUpdates(\r\n  shouldHandleStateChanges: boolean,\r\n  store: Store,\r\n  subscription: Subscription,\r\n  childPropsSelector: (state: unknown, props: unknown) => unknown,\r\n  lastWrapperProps: React.MutableRefObject<unknown>,\r\n  lastChildProps: React.MutableRefObject<unknown>,\r\n  renderIsScheduled: React.MutableRefObject<boolean>,\r\n  isMounted: React.MutableRefObject<boolean>,\r\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\r\n  notifyNestedSubs: () => void,\r\n  // forceComponentUpdateDispatch: React.Dispatch<any>,\r\n  additionalSubscribeListener: () => void\r\n) {\r\n  // If we're not subscribed to the store, nothing to do here\r\n  if (!shouldHandleStateChanges) return () => {}\r\n\r\n  // Capture values for checking if and when this component unmounts\r\n  let didUnsubscribe = false\r\n  let lastThrownError: Error | null = null\r\n\r\n  // We'll run this callback every time a store subscription update propagates to this component\r\n  const checkForUpdates = () => {\r\n    if (didUnsubscribe || !isMounted.current) {\r\n      // Don't run stale listeners.\r\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\r\n      return\r\n    }\r\n\r\n    // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\r\n    const latestStoreState = store.getState()\r\n\r\n    let newChildProps, error\r\n    try {\r\n      // Actually run the selector with the most recent store state and wrapper props\r\n      // to determine what the child props should be\r\n      newChildProps = childPropsSelector(\r\n        latestStoreState,\r\n        lastWrapperProps.current\r\n      )\r\n    } catch (e) {\r\n      error = e\r\n      lastThrownError = e as Error | null\r\n    }\r\n\r\n    if (!error) {\r\n      lastThrownError = null\r\n    }\r\n\r\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\r\n    if (newChildProps === lastChildProps.current) {\r\n      if (!renderIsScheduled.current) {\r\n        notifyNestedSubs()\r\n      }\r\n    } else {\r\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\r\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\r\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\r\n      // forcing another re-render, which we don't want.\r\n      lastChildProps.current = newChildProps\r\n      childPropsFromStoreUpdate.current = newChildProps\r\n      renderIsScheduled.current = true\r\n\r\n      // TODO This is hacky and not how `uSES` is meant to be used\r\n      // Trigger the React `useSyncExternalStore` subscriber\r\n      additionalSubscribeListener()\r\n    }\r\n  }\r\n\r\n  // Actually subscribe to the nearest connected ancestor (or store)\r\n  subscription.onStateChange = checkForUpdates\r\n  subscription.trySubscribe()\r\n\r\n  // Pull data from the store after first render in case the store has\r\n  // changed since we began.\r\n  checkForUpdates()\r\n\r\n  const unsubscribeWrapper = () => {\r\n    didUnsubscribe = true\r\n    subscription.tryUnsubscribe()\r\n    subscription.onStateChange = null\r\n\r\n    if (lastThrownError) {\r\n      // It's possible that we caught an error due to a bad mapState function, but the\r\n      // parent re-rendered without this component and we're about to unmount.\r\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\r\n      // if we ever do those wrong, this throw will surface the error in our tests.\r\n      // In that case, throw the error from here so it doesn't get lost.\r\n      throw lastThrownError\r\n    }\r\n  }\r\n\r\n  return unsubscribeWrapper\r\n}\r\n\r\n// Reducer initial state creation for our update reducer\r\nconst initStateUpdates = () => EMPTY_ARRAY\r\n\r\nexport interface ConnectProps {\r\n  /** A custom Context instance that the component can use to access the store from an alternate Provider using that same Context instance */\r\n  context?: ReactReduxContextInstance\r\n  /** A Redux store instance to be used for subscriptions instead of the store from a Provider */\r\n  store?: Store\r\n}\r\n\r\ninterface InternalConnectProps extends ConnectProps {\r\n  reactReduxForwardedRef?: React.ForwardedRef<unknown>\r\n}\r\n\r\nfunction strictEqual(a: unknown, b: unknown) {\r\n  return a === b\r\n}\r\n\r\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\r\nexport type ConnectedProps<TConnector> =\r\n  TConnector extends InferableComponentEnhancerWithProps<\r\n    infer TInjectedProps,\r\n    any\r\n  >\r\n    ? unknown extends TInjectedProps\r\n      ? TConnector extends InferableComponentEnhancer<infer TInjectedProps>\r\n        ? TInjectedProps\r\n        : never\r\n      : TInjectedProps\r\n    : never\r\n\r\nexport interface ConnectOptions<\r\n  State = unknown,\r\n  TStateProps = {},\r\n  TOwnProps = {},\r\n  TMergedProps = {}\r\n> {\r\n  forwardRef?: boolean\r\n  context?: typeof ReactReduxContext\r\n  areStatesEqual?: (\r\n    nextState: State,\r\n    prevState: State,\r\n    nextOwnProps: TOwnProps,\r\n    prevOwnProps: TOwnProps\r\n  ) => boolean\r\n\r\n  areOwnPropsEqual?: (\r\n    nextOwnProps: TOwnProps,\r\n    prevOwnProps: TOwnProps\r\n  ) => boolean\r\n\r\n  areStatePropsEqual?: (\r\n    nextStateProps: TStateProps,\r\n    prevStateProps: TStateProps\r\n  ) => boolean\r\n  areMergedPropsEqual?: (\r\n    nextMergedProps: TMergedProps,\r\n    prevMergedProps: TMergedProps\r\n  ) => boolean\r\n}\r\n\r\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps\r\n * @param mapDispatchToProps\r\n * @param mergeProps\r\n * @param options\r\n */\r\nexport interface Connect<DefaultState = unknown> {\r\n  // tslint:disable:no-unnecessary-generics\r\n  (): InferableComponentEnhancer<DispatchProp>\r\n\r\n  /** mapState only */\r\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>\r\n  ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp, TOwnProps>\r\n\r\n  /** mapDispatch only (as a function) */\r\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\r\n\r\n  /** mapDispatch only (as an object) */\r\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState and mapDispatch (as a function)*/\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & TDispatchProps,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState and mapDispatch (nullish) */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: null | undefined\r\n  ): InferableComponentEnhancerWithProps<TStateProps, TOwnProps>\r\n\r\n  /** mapState and mapDispatch (as an object) */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mergeProps only */\r\n  <no_state = {}, no_dispatch = {}, TOwnProps = {}, TMergedProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: null | undefined,\r\n    mergeProps: MergeProps<undefined, DispatchProp, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n\r\n  /** mapState and mergeProps */\r\n  <\r\n    TStateProps = {},\r\n    no_dispatch = {},\r\n    TOwnProps = {},\r\n    TMergedProps = {},\r\n    State = DefaultState\r\n  >(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: null | undefined,\r\n    mergeProps: MergeProps<TStateProps, DispatchProp, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n\r\n  /** mapDispatch (as a object) and mergeProps */\r\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}, TMergedProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: MergeProps<undefined, TDispatchProps, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n\r\n  /** mapState and options */\r\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: null | undefined,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<State, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<DispatchProp & TStateProps, TOwnProps>\r\n\r\n  /** mapDispatch (as a function) and options */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<{}, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\r\n\r\n  /** mapDispatch (as an object) and options*/\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\r\n    mapStateToProps: null | undefined,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<{}, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState,  mapDispatch (as a function), and options */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<State, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & TDispatchProps,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState,  mapDispatch (as an object), and options */\r\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: null | undefined,\r\n    options: ConnectOptions<State, TStateProps, TOwnProps>\r\n  ): InferableComponentEnhancerWithProps<\r\n    TStateProps & ResolveThunks<TDispatchProps>,\r\n    TOwnProps\r\n  >\r\n\r\n  /** mapState, mapDispatch, mergeProps, and options */\r\n  <\r\n    TStateProps = {},\r\n    TDispatchProps = {},\r\n    TOwnProps = {},\r\n    TMergedProps = {},\r\n    State = DefaultState\r\n  >(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n    mergeProps: MergeProps<\r\n      TStateProps,\r\n      TDispatchProps,\r\n      TOwnProps,\r\n      TMergedProps\r\n    >,\r\n    options?: ConnectOptions<State, TStateProps, TOwnProps, TMergedProps>\r\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\r\n  // tslint:enable:no-unnecessary-generics\r\n}\r\n\r\nlet hasWarnedAboutDeprecatedPureOption = false\r\n\r\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\r\nfunction connect<\r\n  TStateProps = {},\r\n  TDispatchProps = {},\r\n  TOwnProps = {},\r\n  TMergedProps = {},\r\n  State = unknown\r\n>(\r\n  mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n  mapDispatchToProps?: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\r\n  {\r\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\r\n    // @ts-ignore\r\n    pure,\r\n    areStatesEqual = strictEqual,\r\n    areOwnPropsEqual = shallowEqual,\r\n    areStatePropsEqual = shallowEqual,\r\n    areMergedPropsEqual = shallowEqual,\r\n\r\n    // use React's forwardRef to expose a ref of the wrapped component\r\n    forwardRef = false,\r\n\r\n    // the context consumer to use\r\n    context = ReactReduxContext,\r\n  }: ConnectOptions<unknown, unknown, unknown, unknown> = {}\r\n): unknown {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\r\n      hasWarnedAboutDeprecatedPureOption = true\r\n      warning(\r\n        'The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component'\r\n      )\r\n    }\r\n  }\r\n\r\n  const Context = context\r\n\r\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps)\r\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps)\r\n  const initMergeProps = mergePropsFactory(mergeProps)\r\n\r\n  const shouldHandleStateChanges = Boolean(mapStateToProps)\r\n\r\n  const wrapWithConnect = <TProps,>(\r\n    WrappedComponent: ComponentType<TProps>\r\n  ) => {\r\n    type WrappedComponentProps = TProps &\r\n      ConnectPropsMaybeWithoutContext<TProps>\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const isValid = /*#__PURE__*/ isValidElementType(WrappedComponent)\r\n      if (!isValid)\r\n        throw new Error(\r\n          `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(\r\n            WrappedComponent\r\n          )}`\r\n        )\r\n    }\r\n\r\n    const wrappedComponentName =\r\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\r\n\r\n    const displayName = `Connect(${wrappedComponentName})`\r\n\r\n    const selectorFactoryOptions: SelectorFactoryOptions<\r\n      any,\r\n      any,\r\n      any,\r\n      any,\r\n      State\r\n    > = {\r\n      shouldHandleStateChanges,\r\n      displayName,\r\n      wrappedComponentName,\r\n      WrappedComponent,\r\n      // @ts-ignore\r\n      initMapStateToProps,\r\n      // @ts-ignore\r\n      initMapDispatchToProps,\r\n      initMergeProps,\r\n      areStatesEqual,\r\n      areStatePropsEqual,\r\n      areOwnPropsEqual,\r\n      areMergedPropsEqual,\r\n    }\r\n\r\n    function ConnectFunction<TOwnProps>(\r\n      props: InternalConnectProps & TOwnProps\r\n    ) {\r\n      const [propsContext, reactReduxForwardedRef, wrapperProps] =\r\n        React.useMemo(() => {\r\n          // Distinguish between actual \"data\" props that were passed to the wrapper component,\r\n          // and values needed to control behavior (forwarded refs, alternate context instances).\r\n          // To maintain the wrapperProps object reference, memoize this destructuring.\r\n          const { reactReduxForwardedRef, ...wrapperProps } = props\r\n          return [props.context, reactReduxForwardedRef, wrapperProps]\r\n        }, [props])\r\n\r\n      const ContextToUse: ReactReduxContextInstance = React.useMemo(() => {\r\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\r\n        // Memoize the check that determines which context instance we should use.\r\n        let ResultContext = Context\r\n        if (propsContext?.Consumer) {\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            const isValid = /*#__PURE__*/ isContextConsumer(\r\n              // @ts-ignore\r\n              <propsContext.Consumer />\r\n            )\r\n            if (!isValid) {\r\n              throw new Error(\r\n                'You must pass a valid React context consumer as `props.context`'\r\n              )\r\n            }\r\n            ResultContext = propsContext\r\n          }\r\n        }\r\n        return ResultContext\r\n      }, [propsContext, Context])\r\n\r\n      // Retrieve the store and ancestor subscription via context, if available\r\n      const contextValue = React.useContext(ContextToUse)\r\n\r\n      // The store _must_ exist as either a prop or in context.\r\n      // We'll check to see if it _looks_ like a Redux store first.\r\n      // This allows us to pass through a `store` prop that is just a plain value.\r\n      const didStoreComeFromProps =\r\n        Boolean(props.store) &&\r\n        Boolean(props.store!.getState) &&\r\n        Boolean(props.store!.dispatch)\r\n      const didStoreComeFromContext =\r\n        Boolean(contextValue) && Boolean(contextValue!.store)\r\n\r\n      if (\r\n        process.env.NODE_ENV !== 'production' &&\r\n        !didStoreComeFromProps &&\r\n        !didStoreComeFromContext\r\n      ) {\r\n        throw new Error(\r\n          `Could not find \"store\" in the context of ` +\r\n            `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\r\n            `or pass a custom React context provider to <Provider> and the corresponding ` +\r\n            `React context consumer to ${displayName} in connect options.`\r\n        )\r\n      }\r\n\r\n      // Based on the previous check, one of these must be true\r\n      const store: Store = didStoreComeFromProps\r\n        ? props.store!\r\n        : contextValue!.store\r\n\r\n      const getServerState = didStoreComeFromContext\r\n        ? contextValue!.getServerState\r\n        : store.getState\r\n\r\n      const childPropsSelector = React.useMemo(() => {\r\n        // The child props selector needs the store reference as an input.\r\n        // Re-create this selector whenever the store changes.\r\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions)\r\n      }, [store])\r\n\r\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\r\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY\r\n\r\n        // This Subscription's source should match where store came from: props vs. context. A component\r\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\r\n        const subscription = createSubscription(\r\n          store,\r\n          didStoreComeFromProps ? undefined : contextValue!.subscription\r\n        )\r\n\r\n        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\r\n        // the middle of the notification loop, where `subscription` will then be null. This can\r\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\r\n        // that have been unsubscribed in the  middle of the notification loop.\r\n        const notifyNestedSubs =\r\n          subscription.notifyNestedSubs.bind(subscription)\r\n\r\n        return [subscription, notifyNestedSubs]\r\n      }, [store, didStoreComeFromProps, contextValue])\r\n\r\n      // Determine what {store, subscription} value should be put into nested context, if necessary,\r\n      // and memoize that value to avoid unnecessary context updates.\r\n      const overriddenContextValue = React.useMemo(() => {\r\n        if (didStoreComeFromProps) {\r\n          // This component is directly subscribed to a store from props.\r\n          // We don't want descendants reading from this store - pass down whatever\r\n          // the existing context value is from the nearest connected ancestor.\r\n          return contextValue!\r\n        }\r\n\r\n        // Otherwise, put this component's subscription instance into context, so that\r\n        // connected descendants won't update until after this component is done\r\n        return {\r\n          ...contextValue,\r\n          subscription,\r\n        } as ReactReduxContextValue\r\n      }, [didStoreComeFromProps, contextValue, subscription])\r\n\r\n      // Set up refs to coordinate values between the subscription effect and the render logic\r\n      const lastChildProps = React.useRef<unknown>()\r\n      const lastWrapperProps = React.useRef(wrapperProps)\r\n      const childPropsFromStoreUpdate = React.useRef<unknown>()\r\n      const renderIsScheduled = React.useRef(false)\r\n      const isProcessingDispatch = React.useRef(false)\r\n      const isMounted = React.useRef(false)\r\n\r\n      const latestSubscriptionCallbackError = React.useRef<Error>()\r\n\r\n      useIsomorphicLayoutEffect(() => {\r\n        isMounted.current = true\r\n        return () => {\r\n          isMounted.current = false\r\n        }\r\n      }, [])\r\n\r\n      const actualChildPropsSelector = React.useMemo(() => {\r\n        const selector = () => {\r\n          // Tricky logic here:\r\n          // - This render may have been triggered by a Redux store update that produced new child props\r\n          // - However, we may have gotten new wrapper props after that\r\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\r\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\r\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\r\n          if (\r\n            childPropsFromStoreUpdate.current &&\r\n            wrapperProps === lastWrapperProps.current\r\n          ) {\r\n            return childPropsFromStoreUpdate.current\r\n          }\r\n\r\n          // TODO We're reading the store directly in render() here. Bad idea?\r\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\r\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\r\n          // to determine what the child props should be.\r\n          return childPropsSelector(store.getState(), wrapperProps)\r\n        }\r\n        return selector\r\n      }, [store, wrapperProps])\r\n\r\n      // We need this to execute synchronously every time we re-render. However, React warns\r\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\r\n      // just useEffect instead to avoid the warning, since neither will run anyway.\r\n\r\n      const subscribeForReact = React.useMemo(() => {\r\n        const subscribe = (reactListener: () => void) => {\r\n          if (!subscription) {\r\n            return () => {}\r\n          }\r\n\r\n          return subscribeUpdates(\r\n            shouldHandleStateChanges,\r\n            store,\r\n            subscription,\r\n            // @ts-ignore\r\n            childPropsSelector,\r\n            lastWrapperProps,\r\n            lastChildProps,\r\n            renderIsScheduled,\r\n            isMounted,\r\n            childPropsFromStoreUpdate,\r\n            notifyNestedSubs,\r\n            reactListener\r\n          )\r\n        }\r\n\r\n        return subscribe\r\n      }, [subscription])\r\n\r\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\r\n        lastWrapperProps,\r\n        lastChildProps,\r\n        renderIsScheduled,\r\n        wrapperProps,\r\n        childPropsFromStoreUpdate,\r\n        notifyNestedSubs,\r\n      ])\r\n\r\n      let actualChildProps: Record<string, unknown>\r\n\r\n      try {\r\n        actualChildProps = useSyncExternalStore(\r\n          // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\r\n          subscribeForReact,\r\n          // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\r\n          // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\r\n          actualChildPropsSelector,\r\n          getServerState\r\n            ? () => childPropsSelector(getServerState(), wrapperProps)\r\n            : actualChildPropsSelector\r\n        )\r\n      } catch (err) {\r\n        if (latestSubscriptionCallbackError.current) {\r\n          ;(\r\n            err as Error\r\n          ).message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\r\n        }\r\n\r\n        throw err\r\n      }\r\n\r\n      useIsomorphicLayoutEffect(() => {\r\n        latestSubscriptionCallbackError.current = undefined\r\n        childPropsFromStoreUpdate.current = undefined\r\n        lastChildProps.current = actualChildProps\r\n      })\r\n\r\n      // Now that all that's done, we can finally try to actually render the child component.\r\n      // We memoize the elements for the rendered child component as an optimization.\r\n      const renderedWrappedComponent = React.useMemo(() => {\r\n        return (\r\n          // @ts-ignore\r\n          <WrappedComponent\r\n            {...actualChildProps}\r\n            ref={reactReduxForwardedRef}\r\n          />\r\n        )\r\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps])\r\n\r\n      // If React sees the exact same element reference as last time, it bails out of re-rendering\r\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\r\n      const renderedChild = React.useMemo(() => {\r\n        if (shouldHandleStateChanges) {\r\n          // If this component is subscribed to store updates, we need to pass its own\r\n          // subscription instance down to our descendants. That means rendering the same\r\n          // Context instance, and putting a different value into the context.\r\n          return (\r\n            <ContextToUse.Provider value={overriddenContextValue}>\r\n              {renderedWrappedComponent}\r\n            </ContextToUse.Provider>\r\n          )\r\n        }\r\n\r\n        return renderedWrappedComponent\r\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\r\n\r\n      return renderedChild\r\n    }\r\n\r\n    const _Connect = React.memo(ConnectFunction)\r\n\r\n    type ConnectedWrapperComponent = typeof _Connect & {\r\n      WrappedComponent: typeof WrappedComponent\r\n    }\r\n\r\n    // Add a hacky cast to get the right output type\r\n    const Connect = _Connect as unknown as ConnectedComponent<\r\n      typeof WrappedComponent,\r\n      WrappedComponentProps\r\n    >\r\n    Connect.WrappedComponent = WrappedComponent\r\n    Connect.displayName = ConnectFunction.displayName = displayName\r\n\r\n    if (forwardRef) {\r\n      const _forwarded = React.forwardRef(function forwardConnectRef(\r\n        props,\r\n        ref\r\n      ) {\r\n        // @ts-ignore\r\n        return <Connect {...props} reactReduxForwardedRef={ref} />\r\n      })\r\n\r\n      const forwarded = _forwarded as ConnectedWrapperComponent\r\n      forwarded.displayName = displayName\r\n      forwarded.WrappedComponent = WrappedComponent\r\n      return /*#__PURE__*/ hoistStatics(forwarded, WrappedComponent)\r\n    }\r\n\r\n    return /*#__PURE__*/ hoistStatics(Connect, WrappedComponent)\r\n  }\r\n\r\n  return wrapWithConnect\r\n}\r\n\r\nexport default connect as Connect\r\n","import type { Context, ReactNode } from 'react'\r\nimport { React } from '../utils/react'\r\nimport type { Action, Store, UnknownAction } from 'redux'\r\nimport type { DevModeCheckFrequency } from '../hooks/useSelector'\r\nimport { createSubscription } from '../utils/Subscription'\r\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\r\nimport type { ReactReduxContextValue } from './Context'\r\nimport { ReactReduxContext } from './Context'\r\n\r\nexport interface ProviderProps<\r\n  A extends Action<string> = UnknownAction,\r\n  S = unknown\r\n> {\r\n  /**\r\n   * The single Redux store in your application.\r\n   */\r\n  store: Store<S, A>\r\n\r\n  /**\r\n   * An optional server state snapshot. Will be used during initial hydration render if available, to ensure that the UI output is consistent with the HTML generated on the server.\r\n   */\r\n  serverState?: S\r\n\r\n  /**\r\n   * Optional context to be used internally in react-redux. Use React.createContext() to create a context to be used.\r\n   * If this is used, you'll need to customize `connect` by supplying the same context provided to the Provider.\r\n   * Set the initial value to null, and the hooks will error\r\n   * if this is not overwritten by Provider.\r\n   */\r\n  context?: Context<ReactReduxContextValue<S, A> | null>\r\n\r\n  /**\r\n   * Determines the frequency of stability checks for all selectors.\r\n   * This setting overrides the global configuration for\r\n   * the `useSelector` stability check, allowing you to specify how often\r\n   * these checks should occur in development mode.\r\n   *\r\n   * @since 8.1.0\r\n   */\r\n  stabilityCheck?: DevModeCheckFrequency\r\n\r\n  /**\r\n   * Determines the frequency of identity function checks for all selectors.\r\n   * This setting overrides the global configuration for\r\n   * the `useSelector` identity function check, allowing you to specify how often\r\n   * these checks should occur in development mode.\r\n   *\r\n   * **Note**: Previously referred to as `noopCheck`.\r\n   *\r\n   * @since 9.0.0\r\n   */\r\n  identityFunctionCheck?: DevModeCheckFrequency\r\n\r\n  children: ReactNode\r\n}\r\n\r\nfunction Provider<A extends Action<string> = UnknownAction, S = unknown>({\r\n  store,\r\n  context,\r\n  children,\r\n  serverState,\r\n  stabilityCheck = 'once',\r\n  identityFunctionCheck = 'once',\r\n}: ProviderProps<A, S>) {\r\n  const contextValue = React.useMemo(() => {\r\n    const subscription = createSubscription(store)\r\n    return {\r\n      store,\r\n      subscription,\r\n      getServerState: serverState ? () => serverState : undefined,\r\n      stabilityCheck,\r\n      identityFunctionCheck,\r\n    }\r\n  }, [store, serverState, stabilityCheck, identityFunctionCheck])\r\n\r\n  const previousState = React.useMemo(() => store.getState(), [store])\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    const { subscription } = contextValue\r\n    subscription.onStateChange = subscription.notifyNestedSubs\r\n    subscription.trySubscribe()\r\n\r\n    if (previousState !== store.getState()) {\r\n      subscription.notifyNestedSubs()\r\n    }\r\n    return () => {\r\n      subscription.tryUnsubscribe()\r\n      subscription.onStateChange = undefined\r\n    }\r\n  }, [contextValue, previousState])\r\n\r\n  const Context = context || ReactReduxContext\r\n\r\n  // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype\r\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\r\n}\r\n\r\nexport default Provider\r\n","import type { Context } from 'react'\r\nimport type { Action as BasicAction, UnknownAction, Store } from 'redux'\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport {\r\n  useReduxContext as useDefaultReduxContext,\r\n  createReduxContextHook,\r\n} from './useReduxContext'\r\n\r\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\r\nexport function createStoreHook<\r\n  S = unknown,\r\n  A extends BasicAction = UnknownAction\r\n  // @ts-ignore\r\n>(context?: Context<ReactReduxContextValue<S, A> | null> = ReactReduxContext) {\r\n  const useReduxContext =\r\n    // @ts-ignore\r\n    context === ReactReduxContext\r\n      ? useDefaultReduxContext\r\n      : // @ts-ignore\r\n        createReduxContextHook(context)\r\n  return function useStore<\r\n    State = S,\r\n    Action2 extends BasicAction = A\r\n    // @ts-ignore\r\n  >() {\r\n    const { store } = useReduxContext()\r\n    // @ts-ignore\r\n    return store as Store<State, Action2>\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\r\nexport const useStore = /*#__PURE__*/ createStoreHook()\r\n","import type { Action, Dispatch, UnknownAction } from 'redux'\r\nimport type { Context } from 'react'\r\n\r\nimport type { ReactReduxContextValue } from '../components/Context'\r\nimport { ReactReduxContext } from '../components/Context'\r\nimport { useStore as useDefaultStore, createStoreHook } from './useStore'\r\n\r\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\r\nexport function createDispatchHook<\r\n  S = unknown,\r\n  A extends Action<string> = UnknownAction\r\n  // @ts-ignore\r\n>(context?: Context<ReactReduxContextValue<S, A> | null> = ReactReduxContext) {\r\n  const useStore =\r\n    // @ts-ignore\r\n    context === ReactReduxContext ? useDefaultStore : createStoreHook(context)\r\n\r\n  return function useDispatch<\r\n    AppDispatch extends Dispatch<A> = Dispatch<A>\r\n  >(): AppDispatch {\r\n    const store = useStore()\r\n    // @ts-ignore\r\n    return store.dispatch\r\n  }\r\n}\r\n\r\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\r\nexport const useDispatch = /*#__PURE__*/ createDispatchHook()\r\n","import Provider from './components/Provider'\r\nimport type { ProviderProps } from './components/Provider'\r\nimport connect from './components/connect'\r\nimport type {\r\n  Connect,\r\n  ConnectProps,\r\n  ConnectedProps,\r\n} from './components/connect'\r\nimport type {\r\n  SelectorFactory,\r\n  Selector,\r\n  MapStateToProps,\r\n  MapStateToPropsFactory,\r\n  MapStateToPropsParam,\r\n  MapDispatchToPropsFunction,\r\n  MapDispatchToProps,\r\n  MapDispatchToPropsFactory,\r\n  MapDispatchToPropsParam,\r\n  MapDispatchToPropsNonObject,\r\n  MergeProps,\r\n} from './connect/selectorFactory'\r\nimport { ReactReduxContext } from './components/Context'\r\nimport type { ReactReduxContextValue } from './components/Context'\r\n\r\nimport { useDispatch, createDispatchHook } from './hooks/useDispatch'\r\nimport { useSelector, createSelectorHook } from './hooks/useSelector'\r\nimport { useStore, createStoreHook } from './hooks/useStore'\r\n\r\nimport shallowEqual from './utils/shallowEqual'\r\nimport type { Subscription } from './utils/Subscription'\r\nimport { defaultNoopBatch } from './utils/batch'\r\n\r\nexport * from './types'\r\nexport type {\r\n  ProviderProps,\r\n  SelectorFactory,\r\n  Selector,\r\n  MapStateToProps,\r\n  MapStateToPropsFactory,\r\n  MapStateToPropsParam,\r\n  Connect,\r\n  ConnectProps,\r\n  ConnectedProps,\r\n  MapDispatchToPropsFunction,\r\n  MapDispatchToProps,\r\n  MapDispatchToPropsFactory,\r\n  MapDispatchToPropsParam,\r\n  MapDispatchToPropsNonObject,\r\n  MergeProps,\r\n  ReactReduxContextValue,\r\n  Subscription,\r\n}\r\n\r\n/**\r\n * @deprecated As of React 18, batching is enabled by default for ReactDOM and React Native.\r\n * This is now a no-op that immediately runs the callback.\r\n */\r\nconst batch = defaultNoopBatch\r\n\r\nexport {\r\n  Provider,\r\n  ReactReduxContext,\r\n  connect,\r\n  useDispatch,\r\n  createDispatchHook,\r\n  useSelector,\r\n  createSelectorHook,\r\n  useStore,\r\n  createStoreHook,\r\n  shallowEqual,\r\n  batch,\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}