{"ast":null,"code":"'use client';\n\nimport { Button } from \"./chunk-UVUR7MCU.mjs\";\n\n// src/icon-button.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar IconButton = forwardRef((props, ref) => {\n  const {\n    icon,\n    children,\n    isRound,\n    \"aria-label\": ariaLabel,\n    ...rest\n  } = props;\n  const element = icon || children;\n  const _children = isValidElement(element) ? cloneElement(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n  return /* @__PURE__ */jsx(Button, {\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : void 0,\n    ref,\n    \"aria-label\": ariaLabel,\n    ...rest,\n    children: _children\n  });\n});\nIconButton.displayName = \"IconButton\";\nexport { IconButton };","map":{"version":3,"names":["forwardRef","cloneElement","isValidElement","jsx","IconButton","props","ref","icon","children","isRound","ariaLabel","rest","element","_children","focusable","Button","padding","borderRadius","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\button\\src\\icon-button.tsx"],"sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n"],"mappings":";;;;;AAAA,SAASA,UAAA,QAAkB;AAC3B,SAASC,YAAA,EAAcC,cAAA,QAAsB;AAmDvC,SAAAC,GAAA;AAhBC,IAAMC,UAAA,GAAaJ,UAAA,CACxB,CAACK,KAAA,EAAOC,GAAA,KAAQ;EACd,MAAM;IAAEC,IAAA;IAAMC,QAAA;IAAUC,OAAA;IAAS,cAAcC,SAAA;IAAW,GAAGC;EAAK,IAAIN,KAAA;EAKtE,MAAMO,OAAA,GAAUL,IAAA,IAAQC,QAAA;EACxB,MAAMK,SAAA,GAAYX,cAAA,CAAeU,OAAO,IACpCX,YAAA,CAAaW,OAAA,EAAgB;IAC3B,eAAe;IACfE,SAAA,EAAW;EACb,CAAC,IACD;EAEJ,OACE,eAAAX,GAAA,CAACY,MAAA;IACCC,OAAA,EAAQ;IACRC,YAAA,EAAcR,OAAA,GAAU,SAAS;IACjCH,GAAA;IACA,cAAYI,SAAA;IACX,GAAGC,IAAA;IAEHH,QAAA,EAAAK;EAAA,CACH;AAEJ,CACF;AAEAT,UAAA,CAAWc,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}