{"ast":null,"code":"'use client';\n\nimport { ColorModeContext } from \"./chunk-UQDW7KKV.mjs\";\nimport { getColorModeUtils } from \"./chunk-X7ZBZ4KW.mjs\";\nimport { localStorageManager } from \"./chunk-44OWBZ77.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = () => {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"names":["useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","jsx","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","localStorageManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","getColorModeUtils","preventTransition","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","ColorModeContext","Provider","displayName","DarkMode","LightMode"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\color-mode\\src\\color-mode-provider.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}