{"ast":null,"code":"'use client';\n\nimport { useAttributeObserver } from \"./chunk-2PMVP26D.mjs\";\nimport { useSpinner } from \"./chunk-366L2ZDN.mjs\";\n\n// src/use-number-input.ts\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nvar FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\nfunction isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\nfunction isValidNumericKeyboardEvent(event, isValid) {\n  if (event.key == null) return true;\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n  const isSingleCharacterKey = event.key.length === 1;\n  if (!isSingleCharacterKey || isModifierKey) return true;\n  return isValid(event.key);\n}\nfunction useNumberInput(props = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props;\n  const onFocus = useCallbackRef(onFocusProp);\n  const onBlur = useCallbackRef(onBlurProp);\n  const onInvalid = useCallbackRef(onInvalidProp);\n  const isValidCharacter = useCallbackRef(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  const counter = useCounter(props);\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  const [isFocused, setFocused] = useState(false);\n  const isInteractive = !(isReadOnly || isDisabled);\n  const inputRef = useRef(null);\n  const inputSelectionRef = useRef(null);\n  const incrementButtonRef = useRef(null);\n  const decrementButtonRef = useRef(null);\n  const sanitize = useCallback(value => value.split(\"\").filter(isValidCharacter).join(\"\"), [isValidCharacter]);\n  const parse = useCallback(value => {\n    var _a;\n    return (_a = parseValue == null ? void 0 : parseValue(value)) != null ? _a : value;\n  }, [parseValue]);\n  const format = useCallback(value => {\n    var _a;\n    return ((_a = formatValue == null ? void 0 : formatValue(value)) != null ? _a : value).toString();\n  }, [formatValue]);\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    } else if (counter.valueAsNumber < min) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.value != counter.value;\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value);\n      counter.setValue(sanitize(parsedInput));\n    }\n  }, [parse, sanitize]);\n  const increment = useCallback((step = stepProp) => {\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  const decrement = useCallback((step = stepProp) => {\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  const spinner = useSpinner(increment, decrement);\n  useAttributeObserver(incrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  useAttributeObserver(decrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  const onChange = useCallback(event => {\n    const evt = event.nativeEvent;\n    if (evt.isComposing) return;\n    const parsedInput = parse(event.currentTarget.value);\n    updateFn(sanitize(parsedInput));\n    inputSelectionRef.current = {\n      start: event.currentTarget.selectionStart,\n      end: event.currentTarget.selectionEnd\n    };\n  }, [updateFn, sanitize, parse]);\n  const _onFocus = useCallback(event => {\n    var _a, _b, _c;\n    onFocus == null ? void 0 : onFocus(event);\n    if (!inputSelectionRef.current) return;\n    event.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = event.currentTarget.value) == null ? void 0 : _a.length;\n    event.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : event.currentTarget.selectionStart;\n  }, [onFocus]);\n  const onKeyDown = useCallback(event => {\n    if (event.nativeEvent.isComposing) return;\n    if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n      event.preventDefault();\n    }\n    const stepFactor = getStepFactor(event) * stepProp;\n    const eventKey = event.key;\n    const keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [isValidCharacter, stepProp, increment, decrement, updateFn, min, max]);\n  const getStepFactor = event => {\n    let ratio = 1;\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n    return ratio;\n  };\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n    if (text != null) return text;\n    const defaultText = counter.value.toString();\n    return !defaultText ? void 0 : defaultText;\n  }, [counter.value, getAriaValueText]);\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value;\n    if (counter.value === \"\") return;\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString());\n    if (valueStartsWithE) {\n      counter.setValue(\"\");\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min;\n      }\n      if (counter.valueAsNumber > max) {\n        next = max;\n      }\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  const onInputBlur = useCallback(() => {\n    setFocused(false);\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        var _a;\n        (_a = inputRef.current) == null ? void 0 : _a.focus();\n      });\n    }\n  }, [focusInputOnChange]);\n  const spinUp = useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  const spinDown = useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  useEventListener(() => inputRef.current, \"wheel\", event => {\n    var _a, _b;\n    const doc = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n    const isInputFocused = doc.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    const stepFactor = getStepFactor(event) * stepProp;\n    const direction = Math.sign(event.deltaY);\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, {\n    passive: false\n  });\n  const getIncrementButtonProps = useCallback((props2 = {}, ref = null) => {\n    const disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, incrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinUp(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    };\n  }, [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  const getDecrementButtonProps = useCallback((props2 = {}, ref = null) => {\n    const disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, decrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinDown(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    };\n  }, [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  const getInputProps = useCallback((props2 = {}, ref = null) => {\n    var _a, _b, _c, _d;\n    return {\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props2,\n      readOnly: (_a = props2.readOnly) != null ? _a : isReadOnly,\n      \"aria-readonly\": (_b = props2.readOnly) != null ? _b : isReadOnly,\n      \"aria-required\": (_c = props2.required) != null ? _c : isRequired,\n      required: (_d = props2.required) != null ? _d : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: format(counter.value),\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? void 0 : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, _onFocus, () => setFocused(true)),\n      onBlur: callAllHandlers(props2.onBlur, onBlur, onInputBlur)\n    };\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, format, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, _onFocus, onBlur, onInputBlur]);\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}\nexport { useNumberInput };","map":{"version":3,"names":["useCounter","useEventListener","useUpdateEffect","useSafeLayoutEffect","useCallbackRef","mergeRefs","ariaAttr","callAllHandlers","useCallback","useMemo","useRef","useState","FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","isValid","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","step","stepProp","isReadOnly","isDisabled","isRequired","isInvalid","pattern","inputMode","allowMouseWheel","id","onChange","_","precision","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onFocusProp","onBlur","onBlurProp","onInvalid","onInvalidProp","getAriaValueText","getAriaValueTextProp","isValidCharacter","isValidCharacterProp","format","formatValue","parse","parseValue","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","isInteractive","inputRef","inputSelectionRef","incrementButtonRef","decrementButtonRef","sanitize","value","split","filter","join","_a","toString","valueAsNumber","current","notInSync","parsedInput","setValue","spinner","useSpinner","useAttributeObserver","stop","isSpinning","evt","nativeEvent","isComposing","currentTarget","start","selectionStart","end","selectionEnd","_onFocus","_b","_c","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","shiftKey","ariaValueText","text","defaultText","validateAndClamp","next","valueStartsWithE","cast","onInputBlur","focusInput","requestAnimationFrame","focus","spinUp","up","spinDown","down","doc","ownerDocument","document","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","props2","ref","disabled","isAtMax","role","tabIndex","onPointerDown","button","onPointerLeave","onPointerUp","getDecrementButtonProps","isAtMin","getInputProps","_d","type","readOnly","required","isNaN","isOutOfRange","autoComplete","autoCorrect"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\number-input\\src\\use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useMemo, useRef, useState } from \"react\"\nimport { useAttributeObserver } from \"./use-attr-observer\"\nimport { useSpinner } from \"./use-spinner\"\n\nconst FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nfunction isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\nfunction isValidNumericKeyboardEvent(\n  event: React.KeyboardEvent,\n  isValid: (key: string) => boolean,\n) {\n  if (event.key == null) return true\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n  const isSingleCharacterKey = event.key.length === 1\n  if (!isSingleCharacterKey || isModifierKey) return true\n  return isValid(event.key)\n}\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: string | number): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * Whether the input should be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * Whether the input is required\n   */\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  onInvalid?: (\n    message: ValidityState,\n    value: string,\n    valueAsNumber: number,\n  ) => void\n  /**\n   * Whether the pressed key should be allowed in the input.\n   * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/\n   */\n  isValidCharacter?: (value: string) => boolean\n  /**\n   * If using a custom display format, this converts the custom format to a format `parseFloat` understands.\n   */\n  parse?: (value: string) => string\n  /**\n   * If using a custom display format, this converts the default format to the custom format.\n   */\n  format?: (value: string | number) => string | number\n}\n\ntype ValidityState = \"rangeUnderflow\" | \"rangeOverflow\"\ntype InputSelection = { start: number | null; end: number | null }\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props\n\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n  const onInvalid = useCallbackRef(onInvalidProp)\n  const isValidCharacter = useCallbackRef(\n    isValidCharacterProp ?? isFloatingPointNumericCharacter,\n  )\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const inputSelectionRef = useRef<InputSelection | null>(null)\n  const incrementButtonRef = useRef<HTMLButtonElement>(null)\n  const decrementButtonRef = useRef<HTMLButtonElement>(null)\n\n  const sanitize = useCallback(\n    (value: string) => value.split(\"\").filter(isValidCharacter).join(\"\"),\n    [isValidCharacter],\n  )\n\n  const parse = useCallback(\n    (value: string) => parseValue?.(value) ?? value,\n    [parseValue],\n  )\n\n  const format = useCallback(\n    (value: string | number) => (formatValue?.(value) ?? value).toString(),\n    [formatValue],\n  )\n\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    } else if (counter.valueAsNumber < min) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid])\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value)\n      counter.setValue(sanitize(parsedInput))\n    }\n  }, [parse, sanitize])\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  useAttributeObserver(\n    incrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n  useAttributeObserver(\n    decrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const evt = event.nativeEvent as InputEvent\n      if (evt.isComposing) return\n      const parsedInput = parse(event.currentTarget.value)\n      updateFn(sanitize(parsedInput))\n      inputSelectionRef.current = {\n        start: event.currentTarget.selectionStart,\n        end: event.currentTarget.selectionEnd,\n      }\n    },\n    [updateFn, sanitize, parse],\n  )\n\n  const _onFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocus?.(event)\n      if (!inputSelectionRef.current) return\n      /**\n       * restore selection if custom format string replacement moved it to the end\n       */\n      event.target.selectionStart =\n        inputSelectionRef.current.start ?? event.currentTarget.value?.length\n      event.currentTarget.selectionEnd =\n        inputSelectionRef.current.end ?? event.currentTarget.selectionStart\n    },\n    [onFocus],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.nativeEvent.isComposing) return\n\n      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [isValidCharacter, stepProp, increment, decrement, updateFn, min, max],\n  )\n\n  const getStepFactor = <\n    Event extends React.KeyboardEvent | React.WheelEvent | WheelEvent,\n  >(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText?.(counter.value)\n    if (text != null) return text\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueText])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as string | number\n    if (counter.value === \"\") return\n\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString())\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\")\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min\n      }\n      if (counter.valueAsNumber > max) {\n        next = max\n      }\n\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onInputBlur = useCallback(() => {\n    setFocused(false)\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        inputRef.current?.focus()\n      })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  useEventListener(\n    () => inputRef.current,\n    \"wheel\",\n    (event: WheelEvent) => {\n      const doc = inputRef.current?.ownerDocument ?? document\n      const isInputFocused = doc.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref: mergeRefs(ref, incrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinUp(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref: mergeRefs(ref, decrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinDown(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled],\n  )\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => ({\n        name,\n        inputMode,\n        type: \"text\",\n        pattern,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-describedby\": ariaDescBy,\n        id,\n        disabled: isDisabled,\n        ...props,\n        readOnly: props.readOnly ?? isReadOnly,\n        \"aria-readonly\": props.readOnly ?? isReadOnly,\n        \"aria-required\": props.required ?? isRequired,\n        required: props.required ?? isRequired,\n        ref: mergeRefs(inputRef, ref),\n        value: format(counter.value),\n        role: \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, _onFocus, () =>\n          setFocused(true),\n        ),\n        onBlur: callAllHandlers(props.onBlur, onBlur, onInputBlur),\n      }),\n      [\n        name,\n        inputMode,\n        pattern,\n        ariaLabelledBy,\n        ariaLabel,\n        format,\n        ariaDescBy,\n        id,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        counter.value,\n        counter.valueAsNumber,\n        counter.isOutOfRange,\n        min,\n        max,\n        ariaValueText,\n        onChange,\n        onKeyDown,\n        _onFocus,\n        onBlur,\n        onInputBlur,\n      ],\n    )\n\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"mappings":";;;;;;AAAA,SAASA,UAAA,QAAmC;AAC5C,SAASC,gBAAA,QAAwB;AACjC,SAASC,eAAA,QAAuB;AAChC,SAASC,mBAAA,QAA2B;AACpC,SAASC,cAAA,QAAsB;AAC/B,SAASC,SAAA,QAAiB;AAC1B,SAASC,QAAA,EAAUC,eAAA,QAAuB;AAE1C,SAASC,WAAA,EAAaC,OAAA,EAASC,MAAA,EAAQC,QAAA,QAAgB;AAIvD,IAAMC,oBAAA,GAAuB;AAM7B,SAASC,gCAAgCC,SAAA,EAAmB;EAC1D,OAAOF,oBAAA,CAAqBG,IAAA,CAAKD,SAAS;AAC5C;AAEA,SAASE,4BACPC,KAAA,EACAC,OAAA,EACA;EACA,IAAID,KAAA,CAAME,GAAA,IAAO,MAAM,OAAO;EAC9B,MAAMC,aAAA,GAAgBH,KAAA,CAAMI,OAAA,IAAWJ,KAAA,CAAMK,MAAA,IAAUL,KAAA,CAAMM,OAAA;EAC7D,MAAMC,oBAAA,GAAuBP,KAAA,CAAME,GAAA,CAAIM,MAAA,KAAW;EAClD,IAAI,CAACD,oBAAA,IAAwBJ,aAAA,EAAe,OAAO;EACnD,OAAOF,OAAA,CAAQD,KAAA,CAAME,GAAG;AAC1B;AA2GO,SAASO,eAAeC,KAAA,GAA6B,CAAC,GAAG;EAC9D,MAAM;IACJC,kBAAA,GAAqB;IACrBC,gBAAA,GAAmB;IACnBC,eAAA,GAAkB;IAClBC,GAAA,GAAMC,MAAA,CAAOC,gBAAA;IACbC,GAAA,GAAMF,MAAA,CAAOG,gBAAA;IACbC,IAAA,EAAMC,QAAA,GAAW;IACjBC,UAAA;IACAC,UAAA;IACAC,UAAA;IACAC,SAAA;IACAC,OAAA,GAAU;IACVC,SAAA,GAAY;IACZC,eAAA;IACAC,EAAA;IACAC,QAAA,EAAUC,CAAA;IACVC,SAAA;IACAC,IAAA;IACA,oBAAoBC,UAAA;IACpB,cAAcC,SAAA;IACd,mBAAmBC,cAAA;IACnBC,OAAA,EAASC,WAAA;IACTC,MAAA,EAAQC,UAAA;IACRC,SAAA,EAAWC,aAAA;IACXC,gBAAA,EAAkBC,oBAAA;IAClBC,gBAAA,EAAkBC,oBAAA;IAClBC,MAAA,EAAQC,WAAA;IACRC,KAAA,EAAOC,UAAA;IACP,GAAGC;EACL,IAAIxC,KAAA;EAEJ,MAAM0B,OAAA,GAAUjD,cAAA,CAAekD,WAAW;EAC1C,MAAMC,MAAA,GAASnD,cAAA,CAAeoD,UAAU;EACxC,MAAMC,SAAA,GAAYrD,cAAA,CAAesD,aAAa;EAC9C,MAAMG,gBAAA,GAAmBzD,cAAA,CACvB0D,oBAAA,WAAAA,oBAAA,GAAwBjD,+BAC1B;EACA,MAAM8C,gBAAA,GAAmBvD,cAAA,CAAewD,oBAAoB;EAO5D,MAAMQ,OAAA,GAAUpE,UAAA,CAAW2B,KAAK;EAEhC,MAAM;IACJ0C,MAAA,EAAQC,QAAA;IACRC,SAAA,EAAWC,WAAA;IACXC,SAAA,EAAWC;EACb,IAAIN,OAAA;EAOJ,MAAM,CAACO,SAAA,EAAWC,UAAU,IAAIjE,QAAA,CAAS,KAAK;EAC9C,MAAMkE,aAAA,GAAgB,EAAEvC,UAAA,IAAcC,UAAA;EAEtC,MAAMuC,QAAA,GAAWpE,MAAA,CAAyB,IAAI;EAC9C,MAAMqE,iBAAA,GAAoBrE,MAAA,CAA8B,IAAI;EAC5D,MAAMsE,kBAAA,GAAqBtE,MAAA,CAA0B,IAAI;EACzD,MAAMuE,kBAAA,GAAqBvE,MAAA,CAA0B,IAAI;EAEzD,MAAMwE,QAAA,GAAW1E,WAAA,CACd2E,KAAA,IAAkBA,KAAA,CAAMC,KAAA,CAAM,EAAE,EAAEC,MAAA,CAAOxB,gBAAgB,EAAEyB,IAAA,CAAK,EAAE,GACnE,CAACzB,gBAAgB,CACnB;EAEA,MAAMI,KAAA,GAAQzD,WAAA,CACX2E,KAAA,IAAe;IAlNpB,IAAAI,EAAA;IAkNuB,QAAAA,EAAA,GAAArB,UAAA,oBAAAA,UAAA,CAAaiB,KAAA,MAAb,OAAAI,EAAA,GAAuBJ,KAAA;EAAA,GAC1C,CAACjB,UAAU,CACb;EAEA,MAAMH,MAAA,GAASvD,WAAA,CACZ2E,KAAA,IAAwB;IAvN7B,IAAAI,EAAA;IAuNiC,SAAAA,EAAA,GAAAvB,WAAA,oBAAAA,WAAA,CAAcmB,KAAA,MAAd,OAAAI,EAAA,GAAwBJ,KAAA,EAAOK,QAAA,CAAS;EAAA,GACrE,CAACxB,WAAW,CACd;EAEA9D,eAAA,CAAgB,MAAM;IACpB,IAAIkE,OAAA,CAAQqB,aAAA,GAAgBvD,GAAA,EAAK;MAC/BuB,SAAA,oBAAAA,SAAA,CAAY,iBAAiBM,MAAA,CAAOK,OAAA,CAAQe,KAAK,GAAGf,OAAA,CAAQqB,aAAA;IAC9D,WAAWrB,OAAA,CAAQqB,aAAA,GAAgB1D,GAAA,EAAK;MACtC0B,SAAA,oBAAAA,SAAA,CAAY,iBAAiBM,MAAA,CAAOK,OAAA,CAAQe,KAAK,GAAGf,OAAA,CAAQqB,aAAA;IAC9D;EACF,GAAG,CAACrB,OAAA,CAAQqB,aAAA,EAAerB,OAAA,CAAQe,KAAA,EAAOpB,MAAA,EAAQN,SAAS,CAAC;EAK5DtD,mBAAA,CAAoB,MAAM;IACxB,IAAI,CAAC2E,QAAA,CAASY,OAAA,EAAS;IACvB,MAAMC,SAAA,GAAYb,QAAA,CAASY,OAAA,CAAQP,KAAA,IAASf,OAAA,CAAQe,KAAA;IACpD,IAAIQ,SAAA,EAAW;MACb,MAAMC,WAAA,GAAc3B,KAAA,CAAMa,QAAA,CAASY,OAAA,CAAQP,KAAK;MAChDf,OAAA,CAAQyB,QAAA,CAASX,QAAA,CAASU,WAAW,CAAC;IACxC;EACF,GAAG,CAAC3B,KAAA,EAAOiB,QAAQ,CAAC;EAEpB,MAAMX,SAAA,GAAY/D,WAAA,CAChB,CAAC4B,IAAA,GAAOC,QAAA,KAAa;IACnB,IAAIwC,aAAA,EAAe;MACjBL,WAAA,CAAYpC,IAAI;IAClB;EACF,GACA,CAACoC,WAAA,EAAaK,aAAA,EAAexC,QAAQ,CACvC;EAEA,MAAMoC,SAAA,GAAYjE,WAAA,CAChB,CAAC4B,IAAA,GAAOC,QAAA,KAAa;IACnB,IAAIwC,aAAA,EAAe;MACjBH,WAAA,CAAYtC,IAAI;IAClB;EACF,GACA,CAACsC,WAAA,EAAaG,aAAA,EAAexC,QAAQ,CACvC;EAQA,MAAMyD,OAAA,GAAUC,UAAA,CAAWxB,SAAA,EAAWE,SAAS;EAE/CuB,oBAAA,CACEhB,kBAAA,EACA,YACAc,OAAA,CAAQG,IAAA,EACRH,OAAA,CAAQI,UACV;EACAF,oBAAA,CACEf,kBAAA,EACA,YACAa,OAAA,CAAQG,IAAA,EACRH,OAAA,CAAQI,UACV;EAMA,MAAMpD,QAAA,GAAWtC,WAAA,CACdS,KAAA,IAA+C;IAC9C,MAAMkF,GAAA,GAAMlF,KAAA,CAAMmF,WAAA;IAClB,IAAID,GAAA,CAAIE,WAAA,EAAa;IACrB,MAAMT,WAAA,GAAc3B,KAAA,CAAMhD,KAAA,CAAMqF,aAAA,CAAcnB,KAAK;IACnDb,QAAA,CAASY,QAAA,CAASU,WAAW,CAAC;IAC9Bb,iBAAA,CAAkBW,OAAA,GAAU;MAC1Ba,KAAA,EAAOtF,KAAA,CAAMqF,aAAA,CAAcE,cAAA;MAC3BC,GAAA,EAAKxF,KAAA,CAAMqF,aAAA,CAAcI;IAC3B;EACF,GACA,CAACpC,QAAA,EAAUY,QAAA,EAAUjB,KAAK,CAC5B;EAEA,MAAM0C,QAAA,GAAWnG,WAAA,CACdS,KAAA,IAA8C;IAzSnD,IAAAsE,EAAA,EAAAqB,EAAA,EAAAC,EAAA;IA0SMxD,OAAA,oBAAAA,OAAA,CAAUpC,KAAA;IACV,IAAI,CAAC8D,iBAAA,CAAkBW,OAAA,EAAS;IAIhCzE,KAAA,CAAM6F,MAAA,CAAON,cAAA,IACXI,EAAA,GAAA7B,iBAAA,CAAkBW,OAAA,CAAQa,KAAA,KAA1B,OAAAK,EAAA,IAAmCrB,EAAA,GAAAtE,KAAA,CAAMqF,aAAA,CAAcnB,KAAA,KAApB,gBAAAI,EAAA,CAA2B9D,MAAA;IAChER,KAAA,CAAMqF,aAAA,CAAcI,YAAA,IAClBG,EAAA,GAAA9B,iBAAA,CAAkBW,OAAA,CAAQe,GAAA,KAA1B,OAAAI,EAAA,GAAiC5F,KAAA,CAAMqF,aAAA,CAAcE,cAAA;EACzD,GACA,CAACnD,OAAO,CACV;EAEA,MAAM0D,SAAA,GAAYvG,WAAA,CACfS,KAAA,IAA+B;IAC9B,IAAIA,KAAA,CAAMmF,WAAA,CAAYC,WAAA,EAAa;IAEnC,IAAI,CAACrF,2BAAA,CAA4BC,KAAA,EAAO4C,gBAAgB,GAAG;MACzD5C,KAAA,CAAM+F,cAAA,CAAe;IACvB;IAUA,MAAMC,UAAA,GAAaC,aAAA,CAAcjG,KAAK,IAAIoB,QAAA;IAE1C,MAAM8E,QAAA,GAAWlG,KAAA,CAAME,GAAA;IAEvB,MAAMiG,MAAA,GAAqD;MACzDC,OAAA,EAASA,CAAA,KAAM9C,SAAA,CAAU0C,UAAU;MACnCK,SAAA,EAAWA,CAAA,KAAM7C,SAAA,CAAUwC,UAAU;MACrCM,IAAA,EAAMA,CAAA,KAAMjD,QAAA,CAASvC,GAAG;MACxByF,GAAA,EAAKA,CAAA,KAAMlD,QAAA,CAASpC,GAAG;IACzB;IAEA,MAAMuF,MAAA,GAASL,MAAA,CAAOD,QAAQ;IAE9B,IAAIM,MAAA,EAAQ;MACVxG,KAAA,CAAM+F,cAAA,CAAe;MACrBS,MAAA,CAAOxG,KAAK;IACd;EACF,GACA,CAAC4C,gBAAA,EAAkBxB,QAAA,EAAUkC,SAAA,EAAWE,SAAA,EAAWH,QAAA,EAAUvC,GAAA,EAAKG,GAAG,CACvE;EAEA,MAAMgF,aAAA,GAGJjG,KAAA,IACG;IACH,IAAIyG,KAAA,GAAQ;IACZ,IAAIzG,KAAA,CAAMM,OAAA,IAAWN,KAAA,CAAMI,OAAA,EAAS;MAClCqG,KAAA,GAAQ;IACV;IACA,IAAIzG,KAAA,CAAM0G,QAAA,EAAU;MAClBD,KAAA,GAAQ;IACV;IACA,OAAOA,KAAA;EACT;EASA,MAAME,aAAA,GAAgBnH,OAAA,CAAQ,MAAM;IAClC,MAAMoH,IAAA,GAAOlE,gBAAA,oBAAAA,gBAAA,CAAmBS,OAAA,CAAQe,KAAA;IACxC,IAAI0C,IAAA,IAAQ,MAAM,OAAOA,IAAA;IAEzB,MAAMC,WAAA,GAAc1D,OAAA,CAAQe,KAAA,CAAMK,QAAA,CAAS;IAE3C,OAAO,CAACsC,WAAA,GAAc,SAAYA,WAAA;EACpC,GAAG,CAAC1D,OAAA,CAAQe,KAAA,EAAOxB,gBAAgB,CAAC;EAKpC,MAAMoE,gBAAA,GAAmBvH,WAAA,CAAY,MAAM;IACzC,IAAIwH,IAAA,GAAO5D,OAAA,CAAQe,KAAA;IACnB,IAAIf,OAAA,CAAQe,KAAA,KAAU,IAAI;IAE1B,MAAM8C,gBAAA,GAAmB,QAAQlH,IAAA,CAAKqD,OAAA,CAAQe,KAAA,CAAMK,QAAA,CAAS,CAAC;IAE9D,IAAIyC,gBAAA,EAAkB;MACpB7D,OAAA,CAAQyB,QAAA,CAAS,EAAE;IACrB,OAAO;MACL,IAAIzB,OAAA,CAAQqB,aAAA,GAAgB1D,GAAA,EAAK;QAC/BiG,IAAA,GAAOjG,GAAA;MACT;MACA,IAAIqC,OAAA,CAAQqB,aAAA,GAAgBvD,GAAA,EAAK;QAC/B8F,IAAA,GAAO9F,GAAA;MACT;MAEAkC,OAAA,CAAQ8D,IAAA,CAAKF,IAAI;IACnB;EACF,GAAG,CAAC5D,OAAA,EAASlC,GAAA,EAAKH,GAAG,CAAC;EAEtB,MAAMoG,WAAA,GAAc3H,WAAA,CAAY,MAAM;IACpCoE,UAAA,CAAW,KAAK;IAEhB,IAAI/C,gBAAA,EAAkB;MACpBkG,gBAAA,CAAiB;IACnB;EACF,GAAG,CAAClG,gBAAA,EAAkB+C,UAAA,EAAYmD,gBAAgB,CAAC;EAEnD,MAAMK,UAAA,GAAa5H,WAAA,CAAY,MAAM;IACnC,IAAIoB,kBAAA,EAAoB;MACtByG,qBAAA,CAAsB,MAAM;QA5ZlC,IAAA9C,EAAA;QA6ZQ,CAAAA,EAAA,GAAAT,QAAA,CAASY,OAAA,KAAT,gBAAAH,EAAA,CAAkB+C,KAAA;MACpB,CAAC;IACH;EACF,GAAG,CAAC1G,kBAAkB,CAAC;EAEvB,MAAM2G,MAAA,GAAS/H,WAAA,CACZS,KAAA,IAA8B;IAC7BA,KAAA,CAAM+F,cAAA,CAAe;IACrBlB,OAAA,CAAQ0C,EAAA,CAAG;IACXJ,UAAA,CAAW;EACb,GACA,CAACA,UAAA,EAAYtC,OAAO,CACtB;EAEA,MAAM2C,QAAA,GAAWjI,WAAA,CACdS,KAAA,IAA8B;IAC7BA,KAAA,CAAM+F,cAAA,CAAe;IACrBlB,OAAA,CAAQ4C,IAAA,CAAK;IACbN,UAAA,CAAW;EACb,GACA,CAACA,UAAA,EAAYtC,OAAO,CACtB;EAEA7F,gBAAA,CACE,MAAM6E,QAAA,CAASY,OAAA,EACf,SACCzE,KAAA,IAAsB;IAvb3B,IAAAsE,EAAA,EAAAqB,EAAA;IAwbM,MAAM+B,GAAA,IAAM/B,EAAA,IAAArB,EAAA,GAAAT,QAAA,CAASY,OAAA,KAAT,gBAAAH,EAAA,CAAkBqD,aAAA,KAAlB,OAAAhC,EAAA,GAAmCiC,QAAA;IAC/C,MAAMC,cAAA,GAAiBH,GAAA,CAAII,aAAA,KAAkBjE,QAAA,CAASY,OAAA;IACtD,IAAI,CAAC9C,eAAA,IAAmB,CAACkG,cAAA,EAAgB;IAEzC7H,KAAA,CAAM+F,cAAA,CAAe;IAErB,MAAMC,UAAA,GAAaC,aAAA,CAAcjG,KAAK,IAAIoB,QAAA;IAC1C,MAAM2G,SAAA,GAAYC,IAAA,CAAKC,IAAA,CAAKjI,KAAA,CAAMkI,MAAM;IAExC,IAAIH,SAAA,KAAc,IAAI;MACpBzE,SAAA,CAAU0C,UAAU;IACtB,WAAW+B,SAAA,KAAc,GAAG;MAC1BvE,SAAA,CAAUwC,UAAU;IACtB;EACF,GACA;IAAEmC,OAAA,EAAS;EAAM,CACnB;EAEA,MAAMC,uBAAA,GAAsC7I,WAAA,CAC1C,CAAC8I,MAAA,GAAQ,CAAC,GAAGC,GAAA,GAAM,SAAS;IAC1B,MAAMC,QAAA,GAAWjH,UAAA,IAAeT,eAAA,IAAmBsC,OAAA,CAAQqF,OAAA;IAC3D,OAAO;MACL,GAAGH,MAAA;MACHC,GAAA,EAAKlJ,SAAA,CAAUkJ,GAAA,EAAKvE,kBAAkB;MACtC0E,IAAA,EAAM;MACNC,QAAA,EAAU;MACVC,aAAA,EAAerJ,eAAA,CAAgB+I,MAAA,CAAMM,aAAA,EAAgB3I,KAAA,IAAU;QAC7D,IAAIA,KAAA,CAAM4I,MAAA,KAAW,KAAKL,QAAA,EAAU;QACpCjB,MAAA,CAAOtH,KAAK;MACd,CAAC;MACD6I,cAAA,EAAgBvJ,eAAA,CAAgB+I,MAAA,CAAMQ,cAAA,EAAgBhE,OAAA,CAAQG,IAAI;MAClE8D,WAAA,EAAaxJ,eAAA,CAAgB+I,MAAA,CAAMS,WAAA,EAAajE,OAAA,CAAQG,IAAI;MAC5DuD,QAAA;MACA,iBAAiBlJ,QAAA,CAASkJ,QAAQ;IACpC;EACF,GACA,CAACpF,OAAA,CAAQqF,OAAA,EAAS3H,eAAA,EAAiByG,MAAA,EAAQzC,OAAA,CAAQG,IAAA,EAAM1D,UAAU,CACrE;EAEA,MAAMyH,uBAAA,GAAsCxJ,WAAA,CAC1C,CAAC8I,MAAA,GAAQ,CAAC,GAAGC,GAAA,GAAM,SAAS;IAC1B,MAAMC,QAAA,GAAWjH,UAAA,IAAeT,eAAA,IAAmBsC,OAAA,CAAQ6F,OAAA;IAC3D,OAAO;MACL,GAAGX,MAAA;MACHC,GAAA,EAAKlJ,SAAA,CAAUkJ,GAAA,EAAKtE,kBAAkB;MACtCyE,IAAA,EAAM;MACNC,QAAA,EAAU;MACVC,aAAA,EAAerJ,eAAA,CAAgB+I,MAAA,CAAMM,aAAA,EAAgB3I,KAAA,IAAU;QAC7D,IAAIA,KAAA,CAAM4I,MAAA,KAAW,KAAKL,QAAA,EAAU;QACpCf,QAAA,CAASxH,KAAK;MAChB,CAAC;MACD6I,cAAA,EAAgBvJ,eAAA,CAAgB+I,MAAA,CAAMQ,cAAA,EAAgBhE,OAAA,CAAQG,IAAI;MAClE8D,WAAA,EAAaxJ,eAAA,CAAgB+I,MAAA,CAAMS,WAAA,EAAajE,OAAA,CAAQG,IAAI;MAC5DuD,QAAA;MACA,iBAAiBlJ,QAAA,CAASkJ,QAAQ;IACpC;EACF,GACA,CAACpF,OAAA,CAAQ6F,OAAA,EAASnI,eAAA,EAAiB2G,QAAA,EAAU3C,OAAA,CAAQG,IAAA,EAAM1D,UAAU,CACvE;EAEA,MAAM2H,aAAA,GACJ1J,WAAA,CACE,CAAC8I,MAAA,GAAQ,CAAC,GAAGC,GAAA,GAAM,SAAM;IAtf/B,IAAAhE,EAAA,EAAAqB,EAAA,EAAAC,EAAA,EAAAsD,EAAA;IAsfmC;MAC3BlH,IAAA;MACAN,SAAA;MACAyH,IAAA,EAAM;MACN1H,OAAA;MACA,mBAAmBU,cAAA;MACnB,cAAcD,SAAA;MACd,oBAAoBD,UAAA;MACpBL,EAAA;MACA2G,QAAA,EAAUjH,UAAA;MACV,GAAG+G,MAAA;MACHe,QAAA,GAAU9E,EAAA,GAAA+D,MAAA,CAAMe,QAAA,KAAN,OAAA9E,EAAA,GAAkBjD,UAAA;MAC5B,kBAAiBsE,EAAA,GAAA0C,MAAA,CAAMe,QAAA,KAAN,OAAAzD,EAAA,GAAkBtE,UAAA;MACnC,kBAAiBuE,EAAA,GAAAyC,MAAA,CAAMgB,QAAA,KAAN,OAAAzD,EAAA,GAAkBrE,UAAA;MACnC8H,QAAA,GAAUH,EAAA,GAAAb,MAAA,CAAMgB,QAAA,KAAN,OAAAH,EAAA,GAAkB3H,UAAA;MAC5B+G,GAAA,EAAKlJ,SAAA,CAAUyE,QAAA,EAAUyE,GAAG;MAC5BpE,KAAA,EAAOpB,MAAA,CAAOK,OAAA,CAAQe,KAAK;MAC3BuE,IAAA,EAAM;MACN,iBAAiB3H,GAAA;MACjB,iBAAiBG,GAAA;MACjB,iBAAiBF,MAAA,CAAOuI,KAAA,CAAMnG,OAAA,CAAQqB,aAAa,IAC/C,SACArB,OAAA,CAAQqB,aAAA;MACZ,gBAAgBnF,QAAA,CAASmC,SAAA,WAAAA,SAAA,GAAa2B,OAAA,CAAQoG,YAAY;MAC1D,kBAAkB5C,aAAA;MAClB6C,YAAA,EAAc;MACdC,WAAA,EAAa;MACb5H,QAAA,EAAUvC,eAAA,CAAgB+I,MAAA,CAAMxG,QAAA,EAAUA,QAAQ;MAClDiE,SAAA,EAAWxG,eAAA,CAAgB+I,MAAA,CAAMvC,SAAA,EAAWA,SAAS;MACrD1D,OAAA,EAAS9C,eAAA,CAAgB+I,MAAA,CAAMjG,OAAA,EAASsD,QAAA,EAAU,MAChD/B,UAAA,CAAW,IAAI,CACjB;MACArB,MAAA,EAAQhD,eAAA,CAAgB+I,MAAA,CAAM/F,MAAA,EAAQA,MAAA,EAAQ4E,WAAW;IAC3D;EAAA,GACA,CACElF,IAAA,EACAN,SAAA,EACAD,OAAA,EACAU,cAAA,EACAD,SAAA,EACAY,MAAA,EACAb,UAAA,EACAL,EAAA,EACAN,UAAA,EACAC,UAAA,EACAF,UAAA,EACAG,SAAA,EACA2B,OAAA,CAAQe,KAAA,EACRf,OAAA,CAAQqB,aAAA,EACRrB,OAAA,CAAQoG,YAAA,EACRzI,GAAA,EACAG,GAAA,EACA0F,aAAA,EACA9E,QAAA,EACAiE,SAAA,EACAJ,QAAA,EACApD,MAAA,EACA4E,WAAA,CAEJ;EAEF,OAAO;IACLhD,KAAA,EAAOpB,MAAA,CAAOK,OAAA,CAAQe,KAAK;IAC3BM,aAAA,EAAerB,OAAA,CAAQqB,aAAA;IACvBd,SAAA;IACApC,UAAA;IACAD,UAAA;IACA+G,uBAAA;IACAW,uBAAA;IACAE,aAAA;IACA/F;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}