{"ast":null,"code":"'use client';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/pan-event.ts\nimport { addPointerEvent, getEventPoint, isMultiTouchEvent } from \"@chakra-ui/event-utils\";\nimport sync, { cancelSync, getFrameData } from \"framesync\";\nvar PanEvent = class {\n  constructor(event, handlers, threshold) {\n    /**\n     * We use this to keep track of the `x` and `y` pan session history\n     * as the pan event happens. It helps to calculate the `offset` and `delta`\n     */\n    __publicField(this, \"history\", []);\n    // The pointer event that started the pan session\n    __publicField(this, \"startEvent\", null);\n    // The current pointer event for the pan session\n    __publicField(this, \"lastEvent\", null);\n    // The current pointer event info for the pan session\n    __publicField(this, \"lastEventInfo\", null);\n    __publicField(this, \"handlers\", {});\n    __publicField(this, \"removeListeners\", () => {});\n    /**\n     * Minimal pan distance required before recognizing the pan.\n     * @default \"3px\"\n     */\n    __publicField(this, \"threshold\", 3);\n    __publicField(this, \"win\");\n    __publicField(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      const info = getPanInfo(this.lastEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      const isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      const {\n        timestamp\n      } = getFrameData();\n      this.history.push({\n        ...info.point,\n        timestamp\n      });\n      const {\n        onStart,\n        onMove\n      } = this.handlers;\n      if (!isPanStarted) {\n        onStart == null ? void 0 : onStart(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n      onMove == null ? void 0 : onMove(this.lastEvent, info);\n    });\n    __publicField(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info;\n      sync.update(this.updatePoint, true);\n    });\n    __publicField(this, \"onPointerUp\", (event, info) => {\n      const panInfo = getPanInfo(info, this.history);\n      const {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);\n      this.end();\n      if (!onEnd || !this.startEvent) return;\n      onEnd == null ? void 0 : onEnd(event, panInfo);\n    });\n    var _a;\n    this.win = (_a = event.view) != null ? _a : window;\n    if (isMultiTouchEvent(event)) return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    const info = {\n      point: getEventPoint(event)\n    };\n    const {\n      timestamp\n    } = getFrameData();\n    this.history = [{\n      ...info.point,\n      timestamp\n    }];\n    const {\n      onSessionStart\n    } = handlers;\n    onSessionStart == null ? void 0 : onSessionStart(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    var _a;\n    (_a = this.removeListeners) == null ? void 0 : _a.call(this);\n    cancelSync.update(this.updatePoint);\n  }\n};\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nvar toMilliseconds = v => v * 1e3;\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = history[history.length - 1];\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nfunction pipe(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\nfunction distance1D(a, b) {\n  return Math.abs(a - b);\n}\nfunction isPoint(point) {\n  return \"x\" in point && \"y\" in point;\n}\nfunction distance(a, b) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b);\n  }\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n  return 0;\n}\nexport { PanEvent, distance };","map":{"version":3,"names":["addPointerEvent","getEventPoint","isMultiTouchEvent","sync","cancelSync","getFrameData","PanEvent","constructor","event","handlers","threshold","__publicField","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","distance","offset","x","y","timestamp","push","point","onStart","onMove","update","updatePoint","panInfo","onEnd","onSessionEnd","end","_a","win","view","window","stopPropagation","preventDefault","onSessionStart","removeListeners","pipe","onPointerMove","onPointerUp","updateHandlers","call","subtract","a","b","delta","length","velocity","getVelocity","toMilliseconds","v","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","fns","reduce","distance1D","Math","abs","isPoint","xDelta","yDelta","sqrt"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\react-use-pan-event\\src\\pan-event.ts"],"sourcesContent":["import {\n  addPointerEvent,\n  getEventPoint,\n  isMultiTouchEvent,\n} from \"@chakra-ui/event-utils\"\nimport sync, { cancelSync, getFrameData } from \"framesync\"\nimport {\n  AnyPointerEvent,\n  PanEventHandlers,\n  PanEventHistory,\n  Point,\n  PointerEventInfo,\n  TimestampedPoint,\n} from \"./types\"\n\n/**\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanEvent {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: PanEventHistory = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanEventHandlers> = {}\n\n  private removeListeners: Function = () => {}\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  private win: typeof globalThis\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanEventHandlers>,\n    threshold?: number,\n  ) {\n    this.win = (event.view ?? window) as typeof globalThis.window\n\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = { point: getEventPoint(event) }\n    const { timestamp } = getFrameData()\n    this.history = [{ ...info.point, timestamp }]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    const { timestamp } = getFrameData()\n    this.history.push({ ...info.point, timestamp })\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    // notify pan session ended\n    const panInfo = getPanInfo(info, this.history)\n    const { onEnd, onSessionEnd } = this.handlers\n\n    onSessionEnd?.(event, panInfo)\n    this.end()\n\n    // if panning never started, no need to call `onEnd`\n    // panning requires a pointermove of at least 3px\n    if (!onEnd || !this.startEvent) return\n\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanEventHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\n/* -----------------------------------------------------------------------------\n * Utilities\n * -----------------------------------------------------------------------------*/\n\nfunction subtract(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: PanEventHistory) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1),\n  }\n}\n\nconst toMilliseconds = (v: number) => v * 1000\n\nfunction getVelocity(history: TimestampedPoint[], timeDelta: number): Point {\n  if (history.length < 2) {\n    return { x: 0, y: 0 }\n  }\n\n  let i = history.length - 1\n  let timestampedPoint: TimestampedPoint | null = null\n  const lastPoint = history[history.length - 1]\n  while (i >= 0) {\n    timestampedPoint = history[i]\n    if (\n      lastPoint.timestamp - timestampedPoint.timestamp >\n      toMilliseconds(timeDelta)\n    ) {\n      break\n    }\n    i--\n  }\n\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 }\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000\n  if (time === 0) {\n    return { x: 0, y: 0 }\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time,\n  }\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0\n  }\n\n  return currentVelocity\n}\n\nfunction pipe<R>(...fns: Array<(a: R) => R>) {\n  return (v: R) => fns.reduce((a, b) => b(a), v)\n}\n\nfunction distance1D(a: number, b: number) {\n  return Math.abs(a - b)\n}\n\nfunction isPoint(point: any): point is { x: number; y: number } {\n  return \"x\" in point && \"y\" in point\n}\n\nexport function distance<P extends Point | number>(a: P, b: P) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b)\n  }\n\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x)\n    const yDelta = distance1D(a.y, b.y)\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2)\n  }\n\n  return 0\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}