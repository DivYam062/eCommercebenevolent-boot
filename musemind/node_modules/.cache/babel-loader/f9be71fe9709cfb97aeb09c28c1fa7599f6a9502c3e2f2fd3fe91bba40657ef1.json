{"ast":null,"code":"'use client';\n\nimport { useMediaQuery } from \"./chunk-57I6FYPZ.mjs\";\n\n// src/use-breakpoint.ts\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction useBreakpoint(arg) {\n  var _a, _b;\n  const opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const theme = useTheme();\n  const breakpoints = theme.__breakpoints.details.map(({\n    minMaxQuery,\n    breakpoint\n  }) => ({\n    breakpoint,\n    query: minMaxQuery.replace(\"@media screen and \", \"\")\n  }));\n  const fallback = breakpoints.map(bp => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: opts.ssr\n  });\n  const index = values.findIndex(value => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\nexport { useBreakpoint };","map":{"version":3,"names":["useTheme","isObject","useBreakpoint","arg","_a","_b","opts","fallback","theme","breakpoints","__breakpoints","details","map","minMaxQuery","breakpoint","query","replace","bp","values","useMediaQuery","ssr","index","findIndex","value"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\media-query\\src\\use-breakpoint.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n"],"mappings":";;;;;AAAA,SAASA,QAAA,QAAgB;AACzB,SAASC,QAAA,QAAgB;AAclB,SAASC,cAAcC,GAAA,EAAqC;EAfnE,IAAAC,EAAA,EAAAC,EAAA;EAgBE,MAAMC,IAAA,GAAOL,QAAA,CAASE,GAAG,IAAIA,GAAA,GAAM;IAAEI,QAAA,EAAUJ,GAAA,WAAAA,GAAA,GAAO;EAAO;EAC7D,MAAMK,KAAA,GAAQR,QAAA,CAAS;EAEvB,MAAMS,WAAA,GAAcD,KAAA,CAAME,aAAA,CAAeC,OAAA,CAAQC,GAAA,CAC/C,CAAC;IAAEC,WAAA;IAAaC;EAAW,OAAO;IAChCA,UAAA;IACAC,KAAA,EAAOF,WAAA,CAAYG,OAAA,CAAQ,sBAAsB,EAAE;EACrD,EACF;EAEA,MAAMT,QAAA,GAAWE,WAAA,CAAYG,GAAA,CAAKK,EAAA,IAAOA,EAAA,CAAGH,UAAA,KAAeR,IAAA,CAAKC,QAAQ;EACxE,MAAMW,MAAA,GAASC,aAAA,CACbV,WAAA,CAAYG,GAAA,CAAKK,EAAA,IAAOA,EAAA,CAAGF,KAAK,GAChC;IAAER,QAAA;IAAUa,GAAA,EAAKd,IAAA,CAAKc;EAAI,CAC5B;EAEA,MAAMC,KAAA,GAAQH,MAAA,CAAOI,SAAA,CAAWC,KAAA,IAAUA,KAAA,IAAS,IAAI;EACvD,QAAOlB,EAAA,IAAAD,EAAA,GAAAK,WAAA,CAAYY,KAAK,MAAjB,gBAAAjB,EAAA,CAAoBU,UAAA,KAApB,OAAAT,EAAA,GAAkCC,IAAA,CAAKC,QAAA;AAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}