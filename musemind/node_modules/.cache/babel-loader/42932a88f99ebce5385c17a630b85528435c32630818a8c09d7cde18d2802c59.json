{"ast":null,"code":"'use client';\n\nimport { useMenuStyles } from \"./chunk-UZJ3TPNQ.mjs\";\n\n// src/styled-menu-item.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledMenuItem = forwardRef((props, ref) => {\n  const {\n    type,\n    ...rest\n  } = props;\n  const styles = useMenuStyles();\n  const btnType = rest.as || type ? type != null ? type : void 0 : \"button\";\n  const buttonStyles = useMemo(() => ({\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    ...styles.item\n  }), [styles.item]);\n  return /* @__PURE__ */jsx(chakra.button, {\n    ref,\n    type: btnType,\n    ...rest,\n    __css: buttonStyles\n  });\n});\nexport { StyledMenuItem };","map":{"version":3,"names":["chakra","forwardRef","useMemo","jsx","StyledMenuItem","props","ref","type","rest","styles","useMenuStyles","btnType","as","buttonStyles","textDecoration","color","userSelect","display","width","alignItems","textAlign","flex","outline","item","button","__css"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\menu\\src\\styled-menu-item.tsx"],"sourcesContent":["import { chakra, forwardRef, SystemStyleObject } from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\nimport { useMenuStyles } from \"./menu\"\nimport { StyledMenuItemProps } from \"./menu-item\"\n\nexport const StyledMenuItem = forwardRef<StyledMenuItemProps, \"button\">(\n  (props, ref) => {\n    const { type, ...rest } = props\n    const styles = useMenuStyles()\n\n    /**\n     * Given another component, use its type if present\n     * Else, use no type to avoid invalid html, e.g. <a type=\"button\" />\n     * Else, fall back to \"button\"\n     */\n    const btnType = rest.as || type ? type ?? undefined : \"button\"\n\n    const buttonStyles: SystemStyleObject = useMemo(\n      () => ({\n        textDecoration: \"none\",\n        color: \"inherit\",\n        userSelect: \"none\",\n        display: \"flex\",\n        width: \"100%\",\n        alignItems: \"center\",\n        textAlign: \"start\",\n        flex: \"0 0 auto\",\n        outline: 0,\n        ...styles.item,\n      }),\n      [styles.item],\n    )\n\n    return (\n      <chakra.button ref={ref} type={btnType} {...rest} __css={buttonStyles} />\n    )\n  },\n)\n"],"mappings":";;;;;AAAA,SAASA,MAAA,EAAQC,UAAA,QAAqC;AACtD,SAASC,OAAA,QAAe;AAiClB,SAAAC,GAAA;AA7BC,IAAMC,cAAA,GAAiBH,UAAA,CAC5B,CAACI,KAAA,EAAOC,GAAA,KAAQ;EACd,MAAM;IAAEC,IAAA;IAAM,GAAGC;EAAK,IAAIH,KAAA;EAC1B,MAAMI,MAAA,GAASC,aAAA,CAAc;EAO7B,MAAMC,OAAA,GAAUH,IAAA,CAAKI,EAAA,IAAML,IAAA,GAAOA,IAAA,WAAAA,IAAA,GAAQ,SAAY;EAEtD,MAAMM,YAAA,GAAkCX,OAAA,CACtC,OAAO;IACLY,cAAA,EAAgB;IAChBC,KAAA,EAAO;IACPC,UAAA,EAAY;IACZC,OAAA,EAAS;IACTC,KAAA,EAAO;IACPC,UAAA,EAAY;IACZC,SAAA,EAAW;IACXC,IAAA,EAAM;IACNC,OAAA,EAAS;IACT,GAAGb,MAAA,CAAOc;EACZ,IACA,CAACd,MAAA,CAAOc,IAAI,CACd;EAEA,OACE,eAAApB,GAAA,CAACH,MAAA,CAAOwB,MAAA,EAAP;IAAclB,GAAA;IAAUC,IAAA,EAAMI,OAAA;IAAU,GAAGH,IAAA;IAAMiB,KAAA,EAAOZ;EAAA,CAAc;AAE3E,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}