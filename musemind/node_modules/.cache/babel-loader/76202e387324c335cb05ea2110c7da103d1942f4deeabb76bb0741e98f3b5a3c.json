{"ast":null,"code":"'use client';\n\n// src/table.tsx\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [TableStylesProvider, useTableStyles] = createContext({\n  name: `TableStylesContext`,\n  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" `\n});\nvar Table = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props);\n  const {\n    className,\n    layout,\n    ...tableProps\n  } = omitThemingProps(props);\n  return /* @__PURE__ */jsx(TableStylesProvider, {\n    value: styles,\n    children: /* @__PURE__ */jsx(chakra.table, {\n      ref,\n      __css: {\n        tableLayout: layout,\n        ...styles.table\n      },\n      className: cx(\"chakra-table\", className),\n      ...tableProps\n    })\n  });\n});\nTable.displayName = \"Table\";\nexport { useTableStyles, Table };","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","createContext","jsx","TableStylesProvider","useTableStyles","name","errorMessage","Table","props","ref","styles","className","layout","tableProps","value","children","table","__css","tableLayout","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\table\\src\\table.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\n\nconst [TableStylesProvider, useTableStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TableStylesContext`,\n  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" `,\n})\n\nexport { useTableStyles }\n\nexport interface TableOptions {\n  layout?: SystemStyleObject[\"tableLayout\"]\n}\n\nexport interface TableProps\n  extends HTMLChakraProps<\"table\">,\n    TableOptions,\n    ThemingProps<\"Table\"> {}\n\n/**\n * The `Table` component is used to organize and display data efficiently. It renders a `<table>` element by default.\n *\n * @see Docs https://chakra-ui.com/docs/components/table\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/table/\n */\nexport const Table = forwardRef<TableProps, \"table\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props)\n  const { className, layout, ...tableProps } = omitThemingProps(props)\n\n  return (\n    <TableStylesProvider value={styles}>\n      <chakra.table\n        ref={ref}\n        __css={{ tableLayout: layout, ...styles.table }}\n        className={cx(\"chakra-table\", className)}\n        {...tableProps}\n      />\n    </TableStylesProvider>\n  )\n})\n\nTable.displayName = \"Table\"\n"],"mappings":";;;AAAA,SACEA,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAEAC,mBAAA,QAEK;AACP,SAASC,EAAA,QAAU;AACnB,SAASC,aAAA,QAAqB;AAgCxB,SAAAC,GAAA;AA9BN,IAAM,CAACC,mBAAA,EAAqBC,cAAc,IAAIH,aAAA,CAE5C;EACAI,IAAA,EAAM;EACNC,YAAA,EAAc;AAChB,CAAC;AAmBM,IAAMC,KAAA,GAAQV,UAAA,CAAgC,CAACW,KAAA,EAAOC,GAAA,KAAQ;EACnE,MAAMC,MAAA,GAASX,mBAAA,CAAoB,SAASS,KAAK;EACjD,MAAM;IAAEG,SAAA;IAAWC,MAAA;IAAQ,GAAGC;EAAW,IAAIf,gBAAA,CAAiBU,KAAK;EAEnE,OACE,eAAAN,GAAA,CAACC,mBAAA;IAAoBW,KAAA,EAAOJ,MAAA;IAC1BK,QAAA,iBAAAb,GAAA,CAACN,MAAA,CAAOoB,KAAA,EAAP;MACCP,GAAA;MACAQ,KAAA,EAAO;QAAEC,WAAA,EAAaN,MAAA;QAAQ,GAAGF,MAAA,CAAOM;MAAM;MAC9CL,SAAA,EAAWX,EAAA,CAAG,gBAAgBW,SAAS;MACtC,GAAGE;IAAA,CACN;EAAA,CACF;AAEJ,CAAC;AAEDN,KAAA,CAAMY,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}