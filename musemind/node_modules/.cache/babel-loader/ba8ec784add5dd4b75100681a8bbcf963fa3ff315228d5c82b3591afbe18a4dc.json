{"ast":null,"code":"'use client';\n\nimport { AvatarName } from \"./chunk-O25PJXSD.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\";\n\n// src/avatar-image.tsx\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction AvatarImage(props) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin\n  } = props;\n  const status = useImage({\n    src,\n    onError,\n    crossOrigin,\n    ignoreFallback\n  });\n  const hasLoaded = status === \"loaded\";\n  const showFallback = !src || !hasLoaded;\n  if (showFallback) {\n    return name ? /* @__PURE__ */jsx(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials,\n      name\n    }) : cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n  return /* @__PURE__ */jsx(chakra.img, {\n    src,\n    srcSet,\n    alt: name,\n    onLoad,\n    referrerPolicy,\n    crossOrigin: crossOrigin != null ? crossOrigin : void 0,\n    className: \"chakra-avatar__img\",\n    loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n}\nAvatarImage.displayName = \"AvatarImage\";\nexport { AvatarImage };","map":{"version":3,"names":["useImage","chakra","cloneElement","jsx","AvatarImage","props","src","srcSet","onError","onLoad","getInitials","name","borderRadius","loading","iconLabel","icon","GenericAvatarIcon","ignoreFallback","referrerPolicy","crossOrigin","status","hasLoaded","showFallback","AvatarName","className","role","img","alt","__css","width","height","objectFit","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\avatar\\src\\avatar-image.tsx"],"sourcesContent":["import { ImageProps, useImage } from \"@chakra-ui/image\"\nimport { chakra, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cloneElement } from \"react\"\nimport { AvatarName } from \"./avatar-name\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n\ntype AvatarImageProps = ImageProps & {\n  getInitials?: (name: string) => string\n  borderRadius?: SystemStyleObject[\"borderRadius\"]\n  icon: React.ReactElement\n  iconLabel?: string\n  name?: string\n}\n\nexport function AvatarImage(props: AvatarImageProps) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <GenericAvatarIcon />,\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      srcSet={srcSet}\n      alt={name}\n      onLoad={onLoad}\n      referrerPolicy={referrerPolicy}\n      crossOrigin={crossOrigin ?? undefined}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nAvatarImage.displayName = \"AvatarImage\"\n"],"mappings":";;;;;;AAAA,SAAqBA,QAAA,QAAgB;AACrC,SAASC,MAAA,QAAiC;AAC1C,SAASC,YAAA,QAAoB;AAuBlB,SAAAC,GAAA;AAXJ,SAASC,YAAYC,KAAA,EAAyB;EACnD,MAAM;IACJC,GAAA;IACAC,MAAA;IACAC,OAAA;IACAC,MAAA;IACAC,WAAA;IACAC,IAAA;IACAC,YAAA;IACAC,OAAA;IACAC,SAAA;IACAC,IAAA,GAAO,eAAAZ,GAAA,CAACa,iBAAA,IAAkB;IAC1BC,cAAA;IACAC,cAAA;IACAC;EACF,IAAId,KAAA;EAKJ,MAAMe,MAAA,GAASpB,QAAA,CAAS;IAAEM,GAAA;IAAKE,OAAA;IAASW,WAAA;IAAaF;EAAe,CAAC;EAErE,MAAMI,SAAA,GAAYD,MAAA,KAAW;EAS7B,MAAME,YAAA,GAAe,CAAChB,GAAA,IAAO,CAACe,SAAA;EAE9B,IAAIC,YAAA,EAAc;IAChB,OAAOX,IAAA,GACL,eAAAR,GAAA,CAACoB,UAAA;MACCC,SAAA,EAAU;MACVd,WAAA;MACAC;IAAA,CACF,IAEAT,YAAA,CAAaa,IAAA,EAAM;MACjBU,IAAA,EAAM;MACN,cAAcX;IAChB,CAAC;EAEL;EAKA,OACE,eAAAX,GAAA,CAACF,MAAA,CAAOyB,GAAA,EAAP;IACCpB,GAAA;IACAC,MAAA;IACAoB,GAAA,EAAKhB,IAAA;IACLF,MAAA;IACAS,cAAA;IACAC,WAAA,EAAaA,WAAA,WAAAA,WAAA,GAAe;IAC5BK,SAAA,EAAU;IACVX,OAAA;IACAe,KAAA,EAAO;MACLC,KAAA,EAAO;MACPC,MAAA,EAAQ;MACRC,SAAA,EAAW;MACXnB;IACF;EAAA,CACF;AAEJ;AAEAR,WAAA,CAAY4B,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}