{"ast":null,"code":"'use client';\n\n// src/use-radio-group.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useRef, useState, useId } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useRadioGroup(props = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props;\n  const [valueState, setValue] = useState(defaultValue || \"\");\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const ref = useRef(null);\n  const focus = useCallback(() => {\n    const rootNode = ref.current;\n    if (!rootNode) return;\n    let query = `input:not(:disabled):checked`;\n    const firstEnabledAndCheckedInput = rootNode.querySelector(query);\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n    query = `input:not(:disabled)`;\n    const firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  const uuid = useId();\n  const fallbackName = `radio-${uuid}`;\n  const name = nameProp || fallbackName;\n  const onChange = useCallback(eventOrValue => {\n    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  const getRootProps = useCallback((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: mergeRefs(forwardedRef, ref),\n    role: \"radiogroup\"\n  }), []);\n  const getRadioProps = useCallback((props2 = {}, ref2 = null) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      ref: ref2,\n      name,\n      [checkedKey]: value != null ? props2.value === value : void 0,\n      onChange(event) {\n        onChange(event);\n      },\n      \"data-radiogroup\": true\n    };\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps\n  };\n}\nexport { useRadioGroup };","map":{"version":3,"names":["isObject","mergeRefs","useCallback","useRef","useState","useId","isInputEvent","value","target","useRadioGroup","props","onChange","onChangeProp","valueProp","defaultValue","name","nameProp","isDisabled","isFocusable","isNative","htmlProps","valueState","setValue","isControlled","ref","focus","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","uuid","fallbackName","eventOrValue","nextValue","String","getRootProps","props2","forwardedRef","role","getRadioProps","ref2","checkedKey","event"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\radio\\src\\use-radio-group.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useRef, useState, useId } from \"react\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | string | number\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: string\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: string\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\n/**\n * `useRadioGroup` is a custom hook that provides all the state management logic for a group of radios.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio-group\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<string | number>(defaultValue || \"\")\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const uuid = useId()\n  const fallbackName = `radio-${uuid}`\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: PropGetter<\n    InputDOMAttributes & { isChecked?: boolean },\n    InputDOMAttributes\n  > = useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange(event) {\n          onChange(event as any)\n        },\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}