{"ast":null,"code":"'use client';\n\n// src/use-event-listener-map.ts\nimport { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nfunction useEventListenerMap() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    const {\n      __listener: pointerEventListener\n    } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\nexport { useEventListenerMap };","map":{"version":3,"names":["getPointerEventName","wrapPointerEventHandler","useCallback","useEffect","useRef","useEventListenerMap","listeners","Map","currentListeners","current","add","el","type","listener","options","pointerEventListener","set","__listener","addEventListener","remove","get","removeEventListener","delete","forEach","value","key"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\hooks\\src\\use-event-listener-map.ts"],"sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      const { __listener: pointerEventListener } =\n        listeners.current.get(listener)\n      el.removeEventListener(type, pointerEventListener, options)\n      listeners.current.delete(pointerEventListener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"mappings":";;;AAAA,SAEEA,mBAAA,EACAC,uBAAA,QAEK;AACP,SAASC,WAAA,EAAaC,SAAA,EAAWC,MAAA,QAAc;AA6BxC,SAASC,oBAAA,EAAsC;EACpD,MAAMC,SAAA,GAAYF,MAAA,EAAO,mBAAIG,GAAA,CAAI,CAAC;EAClC,MAAMC,gBAAA,GAAmBF,SAAA,CAAUG,OAAA;EAEnC,MAAMC,GAAA,GAAMR,WAAA,CAAY,CAACS,EAAA,EAASC,IAAA,EAAWC,QAAA,EAAeC,OAAA,KAAiB;IAC3E,MAAMC,oBAAA,GAAuBd,uBAAA,CAC3BY,QAAA,EACAD,IAAA,KAAS,aACX;IACAN,SAAA,CAAUG,OAAA,CAAQO,GAAA,CAAIH,QAAA,EAAU;MAC9BI,UAAA,EAAYF,oBAAA;MACZH,IAAA,EAAMZ,mBAAA,CAAoBY,IAAI;MAC9BD,EAAA;MACAG;IACF,CAAC;IACDH,EAAA,CAAGO,gBAAA,CAAiBN,IAAA,EAAMG,oBAAA,EAAsBD,OAAO;EACzD,GAAG,EAAE;EAEL,MAAMK,MAAA,GAASjB,WAAA,CACb,CAACS,EAAA,EAASC,IAAA,EAAWC,QAAA,EAAeC,OAAA,KAAiB;IACnD,MAAM;MAAEG,UAAA,EAAYF;IAAqB,IACvCT,SAAA,CAAUG,OAAA,CAAQW,GAAA,CAAIP,QAAQ;IAChCF,EAAA,CAAGU,mBAAA,CAAoBT,IAAA,EAAMG,oBAAA,EAAsBD,OAAO;IAC1DR,SAAA,CAAUG,OAAA,CAAQa,MAAA,CAAOP,oBAAoB;EAC/C,GACA,EACF;EAEAZ,SAAA,CACE,MAAM,MAAM;IACVK,gBAAA,CAAiBe,OAAA,CAAQ,CAACC,KAAA,EAAOC,GAAA,KAAQ;MACvCN,MAAA,CAAOK,KAAA,CAAMb,EAAA,EAAIa,KAAA,CAAMZ,IAAA,EAAMa,GAAA,EAAKD,KAAA,CAAMV,OAAO;IACjD,CAAC;EACH,GACA,CAACK,MAAA,EAAQX,gBAAgB,CAC3B;EAEA,OAAO;IAAEE,GAAA;IAAKS;EAAO;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}