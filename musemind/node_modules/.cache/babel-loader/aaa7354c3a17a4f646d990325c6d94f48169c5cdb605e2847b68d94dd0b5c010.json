{"ast":null,"code":"'use client';\n\n// src/use-image.ts\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return void 0;\n    if (status === \"loading\") {\n      load();\n    }\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\nexport { useImage, shouldShowFallbackImage };","map":{"version":3,"names":["useSafeLayoutEffect","useCallback","useEffect","useRef","useState","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","shouldShowFallbackImage","fallbackStrategy"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\image\\src\\use-image.ts"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"],"mappings":";;;AAAA,SAASA,mBAAA,QAA2B;AACpC,SAASC,WAAA,EAAaC,SAAA,EAAWC,MAAA,EAAQC,QAAA,QAAgB;AA6DlD,SAASC,SAASC,KAAA,EAAsB;EAC7C,MAAM;IACJC,OAAA;IACAC,GAAA;IACAC,MAAA;IACAC,MAAA;IACAC,OAAA;IACAC,WAAA;IACAC,KAAA;IACAC;EACF,IAAIR,KAAA;EAEJ,MAAM,CAACS,MAAA,EAAQC,SAAS,IAAIZ,QAAA,CAAiB,SAAS;EAEtDF,SAAA,CAAU,MAAM;IACdc,SAAA,CAAUR,GAAA,GAAM,YAAY,SAAS;EACvC,GAAG,CAACA,GAAG,CAAC;EAER,MAAMS,QAAA,GAAWd,MAAA,CAAgC;EAEjD,MAAMe,IAAA,GAAOjB,WAAA,CAAY,MAAM;IAC7B,IAAI,CAACO,GAAA,EAAK;IAEVW,KAAA,CAAM;IAEN,MAAMC,GAAA,GAAM,IAAIC,KAAA,CAAM;IACtBD,GAAA,CAAIZ,GAAA,GAAMA,GAAA;IACV,IAAII,WAAA,EAAaQ,GAAA,CAAIR,WAAA,GAAcA,WAAA;IACnC,IAAIH,MAAA,EAAQW,GAAA,CAAIE,MAAA,GAASb,MAAA;IACzB,IAAII,KAAA,EAAOO,GAAA,CAAIP,KAAA,GAAQA,KAAA;IACvB,IAAIN,OAAA,EAASa,GAAA,CAAIb,OAAA,GAAUA,OAAA;IAE3Ba,GAAA,CAAIG,MAAA,GAAUC,KAAA,IAAU;MACtBL,KAAA,CAAM;MACNH,SAAA,CAAU,QAAQ;MAClBN,MAAA,oBAAAA,MAAA,CAASc,KAAA;IACX;IACAJ,GAAA,CAAIK,OAAA,GAAWC,KAAA,IAAU;MACvBP,KAAA,CAAM;MACNH,SAAA,CAAU,QAAQ;MAClBL,OAAA,oBAAAA,OAAA,CAAUe,KAAA;IACZ;IAEAT,QAAA,CAASU,OAAA,GAAUP,GAAA;EACrB,GAAG,CAACZ,GAAA,EAAKI,WAAA,EAAaH,MAAA,EAAQI,KAAA,EAAOH,MAAA,EAAQC,OAAA,EAASJ,OAAO,CAAC;EAE9D,MAAMY,KAAA,GAAQA,CAAA,KAAM;IAClB,IAAIF,QAAA,CAASU,OAAA,EAAS;MACpBV,QAAA,CAASU,OAAA,CAAQJ,MAAA,GAAS;MAC1BN,QAAA,CAASU,OAAA,CAAQF,OAAA,GAAU;MAC3BR,QAAA,CAASU,OAAA,GAAU;IACrB;EACF;EAEA3B,mBAAA,CAAoB,MAAM;IAKxB,IAAIc,cAAA,EAAgB,OAAO;IAE3B,IAAIC,MAAA,KAAW,WAAW;MACxBG,IAAA,CAAK;IACP;IACA,OAAO,MAAM;MACXC,KAAA,CAAM;IACR;EACF,GAAG,CAACJ,MAAA,EAAQG,IAAA,EAAMJ,cAAc,CAAC;EAMjC,OAAOA,cAAA,GAAiB,WAAWC,MAAA;AACrC;AAEO,IAAMa,uBAAA,GAA0BA,CACrCb,MAAA,EACAc,gBAAA,KAECd,MAAA,KAAW,YAAYc,gBAAA,KAAqB,uBAC5Cd,MAAA,KAAW,YAAYc,gBAAA,KAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}