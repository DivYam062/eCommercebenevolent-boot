{"ast":null,"code":"'use client';\n\nimport { __publicField } from \"./chunk-5WQ4PXEV.mjs\";\n\n// src/modal-manager.ts\nimport { useEffect, useState } from \"react\";\nvar ModalManager = class {\n  constructor() {\n    __publicField(this, \"modals\");\n    this.modals = /* @__PURE__ */new Map();\n  }\n  add(modal) {\n    this.modals.set(modal, this.modals.size + 1);\n    return this.modals.size;\n  }\n  remove(modal) {\n    this.modals.delete(modal);\n  }\n  isTopModal(modal) {\n    if (!modal) return false;\n    return this.modals.get(modal) === this.modals.size;\n  }\n};\nvar modalManager = new ModalManager();\nfunction useModalManager(ref, isOpen) {\n  const [index, setIndex] = useState(0);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (isOpen) {\n      const index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n    return () => {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\nexport { modalManager, useModalManager };","map":{"version":3,"names":["useEffect","useState","ModalManager","constructor","__publicField","modals","Map","add","modal","set","size","remove","delete","isTopModal","get","modalManager","useModalManager","ref","isOpen","index","setIndex","node","current","index2"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\modal\\src\\modal-manager.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n"],"mappings":";;;;;AAAA,SAAoBA,SAAA,EAAWC,QAAA,QAAgB;AAM/C,IAAMC,YAAA,GAAN,MAAmB;EAEjBC,YAAA,EAAc;IADdC,aAAA;IAEE,KAAKC,MAAA,GAAS,mBAAIC,GAAA,CAAI;EACxB;EAEAC,IAAIC,KAAA,EAAoB;IACtB,KAAKH,MAAA,CAAOI,GAAA,CAAID,KAAA,EAAO,KAAKH,MAAA,CAAOK,IAAA,GAAO,CAAC;IAC3C,OAAO,KAAKL,MAAA,CAAOK,IAAA;EACrB;EAEAC,OAAOH,KAAA,EAAoB;IACzB,KAAKH,MAAA,CAAOO,MAAA,CAAOJ,KAAK;EAC1B;EAEAK,WAAWL,KAAA,EAA2B;IACpC,IAAI,CAACA,KAAA,EAAO,OAAO;IACnB,OAAO,KAAKH,MAAA,CAAOS,GAAA,CAAIN,KAAK,MAAM,KAAKH,MAAA,CAAOK,IAAA;EAChD;AACF;AAEO,IAAMK,YAAA,GAAe,IAAIb,YAAA,CAAa;AAEtC,SAASc,gBAAgBC,GAAA,EAA6BC,MAAA,EAAkB;EAC7E,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAInB,QAAA,CAAS,CAAC;EAEpCD,SAAA,CAAU,MAAM;IACd,MAAMqB,IAAA,GAAOJ,GAAA,CAAIK,OAAA;IAEjB,IAAI,CAACD,IAAA,EAAM;IAEX,IAAIH,MAAA,EAAQ;MACV,MAAMK,MAAA,GAAQR,YAAA,CAAaR,GAAA,CAAIc,IAAI;MACnCD,QAAA,CAASG,MAAK;IAChB;IAEA,OAAO,MAAM;MACXR,YAAA,CAAaJ,MAAA,CAAOU,IAAI;MACxBD,QAAA,CAAS,CAAC;IACZ;EACF,GAAG,CAACF,MAAA,EAAQD,GAAG,CAAC;EAEhB,OAAOE,KAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}