{"ast":null,"code":"'use client';\n\nimport { Skeleton } from \"./chunk-GOJLRND4.mjs\";\n\n// src/skeleton-text.tsx\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\nvar defaultNoOfLines = 3;\nvar SkeletonText = props => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props;\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n  const getWidth = index => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n    return \"100%\";\n  };\n  const _className = cx(\"chakra-skeleton__group\", className);\n  return /* @__PURE__ */jsx(chakra.div, {\n    className: _className,\n    ...rest,\n    children: numbers.map((number, index) => {\n      if (isLoaded && index > 0) {\n        return null;\n      }\n      const sizeProps = isLoaded ? null : {\n        mb: number === numbers.length ? \"0\" : spacing,\n        width: getWidth(number),\n        height: skeletonHeight\n      };\n      return /* @__PURE__ */jsx(Skeleton, {\n        startColor,\n        endColor,\n        isLoaded,\n        fadeDuration,\n        speed,\n        variant,\n        size,\n        colorScheme,\n        ...sizeProps,\n        // allows animating the children\n        children: index === 0 ? children : void 0\n      }, numbers.length.toString() + number);\n    })\n  });\n};\nSkeletonText.displayName = \"SkeletonText\";\nexport { SkeletonText };","map":{"version":3,"names":["useBreakpointValue","chakra","cx","jsx","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","props","noOfLines","spacing","skeletonHeight","className","startColor","endColor","isLoaded","fadeDuration","speed","variant","size","colorScheme","children","rest","noOfLinesValue","numbers","getWidth","length","_className","div","number","sizeProps","mb","width","height","Skeleton","toString","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\skeleton\\src\\skeleton-text.tsx"],"sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport { chakra } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { SkeletonProps, Skeleton } from \"./skeleton\"\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\nconst defaultNoOfLines = 3\n/**\n * `SkeletonText` is used to display the loading state in the form of text.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            variant={variant}\n            size={size}\n            colorScheme={colorScheme}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nSkeletonText.displayName = \"SkeletonText\"\n"],"mappings":";;;;;AAAA,SAASA,kBAAA,QAA0B;AACnC,SAASC,MAAA,QAAc;AACvB,SAASC,EAAA,QAAU;AAyET,SAAAC,GAAA;AAtEV,SAASC,MAAMC,KAAA,EAAe;EAC5B,OAAOC,KAAA,CAAMD,KAAK,EACfE,IAAA,CAAK,CAAC,EACNC,GAAA,CAAI,CAACC,CAAA,EAAGC,KAAA,KAAUA,KAAA,GAAQ,CAAC;AAChC;AASA,IAAMC,gBAAA,GAAmB;AAOlB,IAAMC,YAAA,GAA6CC,KAAA,IAAU;EAClE,MAAM;IACJC,SAAA,GAAYH,gBAAA;IACZI,OAAA,GAAU;IACVC,cAAA,GAAiB;IACjBC,SAAA;IACAC,UAAA;IACAC,QAAA;IACAC,QAAA;IACAC,YAAA;IACAC,KAAA;IACAC,OAAA;IACAC,IAAA;IACAC,WAAA;IACAC,QAAA;IACA,GAAGC;EACL,IAAId,KAAA;EAEJ,MAAMe,cAAA,GACJ5B,kBAAA,CACE,OAAOc,SAAA,KAAc,WAAW,CAACA,SAAS,IAAIA,SAChD,KAAKH,gBAAA;EACP,MAAMkB,OAAA,GAAUzB,KAAA,CAAMwB,cAAc;EAEpC,MAAME,QAAA,GAAYpB,KAAA,IAAkB;IAClC,IAAIkB,cAAA,GAAiB,GAAG;MACtB,OAAOlB,KAAA,KAAUmB,OAAA,CAAQE,MAAA,GAAS,QAAQ;IAC5C;IACA,OAAO;EACT;EAEA,MAAMC,UAAA,GAAa9B,EAAA,CAAG,0BAA0Be,SAAS;EAEzD,OACE,eAAAd,GAAA,CAACF,MAAA,CAAOgC,GAAA,EAAP;IAAWhB,SAAA,EAAWe,UAAA;IAAa,GAAGL,IAAA;IACpCD,QAAA,EAAAG,OAAA,CAAQrB,GAAA,CAAI,CAAC0B,MAAA,EAAQxB,KAAA,KAAU;MAC9B,IAAIU,QAAA,IAAYV,KAAA,GAAQ,GAAG;QAEzB,OAAO;MACT;MAEA,MAAMyB,SAAA,GAAYf,QAAA,GACd,OACA;QACEgB,EAAA,EAAIF,MAAA,KAAWL,OAAA,CAAQE,MAAA,GAAS,MAAMhB,OAAA;QACtCsB,KAAA,EAAOP,QAAA,CAASI,MAAM;QACtBI,MAAA,EAAQtB;MACV;MAEJ,OACE,eAAAb,GAAA,CAACoC,QAAA;QAECrB,UAAA;QACAC,QAAA;QACAC,QAAA;QACAC,YAAA;QACAC,KAAA;QACAC,OAAA;QACAC,IAAA;QACAC,WAAA;QACC,GAAGU,SAAA;QAAA;QAIFT,QAAA,EAAAhB,KAAA,KAAU,IAAIgB,QAAA,GAAW;MAAA,GAbtBG,OAAA,CAAQE,MAAA,CAAOS,QAAA,CAAS,IAAIN,MAenC;IAEJ,CAAC;EAAA,CACH;AAEJ;AAEAtB,YAAA,CAAa6B,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}