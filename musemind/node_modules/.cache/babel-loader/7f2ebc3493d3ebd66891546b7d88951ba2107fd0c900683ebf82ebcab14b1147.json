{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\";\n\n// src/use-focus-on-hide.ts\nimport { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\nfunction preventReturnFocus(containerRef) {\n  const el = containerRef.current;\n  if (!el) return false;\n  const activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\nfunction useFocusOnHide(containerRef, options) {\n  const {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  const shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n    if (el) {\n      focus(el, {\n        nextTick: true\n      });\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\nexport { useFocusOnHide };","map":{"version":3,"names":["contains","focus","getActiveElement","isTabbable","preventReturnFocus","containerRef","el","current","activeElement","useFocusOnHide","options","shouldFocus","shouldFocusProp","visible","focusRef","useUpdateEffect","nextTick"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\hooks\\src\\use-focus-on-hide.ts"],"sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el, { nextTick: true })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"],"mappings":";;;;;AAAA,SACEA,QAAA,EACAC,KAAA,EAEAC,gBAAA,EACAC,UAAA,QACK;AAUP,SAASC,mBAAmBC,YAAA,EAA4C;EACtE,MAAMC,EAAA,GAAKD,YAAA,CAAaE,OAAA;EACxB,IAAI,CAACD,EAAA,EAAI,OAAO;EAEhB,MAAME,aAAA,GAAgBN,gBAAA,CAAiBI,EAAE;EAEzC,IAAI,CAACE,aAAA,EAAe,OAAO;EAC3B,IAAIR,QAAA,CAASM,EAAA,EAAIE,aAAa,GAAG,OAAO;EACxC,IAAIL,UAAA,CAAWK,aAAa,GAAG,OAAO;EAEtC,OAAO;AACT;AASO,SAASC,eACdJ,YAAA,EACAK,OAAA,EACA;EACA,MAAM;IAAEC,WAAA,EAAaC,eAAA;IAAiBC,OAAA;IAASC;EAAS,IAAIJ,OAAA;EAE5D,MAAMC,WAAA,GAAcC,eAAA,IAAmB,CAACC,OAAA;EAExCE,eAAA,CAAgB,MAAM;IACpB,IAAI,CAACJ,WAAA,EAAa;IAElB,IAAIP,kBAAA,CAAmBC,YAAY,GAAG;MACpC;IACF;IAEA,MAAMC,EAAA,IAAKQ,QAAA,oBAAAA,QAAA,CAAUP,OAAA,KAAWF,YAAA,CAAaE,OAAA;IAE7C,IAAID,EAAA,EAAI;MACNL,KAAA,CAAMK,EAAA,EAAI;QAAEU,QAAA,EAAU;MAAK,CAAC;IAC9B;EACF,GAAG,CAACL,WAAA,EAAaN,YAAA,EAAcS,QAAQ,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}