{"ast":null,"code":"'use client';\n\nimport { useInitialAnimationState } from \"./chunk-2TOCDA5N.mjs\";\nimport { useCheckboxGroupContext } from \"./chunk-LYGBQ47X.mjs\";\nimport { CheckboxIcon } from \"./chunk-ULEC7HZU.mjs\";\nimport { useCheckbox } from \"./chunk-7D6N5TE5.mjs\";\n\n// src/checkbox.tsx\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = {\n    ...group,\n    ...props\n  };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  let onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const shouldAnimate = useInitialAnimationState(state.isChecked);\n  const iconStyles = useMemo(() => ({\n    animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon\n  }), [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]);\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */jsxs(chakra.label, {\n    __css: {\n      ...rootStyles,\n      ...styles.container\n    },\n    className: cx(\"chakra-checkbox\", className),\n    ...getRootProps(),\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-checkbox__input\",\n      ...getInputProps(inputProps, ref)\n    }), /* @__PURE__ */jsx(chakra.span, {\n      __css: {\n        ...controlStyles,\n        ...styles.control\n      },\n      className: \"chakra-checkbox__control\",\n      ...getCheckboxProps(),\n      children: clonedIcon\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-checkbox__label\",\n      ...getLabelProps(),\n      __css: {\n        marginStart: spacing,\n        ...styles.label\n      },\n      children\n    })]\n  });\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox };","map":{"version":3,"names":["callAll","cx","chakra","forwardRef","keyframes","omitThemingProps","useMultiStyleConfig","cloneElement","useMemo","jsx","jsxs","controlStyles","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","rootStyles","cursor","position","checkAnim","from","opacity","strokeDashoffset","transform","to","indeterminateOpacityAnim","indeterminateScaleAnim","Checkbox","Checkbox2","props","ref","group","useCheckboxGroupContext","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","CheckboxIcon","isChecked","isCheckedProp","isDisabled","onChange","onChangeProp","inputProps","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","useCheckbox","shouldAnimate","useInitialAnimationState","iconStyles","animation","isIndeterminate","fontSize","color","clonedIcon","__css","label","container","span","control","marginStart","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\checkbox\\src\\checkbox.tsx"],"sourcesContent":["import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cloneElement, useMemo } from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-context\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { CheckboxOptions, UseCheckboxProps } from \"./checkbox-types\"\nimport { useCheckbox } from \"./use-checkbox\"\nimport { useInitialAnimationState } from \"./use-initial-animation-state\"\n\nconst controlStyles: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0,\n}\n\nconst rootStyles: SystemStyleObject = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\",\n}\n\nconst checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\",\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\",\n  },\n})\n\nconst indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n})\nconst indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\",\n  },\n  to: {\n    transform: \"scaleX(1)\",\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps,\n    CheckboxOptions {}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">(function Checkbox(\n  props,\n  ref,\n) {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const shouldAnimate = useInitialAnimationState(state.isChecked)\n\n  const iconStyles: SystemStyleObject = useMemo(\n    () => ({\n      animation: !shouldAnimate\n        ? undefined\n        : state.isIndeterminate\n        ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear`\n        : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <chakra.label\n      __css={{ ...rootStyles, ...styles.container }}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input\n        className=\"chakra-checkbox__input\"\n        {...getInputProps(inputProps, ref)}\n      />\n      <chakra.span\n        __css={{ ...controlStyles, ...styles.control }}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}