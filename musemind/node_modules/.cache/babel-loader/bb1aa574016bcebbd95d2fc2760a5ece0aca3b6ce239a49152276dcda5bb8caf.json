{"ast":null,"code":"'use client';\n\n// src/indicator.tsx\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Indicator = forwardRef(function Indicator2(props, ref) {\n  const {\n    offsetX,\n    offsetY,\n    offset = \"0\",\n    placement = \"top-end\",\n    ...rest\n  } = props;\n  const styles = useMemo(() => ({\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    insetBlockStart: mapResponsive(placement, v => {\n      const [side] = v.split(\"-\");\n      const map = {\n        top: offsetY != null ? offsetY : offset,\n        middle: \"50%\",\n        bottom: \"auto\"\n      };\n      return map[side];\n    }),\n    insetBlockEnd: mapResponsive(placement, v => {\n      const [side] = v.split(\"-\");\n      const map = {\n        top: \"auto\",\n        middle: \"50%\",\n        bottom: offsetY != null ? offsetY : offset\n      };\n      return map[side];\n    }),\n    insetStart: mapResponsive(placement, v => {\n      const [, align] = v.split(\"-\");\n      const map = {\n        start: offsetX != null ? offsetX : offset,\n        center: \"50%\",\n        end: \"auto\"\n      };\n      return map[align];\n    }),\n    insetEnd: mapResponsive(placement, v => {\n      const [, align] = v.split(\"-\");\n      const map = {\n        start: \"auto\",\n        center: \"50%\",\n        end: offsetX != null ? offsetX : offset\n      };\n      return map[align];\n    }),\n    translate: mapResponsive(placement, v => {\n      const [side, align] = v.split(\"-\");\n      const mapX = {\n        start: \"-50%\",\n        center: \"-50%\",\n        end: \"50%\"\n      };\n      const mapY = {\n        top: \"-50%\",\n        middle: \"-50%\",\n        bottom: \"50%\"\n      };\n      return `${mapX[align]} ${mapY[side]}`;\n    })\n  }), [offset, offsetX, offsetY, placement]);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    __css: styles,\n    ...rest\n  });\n});\nexport { Indicator };","map":{"version":3,"names":["mapResponsive","chakra","forwardRef","useMemo","jsx","Indicator","Indicator2","props","ref","offsetX","offsetY","offset","placement","rest","styles","display","justifyContent","alignItems","position","insetBlockStart","v","side","split","map","top","middle","bottom","insetBlockEnd","insetStart","align","start","center","end","insetEnd","translate","mapX","mapY","div","__css"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\layout\\src\\indicator.tsx"],"sourcesContent":["import { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport {\n  HTMLChakraProps,\n  ResponsiveValue,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\ntype Dict = Record<string, any>\n\nexport interface IndicatorOptions {\n  /**\n   * The x offset of the indicator\n   */\n  offsetX?: SystemStyleObject[\"left\"]\n  /**\n   * The y offset of the indicator\n   */\n  offsetY?: SystemStyleObject[\"top\"]\n  /**\n   * The x and y offset of the indicator\n   */\n  offset?: SystemStyleObject[\"top\"]\n  /**\n   * The placement of the indicator\n   * @default \"top-end\"\n   */\n  placement?: ResponsiveValue<\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | \"bottom-center\"\n    | \"top-center\"\n    | \"middle-center\"\n    | \"middle-end\"\n    | \"middle-start\"\n  >\n}\n\nexport interface IndicatorProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof IndicatorOptions>,\n    IndicatorOptions {}\n\nexport const Indicator = forwardRef<IndicatorProps, \"div\">(function Indicator(\n  props,\n  ref,\n) {\n  const {\n    offsetX,\n    offsetY,\n    offset = \"0\",\n    placement = \"top-end\",\n    ...rest\n  } = props\n\n  const styles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      insetBlockStart: mapResponsive(placement, (v) => {\n        const [side] = v.split(\"-\")\n        const map: Dict = {\n          top: offsetY ?? offset,\n          middle: \"50%\",\n          bottom: \"auto\",\n        }\n        return map[side]\n      }),\n      insetBlockEnd: mapResponsive(placement, (v) => {\n        const [side] = v.split(\"-\")\n        const map: Dict = {\n          top: \"auto\",\n          middle: \"50%\",\n          bottom: offsetY ?? offset,\n        }\n        return map[side]\n      }),\n      insetStart: mapResponsive(placement, (v) => {\n        const [, align] = v.split(\"-\")\n        const map: Dict = {\n          start: offsetX ?? offset,\n          center: \"50%\",\n          end: \"auto\",\n        }\n        return map[align]\n      }),\n      insetEnd: mapResponsive(placement, (v) => {\n        const [, align] = v.split(\"-\")\n        const map: Dict = {\n          start: \"auto\",\n          center: \"50%\",\n          end: offsetX ?? offset,\n        }\n        return map[align]\n      }),\n      translate: mapResponsive(placement, (v) => {\n        const [side, align] = v.split(\"-\")\n        const mapX: Dict = { start: \"-50%\", center: \"-50%\", end: \"50%\" }\n        const mapY: Dict = { top: \"-50%\", middle: \"-50%\", bottom: \"50%\" }\n        return `${mapX[align]} ${mapY[side]}`\n      }),\n    }),\n    [offset, offsetX, offsetY, placement],\n  )\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n"],"mappings":";;;AAAA,SAASA,aAAA,QAAqB;AAC9B,SAIEC,MAAA,EACAC,UAAA,QACK;AACP,SAASC,OAAA,QAAe;AAsGf,SAAAC,GAAA;AAhEF,IAAMC,SAAA,GAAYH,UAAA,CAAkC,SAASI,WAClEC,KAAA,EACAC,GAAA,EACA;EACA,MAAM;IACJC,OAAA;IACAC,OAAA;IACAC,MAAA,GAAS;IACTC,SAAA,GAAY;IACZ,GAAGC;EACL,IAAIN,KAAA;EAEJ,MAAMO,MAAA,GAA4BX,OAAA,CAChC,OAAO;IACLY,OAAA,EAAS;IACTC,cAAA,EAAgB;IAChBC,UAAA,EAAY;IACZC,QAAA,EAAU;IACVC,eAAA,EAAiBnB,aAAA,CAAcY,SAAA,EAAYQ,CAAA,IAAM;MAC/C,MAAM,CAACC,IAAI,IAAID,CAAA,CAAEE,KAAA,CAAM,GAAG;MAC1B,MAAMC,GAAA,GAAY;QAChBC,GAAA,EAAKd,OAAA,WAAAA,OAAA,GAAWC,MAAA;QAChBc,MAAA,EAAQ;QACRC,MAAA,EAAQ;MACV;MACA,OAAOH,GAAA,CAAIF,IAAI;IACjB,CAAC;IACDM,aAAA,EAAe3B,aAAA,CAAcY,SAAA,EAAYQ,CAAA,IAAM;MAC7C,MAAM,CAACC,IAAI,IAAID,CAAA,CAAEE,KAAA,CAAM,GAAG;MAC1B,MAAMC,GAAA,GAAY;QAChBC,GAAA,EAAK;QACLC,MAAA,EAAQ;QACRC,MAAA,EAAQhB,OAAA,WAAAA,OAAA,GAAWC;MACrB;MACA,OAAOY,GAAA,CAAIF,IAAI;IACjB,CAAC;IACDO,UAAA,EAAY5B,aAAA,CAAcY,SAAA,EAAYQ,CAAA,IAAM;MAC1C,MAAM,GAAGS,KAAK,IAAIT,CAAA,CAAEE,KAAA,CAAM,GAAG;MAC7B,MAAMC,GAAA,GAAY;QAChBO,KAAA,EAAOrB,OAAA,WAAAA,OAAA,GAAWE,MAAA;QAClBoB,MAAA,EAAQ;QACRC,GAAA,EAAK;MACP;MACA,OAAOT,GAAA,CAAIM,KAAK;IAClB,CAAC;IACDI,QAAA,EAAUjC,aAAA,CAAcY,SAAA,EAAYQ,CAAA,IAAM;MACxC,MAAM,GAAGS,KAAK,IAAIT,CAAA,CAAEE,KAAA,CAAM,GAAG;MAC7B,MAAMC,GAAA,GAAY;QAChBO,KAAA,EAAO;QACPC,MAAA,EAAQ;QACRC,GAAA,EAAKvB,OAAA,WAAAA,OAAA,GAAWE;MAClB;MACA,OAAOY,GAAA,CAAIM,KAAK;IAClB,CAAC;IACDK,SAAA,EAAWlC,aAAA,CAAcY,SAAA,EAAYQ,CAAA,IAAM;MACzC,MAAM,CAACC,IAAA,EAAMQ,KAAK,IAAIT,CAAA,CAAEE,KAAA,CAAM,GAAG;MACjC,MAAMa,IAAA,GAAa;QAAEL,KAAA,EAAO;QAAQC,MAAA,EAAQ;QAAQC,GAAA,EAAK;MAAM;MAC/D,MAAMI,IAAA,GAAa;QAAEZ,GAAA,EAAK;QAAQC,MAAA,EAAQ;QAAQC,MAAA,EAAQ;MAAM;MAChE,OAAO,GAAGS,IAAA,CAAKN,KAAK,CAAC,IAAIO,IAAA,CAAKf,IAAI,CAAC;IACrC,CAAC;EACH,IACA,CAACV,MAAA,EAAQF,OAAA,EAASC,OAAA,EAASE,SAAS,CACtC;EAEA,OAAO,eAAAR,GAAA,CAACH,MAAA,CAAOoC,GAAA,EAAP;IAAW7B,GAAA;IAAU8B,KAAA,EAAOxB,MAAA;IAAS,GAAGD;EAAA,CAAM;AACxD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}