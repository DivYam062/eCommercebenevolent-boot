{"ast":null,"code":"'use client';\n\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\";\n\n// src/use-callback-ref.ts\nimport { useCallback, useRef } from \"react\";\nfunction useCallbackRef(fn, deps = []) {\n  const ref = useRef(fn);\n  useSafeLayoutEffect(() => {\n    ref.current = fn;\n  });\n  return useCallback((...args) => {\n    var _a;\n    return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);\n  }, deps);\n}\nexport { useCallbackRef };","map":{"version":3,"names":["useCallback","useRef","useCallbackRef","fn","deps","ref","useSafeLayoutEffect","current","args","_a","call"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\hooks\\src\\use-callback-ref.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param fn the function to persist\n * @param deps the function dependency list\n */\nexport function useCallbackRef<T extends (...args: any[]) => any>(\n  fn: T | undefined,\n  deps: React.DependencyList = [],\n): T {\n  const ref = useRef(fn)\n\n  useSafeLayoutEffect(() => {\n    ref.current = fn\n  })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(((...args) => ref.current?.(...args)) as T, deps)\n}\n"],"mappings":";;;;;AAAA,SAASA,WAAA,EAAaC,MAAA,QAAc;AAU7B,SAASC,eACdC,EAAA,EACAC,IAAA,GAA6B,EAAC,EAC3B;EACH,MAAMC,GAAA,GAAMJ,MAAA,CAAOE,EAAE;EAErBG,mBAAA,CAAoB,MAAM;IACxBD,GAAA,CAAIE,OAAA,GAAUJ,EAAA;EAChB,CAAC;EAGD,OAAOH,WAAA,CAAa,IAAIQ,IAAA,KAAM;IArBhC,IAAAC,EAAA;IAqBmC,QAAAA,EAAA,GAAAJ,GAAA,CAAIE,OAAA,KAAJ,gBAAAE,EAAA,CAAAC,IAAA,CAAAL,GAAA,EAAc,GAAGG,IAAA;EAAA,GAAaJ,IAAI;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}