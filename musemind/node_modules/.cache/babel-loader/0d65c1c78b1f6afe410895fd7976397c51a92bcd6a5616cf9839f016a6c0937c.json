{"ast":null,"code":"'use client';\n\n// src/use-const.ts\nimport { useRef } from \"react\";\nfunction useConst(init) {\n  const ref = useRef(null);\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n  return ref.current;\n}\nexport { useConst };","map":{"version":3,"names":["useRef","useConst","init","ref","current"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\hooks\\src\\use-const.ts"],"sourcesContent":["import { useRef } from \"react\"\n\ntype InitFn<T> = () => T\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConst`\n * you can ensure that initializers don't execute twice or more.\n */\nexport function useConst<T extends any>(init: T | InitFn<T>): T {\n  // Use useRef to store the value because it's the least expensive built-in\n  // hook that works here. We could also use `useState` but that's more\n  // expensive internally due to reducer handling which we don't need.\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? (init as InitFn<T>)() : init\n  }\n\n  return ref.current as T\n}\n"],"mappings":";;;AAAA,SAASA,MAAA,QAAc;AAWhB,SAASC,SAAwBC,IAAA,EAAwB;EAI9D,MAAMC,GAAA,GAAMH,MAAA,CAAiB,IAAI;EAEjC,IAAIG,GAAA,CAAIC,OAAA,KAAY,MAAM;IACxBD,GAAA,CAAIC,OAAA,GAAU,OAAOF,IAAA,KAAS,aAAcA,IAAA,CAAmB,IAAIA,IAAA;EACrE;EAEA,OAAOC,GAAA,CAAIC,OAAA;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}