{"ast":null,"code":"'use client';\n\n// src/switch.tsx\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  const styles = useMultiStyleConfig(\"Switch\", props);\n  const {\n    spacing = \"0.5rem\",\n    children,\n    ...ownProps\n  } = omitThemingProps(props);\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  const containerStyles = useMemo(() => ({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    lineHeight: 0,\n    ...styles.container\n  }), [styles.container]);\n  const trackStyles = useMemo(() => ({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track\n  }), [styles.track]);\n  const labelStyles = useMemo(() => ({\n    userSelect: \"none\",\n    marginStart: spacing,\n    ...styles.label\n  }), [spacing, styles.label]);\n  return /* @__PURE__ */jsxs(chakra.label, {\n    ...getRootProps(),\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles,\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-switch__input\",\n      ...getInputProps({}, ref)\n    }), /* @__PURE__ */jsx(chakra.span, {\n      ...getCheckboxProps(),\n      className: \"chakra-switch__track\",\n      __css: trackStyles,\n      children: /* @__PURE__ */jsx(chakra.span, {\n        __css: styles.thumb,\n        className: \"chakra-switch__thumb\",\n        ...getIndicatorProps()\n      })\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-switch__label\",\n      ...getLabelProps(),\n      __css: labelStyles,\n      children\n    })]\n  });\n});\nSwitch.displayName = \"Switch\";\nexport { Switch };","map":{"version":3,"names":["useCheckbox","cx","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","useMemo","jsx","jsxs","Switch","Switch2","props","ref","styles","spacing","children","ownProps","getIndicatorProps","getInputProps","getCheckboxProps","getRootProps","getLabelProps","containerStyles","display","position","verticalAlign","lineHeight","container","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","labelStyles","userSelect","marginStart","label","className","__css","span","thumb","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\switch\\src\\switch.tsx"],"sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\n/**\n * The `Switch` component is used as an alternative for the checkbox component for switching between \"enabled\" and \"disabled\" states.\n *\n * @see Docs https://chakra-ui.com/docs/components/switch\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/switch/\n */\nexport const Switch = forwardRef<SwitchProps, \"input\">(function Switch(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0,\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          {...getIndicatorProps()}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n"],"mappings":";;;AAAA,SAASA,WAAA,QAAqC;AAC9C,SAASC,EAAA,QAAU;AACnB,SACEC,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAIAC,mBAAA,QACK;AACP,SAASC,OAAA,QAAe;AAqEpB,SAKEC,GAAA,EALFC,IAAA;AAjDG,IAAMC,MAAA,GAASN,UAAA,CAAiC,SAASO,QAC9DC,KAAA,EACAC,GAAA,EACA;EACA,MAAMC,MAAA,GAASR,mBAAA,CAAoB,UAAUM,KAAK;EAElD,MAAM;IAAEG,OAAA,GAAU;IAAUC,QAAA;IAAU,GAAGC;EAAS,IAAIZ,gBAAA,CAAiBO,KAAK;EAE5E,MAAM;IACJM,iBAAA;IACAC,aAAA;IACAC,gBAAA;IACAC,YAAA;IACAC;EACF,IAAIrB,WAAA,CAAYgB,QAAQ;EAExB,MAAMM,eAAA,GAAqChB,OAAA,CACzC,OAAO;IACLiB,OAAA,EAAS;IACTC,QAAA,EAAU;IACVC,aAAA,EAAe;IACfC,UAAA,EAAY;IACZ,GAAGb,MAAA,CAAOc;EACZ,IACA,CAACd,MAAA,CAAOc,SAAS,CACnB;EAEA,MAAMC,WAAA,GAAiCtB,OAAA,CACrC,OAAO;IACLiB,OAAA,EAAS;IACTM,UAAA,EAAY;IACZC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,MAAA,EAAQ;IACR,GAAGnB,MAAA,CAAOoB;EACZ,IACA,CAACpB,MAAA,CAAOoB,KAAK,CACf;EAEA,MAAMC,WAAA,GAAiC5B,OAAA,CACrC,OAAO;IACL6B,UAAA,EAAY;IACZC,WAAA,EAAatB,OAAA;IACb,GAAGD,MAAA,CAAOwB;EACZ,IACA,CAACvB,OAAA,EAASD,MAAA,CAAOwB,KAAK,CACxB;EAEA,OACE,eAAA7B,IAAA,CAACN,MAAA,CAAOmC,KAAA,EAAP;IACE,GAAGjB,YAAA,CAAa;IACjBkB,SAAA,EAAWrC,EAAA,CAAG,iBAAiBU,KAAA,CAAM2B,SAAS;IAC9CC,KAAA,EAAOjB,eAAA;IAEPP,QAAA,kBAAAR,GAAA,CAAC;MAAM+B,SAAA,EAAU;MAAwB,GAAGpB,aAAA,CAAc,CAAC,GAAGN,GAAG;IAAA,CAAG,GACpE,eAAAL,GAAA,CAACL,MAAA,CAAOsC,IAAA,EAAP;MACE,GAAGrB,gBAAA,CAAiB;MACrBmB,SAAA,EAAU;MACVC,KAAA,EAAOX,WAAA;MAEPb,QAAA,iBAAAR,GAAA,CAACL,MAAA,CAAOsC,IAAA,EAAP;QACCD,KAAA,EAAO1B,MAAA,CAAO4B,KAAA;QACdH,SAAA,EAAU;QACT,GAAGrB,iBAAA,CAAkB;MAAA,CACxB;IAAA,CACF,GACCF,QAAA,IACC,eAAAR,GAAA,CAACL,MAAA,CAAOsC,IAAA,EAAP;MACCF,SAAA,EAAU;MACT,GAAGjB,aAAA,CAAc;MAClBkB,KAAA,EAAOL,WAAA;MAENnB;IAAA,CACH;EAAA,CAEJ;AAEJ,CAAC;AAEDN,MAAA,CAAOiC,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}