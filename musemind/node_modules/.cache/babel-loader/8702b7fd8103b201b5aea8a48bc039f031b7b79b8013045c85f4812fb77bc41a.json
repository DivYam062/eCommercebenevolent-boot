{"ast":null,"code":"'use client';\n\nimport { useFormControlContext, useFormControlStyles } from \"./chunk-DFWC5MHP.mjs\";\n\n// src/form-label.tsx\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */jsxs(chakra.label, {\n    ...ownProps,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  const className = cx(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */jsx(chakra.span, {\n    ...(field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\nexport { FormLabel, RequiredIndicator };","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","jsx","jsxs","FormLabel","FormLabel2","passedProps","ref","_a","styles","props","className","children","requiredIndicator","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","label","__css","display","textAlign","isRequired","displayName","RequiredIndicator2","useFormControlStyles","span","getRequiredIndicatorProps"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\form-control\\src\\form-label.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"],"mappings":";;;;;AAAA,SACEA,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAEAC,cAAA,QACK;AACP,SAASC,EAAA,QAAU;AAkCK,SAAAC,GAAA,EASpBC,IAAA,QAToB;AAVjB,IAAMC,SAAA,GAAYN,UAAA,CAAoC,SAASO,WACpEC,WAAA,EACAC,GAAA,EACA;EAnCF,IAAAC,EAAA;EAoCE,MAAMC,MAAA,GAAST,cAAA,CAAe,aAAaM,WAAW;EACtD,MAAMI,KAAA,GAAQX,gBAAA,CAAiBO,WAAW;EAE1C,MAAM;IACJK,SAAA;IACAC,QAAA;IACAC,iBAAA,GAAoB,eAAAX,GAAA,CAACY,iBAAA,IAAkB;IACvCC,iBAAA,GAAoB;IACpB,GAAGC;EACL,IAAIN,KAAA;EAEJ,MAAMO,KAAA,GAAQC,qBAAA,CAAsB;EACpC,MAAMC,QAAA,IAAWX,EAAA,GAAAS,KAAA,oBAAAA,KAAA,CAAOG,aAAA,CAAcJ,IAAA,EAAMT,GAAA,MAA3B,OAAAC,EAAA,GAAmC;IAAED,GAAA;IAAK,GAAGS;EAAK;EAEnE,OACE,eAAAb,IAAA,CAACN,MAAA,CAAOwB,KAAA,EAAP;IACE,GAAGF,QAAA;IACJR,SAAA,EAAWV,EAAA,CAAG,sBAAsBS,KAAA,CAAMC,SAAS;IACnDW,KAAA,EAAO;MACLC,OAAA,EAAS;MACTC,SAAA,EAAW;MACX,GAAGf;IACL;IAECG,QAAA,GAAAA,QAAA,GACAK,KAAA,oBAAAA,KAAA,CAAOQ,UAAA,IAAaZ,iBAAA,GAAoBE,iBAAA;EAAA,CAC3C;AAEJ,CAAC;AAEDX,SAAA,CAAUsB,WAAA,GAAc;AAQjB,IAAMZ,iBAAA,GAAoBhB,UAAA,CAC/B,SAAS6B,mBAAkBjB,KAAA,EAAOH,GAAA,EAAK;EACrC,MAAMU,KAAA,GAAQC,qBAAA,CAAsB;EACpC,MAAMT,MAAA,GAASmB,oBAAA,CAAqB;EAEpC,IAAI,EAACX,KAAA,oBAAAA,KAAA,CAAOQ,UAAA,GAAY,OAAO;EAE/B,MAAMd,SAAA,GAAYV,EAAA,CAAG,mCAAmCS,KAAA,CAAMC,SAAS;EAEvE,OACE,eAAAT,GAAA,CAACL,MAAA,CAAOgC,IAAA,EAAP;IACE,IAAGZ,KAAA,oBAAAA,KAAA,CAAOa,yBAAA,CAA0BpB,KAAA,EAAOH,GAAA;IAC5Ce,KAAA,EAAOb,MAAA,CAAOI,iBAAA;IACdF;EAAA,CACF;AAEJ,CACF;AAEAG,iBAAA,CAAkBY,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}