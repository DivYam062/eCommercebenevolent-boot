{"ast":null,"code":"'use client';\n\n// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup(props = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback((props2 = {}) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","props2","checkedKey","some","val"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\checkbox\\src\\use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useCallback } from \"react\"\nimport { EventOrValue, UseCheckboxGroupProps } from \"./checkbox-types\"\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Record<string, any> = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.some((val) => String(props.value) === String(val)),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"mappings":";;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAASC,oBAAA,QAA4B;AACrC,SAASC,QAAA,QAAgB;AACzB,SAASC,WAAA,QAAmB;AAG5B,SAASC,aAAaC,KAAA,EAAmD;EACvE,OAAOA,KAAA,IAASH,QAAA,CAASG,KAAK,KAAKH,QAAA,CAASG,KAAA,CAAMC,MAAM;AAC1D;AAWO,SAASC,iBAAiBC,KAAA,GAA+B,CAAC,GAAG;EAClE,MAAM;IACJC,YAAA;IACAJ,KAAA,EAAOK,SAAA;IACPC,QAAA;IACAC,UAAA;IACAC;EACF,IAAIL,KAAA;EAEJ,MAAMM,YAAA,GAAed,cAAA,CAAeW,QAAQ;EAE5C,MAAM,CAACN,KAAA,EAAOU,QAAQ,IAAId,oBAAA,CAAqB;IAC7CI,KAAA,EAAOK,SAAA;IACPD,YAAA,EAAcA,YAAA,IAAgB,EAAC;IAC/BE,QAAA,EAAUG;EACZ,CAAC;EAED,MAAME,YAAA,GAAeb,WAAA,CAClBc,YAAA,IAA+B;IAC9B,IAAI,CAACZ,KAAA,EAAO;IAEZ,MAAMa,SAAA,GAAYd,YAAA,CAAaa,YAAY,IACvCA,YAAA,CAAaX,MAAA,CAAOa,OAAA,GACpB,CAACd,KAAA,CAAMe,QAAA,CAASH,YAAY;IAEhC,MAAMI,aAAA,GAAgBjB,YAAA,CAAaa,YAAY,IAC3CA,YAAA,CAAaX,MAAA,CAAOD,KAAA,GACpBY,YAAA;IAEJ,MAAMK,SAAA,GAAYJ,SAAA,GACd,CAAC,GAAGb,KAAA,EAAOgB,aAAa,IACxBhB,KAAA,CAAMkB,MAAA,CAAQC,CAAA,IAAMC,MAAA,CAAOD,CAAC,MAAMC,MAAA,CAAOJ,aAAa,CAAC;IAE3DN,QAAA,CAASO,SAAS;EACpB,GACA,CAACP,QAAA,EAAUV,KAAK,CAClB;EAEA,MAAMqB,gBAAA,GAAmBvB,WAAA,CACvB,CAACwB,MAAA,GAA6B,CAAC,MAAM;IACnC,MAAMC,UAAA,GAAaf,QAAA,GAAW,YAAY;IAC1C,OAAO;MACL,GAAGc,MAAA;MACH,CAACC,UAAU,GAAGvB,KAAA,CAAMwB,IAAA,CAAMC,GAAA,IAAQL,MAAA,CAAOE,MAAA,CAAMtB,KAAK,MAAMoB,MAAA,CAAOK,GAAG,CAAC;MACrEnB,QAAA,EAAUK;IACZ;EACF,GACA,CAACA,YAAA,EAAcH,QAAA,EAAUR,KAAK,CAChC;EAEA,OAAO;IACLA,KAAA;IACAO,UAAA;IACAD,QAAA,EAAUK,YAAA;IACVD,QAAA;IACAW;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}