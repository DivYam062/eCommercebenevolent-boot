{"ast":null,"code":"'use client';\n\nimport { useModal } from \"./chunk-TJ2Q5ITW.mjs\";\n\n// src/modal.tsx\nimport { Portal } from \"@chakra-ui/portal\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [ModalStylesProvider, useModalStyles] = createContext({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `\n});\nvar [ModalContextProvider, useModalContext] = createContext({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n});\nvar Modal = props => {\n  const modalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    motionPreset: \"scale\",\n    lockFocusAcrossFrames: true,\n    ...props\n  };\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    onCloseComplete\n  } = modalProps;\n  const styles = useMultiStyleConfig(\"Modal\", modalProps);\n  const modal = useModal(modalProps);\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames\n  };\n  return /* @__PURE__ */jsx(ModalContextProvider, {\n    value: context,\n    children: /* @__PURE__ */jsx(ModalStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(AnimatePresence, {\n        onExitComplete: onCloseComplete,\n        children: context.isOpen && /* @__PURE__ */jsx(Portal, {\n          ...portalProps,\n          children\n        })\n      })\n    })\n  });\n};\nModal.displayName = \"Modal\";\nexport { useModalStyles, ModalContextProvider, useModalContext, Modal };","map":{"version":3,"names":["Portal","createContext","useMultiStyleConfig","AnimatePresence","jsx","ModalStylesProvider","useModalStyles","name","errorMessage","ModalContextProvider","useModalContext","strict","Modal","props","modalProps","scrollBehavior","autoFocus","trapFocus","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","motionPreset","lockFocusAcrossFrames","portalProps","children","initialFocusRef","finalFocusRef","preserveScrollBarGap","onCloseComplete","styles","modal","useModal","context","value","onExitComplete","isOpen","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\modal\\src\\modal.tsx"],"sourcesContent":["import { FocusLockProps } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { AnimatePresence } from \"framer-motion\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nconst [ModalStylesProvider, useModalStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `,\n})\n\nexport { ModalContextProvider, useModalContext, useModalStyles }\n\ninterface ModalOptions extends Pick<FocusLockProps, \"lockFocusAcrossFrames\"> {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * ðŸš¨Warning: We don't recommend doing this because it hurts the\n   * accessibility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interactive\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   * @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * @default false.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   *\n   * @default true\n   */\n  preserveScrollBarGap?: boolean\n}\n\ntype ScrollBehavior = \"inside\" | \"outside\"\n\ntype MotionPreset =\n  | \"slideInBottom\"\n  | \"slideInRight\"\n  | \"slideInTop\"\n  | \"slideInLeft\"\n  | \"scale\"\n  | \"none\"\n\nexport interface ModalProps\n  extends UseModalProps,\n    ModalOptions,\n    ThemingProps<\"Modal\"> {\n  children: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behavior should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: ScrollBehavior\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n  /**\n   * The transition that should be used for the modal\n   * @default \"scale\"\n   */\n  motionPreset?: MotionPreset\n  /**\n   * Fires when all exiting nodes have completed animating out\n   */\n  onCloseComplete?: () => void\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const modalProps: ModalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    motionPreset: \"scale\",\n    lockFocusAcrossFrames: true,\n    ...props,\n  }\n\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    onCloseComplete,\n  } = modalProps\n\n  const styles = useMultiStyleConfig(\"Modal\", modalProps)\n  const modal = useModal(modalProps)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  }\n\n  return (\n    <ModalContextProvider value={context}>\n      <ModalStylesProvider value={styles}>\n        <AnimatePresence onExitComplete={onCloseComplete}>\n          {context.isOpen && <Portal {...portalProps}>{children}</Portal>}\n        </AnimatePresence>\n      </ModalStylesProvider>\n    </ModalContextProvider>\n  )\n}\n\nModal.displayName = \"Modal\"\n"],"mappings":";;;;;AACA,SAASA,MAAA,QAA2B;AACpC,SAASC,aAAA,QAAqB;AAC9B,SAGEC,mBAAA,QACK;AACP,SAASC,eAAA,QAAuB;AA2LH,SAAAC,GAAA;AApL7B,IAAM,CAACC,mBAAA,EAAqBC,cAAc,IAAIL,aAAA,CAE5C;EACAM,IAAA,EAAM;EACNC,YAAA,EAAc;AAChB,CAAC;AA6GD,IAAM,CAACC,oBAAA,EAAsBC,eAAe,IAAIT,aAAA,CAA4B;EAC1EU,MAAA,EAAQ;EACRJ,IAAA,EAAM;EACNC,YAAA,EACE;AACJ,CAAC;AAWM,IAAMI,KAAA,GAA+BC,KAAA,IAAU;EACpD,MAAMC,UAAA,GAAyB;IAC7BC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,SAAA,EAAW;IACXC,kBAAA,EAAoB;IACpBC,kBAAA,EAAoB;IACpBC,cAAA,EAAgB;IAChBC,YAAA,EAAc;IACdC,qBAAA,EAAuB;IACvB,GAAGT;EACL;EAEA,MAAM;IACJU,WAAA;IACAC,QAAA;IACAR,SAAA;IACAC,SAAA;IACAQ,eAAA;IACAC,aAAA;IACAR,kBAAA;IACAC,kBAAA;IACAC,cAAA;IACAO,oBAAA;IACAN,YAAA;IACAC,qBAAA;IACAM;EACF,IAAId,UAAA;EAEJ,MAAMe,MAAA,GAAS3B,mBAAA,CAAoB,SAASY,UAAU;EACtD,MAAMgB,KAAA,GAAQC,QAAA,CAASjB,UAAU;EAEjC,MAAMkB,OAAA,GAAU;IACd,GAAGF,KAAA;IACHd,SAAA;IACAC,SAAA;IACAQ,eAAA;IACAC,aAAA;IACAR,kBAAA;IACAC,kBAAA;IACAC,cAAA;IACAO,oBAAA;IACAN,YAAA;IACAC;EACF;EAEA,OACE,eAAAlB,GAAA,CAACK,oBAAA;IAAqBwB,KAAA,EAAOD,OAAA;IAC3BR,QAAA,iBAAApB,GAAA,CAACC,mBAAA;MAAoB4B,KAAA,EAAOJ,MAAA;MAC1BL,QAAA,iBAAApB,GAAA,CAACD,eAAA;QAAgB+B,cAAA,EAAgBN,eAAA;QAC9BJ,QAAA,EAAAQ,OAAA,CAAQG,MAAA,IAAU,eAAA/B,GAAA,CAACJ,MAAA;UAAQ,GAAGuB,WAAA;UAAcC;QAAA,CAAS;MAAA,CACxD;IAAA,CACF;EAAA,CACF;AAEJ;AAEAZ,KAAA,CAAMwB,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}