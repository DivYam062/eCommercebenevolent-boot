{"ast":null,"code":"'use client';\n\nimport { AvatarImage } from \"./chunk-V2ATFO44.mjs\";\nimport { initials } from \"./chunk-O25PJXSD.mjs\";\nimport { AvatarStylesProvider } from \"./chunk-RD3LQCU3.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\";\n\n// src/avatar.tsx\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles,\n    children: /* @__PURE__ */jsxs(AvatarStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */jsx(AvatarImage, {\n        src,\n        srcSet,\n        loading,\n        onLoad: callAllHandlers(onLoadProp, () => {\n          setIsLoaded(true);\n        }),\n        onError,\n        getInitials,\n        name,\n        borderRadius,\n        icon,\n        iconLabel,\n        ignoreFallback,\n        crossOrigin,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nAvatar.displayName = \"Avatar\";\nexport { baseStyle, Avatar };","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAllHandlers","cx","dataAttr","useState","jsx","jsxs","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","fontWeight","position","flexShrink","Avatar","props","ref","styles","isLoaded","setIsLoaded","src","srcSet","name","showBorder","borderRadius","onError","onLoad","onLoadProp","getInitials","initials","icon","GenericAvatarIcon","iconLabel","loading","children","borderColor","ignoreFallback","crossOrigin","referrerPolicy","rest","avatarStyles","borderWidth","container","span","className","__css","AvatarStylesProvider","value","AvatarImage","displayName"],"sources":["C:\\Users\\ASUS\\OneDrive\\Documents\\Unit6_Cw\\eCommercebenevolent-boot\\musemind\\node_modules\\@chakra-ui\\avatar\\src\\avatar.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n"],"mappings":";;;;;;;;AAAA,SACEA,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAGAC,mBAAA,QACK;AACP,SAASC,eAAA,EAAiBC,EAAA,EAAIC,QAAA,QAAgB;AAM9C,SAASC,QAAA,QAAgB;AA6Cd,SAAAC,GAAA,EA8BLC,IAAA,QA9BK;AA3CJ,IAAMC,SAAA,GAA+B;EAC1CC,OAAA,EAAS;EACTC,UAAA,EAAY;EACZC,cAAA,EAAgB;EAChBC,SAAA,EAAW;EACXC,aAAA,EAAe;EACfC,UAAA,EAAY;EACZC,QAAA,EAAU;EACVC,UAAA,EAAY;AACd;AAqBO,IAAMC,MAAA,GAASlB,UAAA,CAAgC,CAACmB,KAAA,EAAOC,GAAA,KAAQ;EACpE,MAAMC,MAAA,GAASnB,mBAAA,CAAoB,UAAUiB,KAAK;EAClD,MAAM,CAACG,QAAA,EAAUC,WAAW,IAAIjB,QAAA,CAAS,KAAK;EAE9C,MAAM;IACJkB,GAAA;IACAC,MAAA;IACAC,IAAA;IACAC,UAAA;IACAC,YAAA,GAAe;IACfC,OAAA;IACAC,MAAA,EAAQC,UAAA;IACRC,WAAA,GAAcC,QAAA;IACdC,IAAA,GAAO,eAAA3B,GAAA,CAAC4B,iBAAA,IAAkB;IAC1BC,SAAA,GAAY;IACZC,OAAA;IACAC,QAAA;IACAC,WAAA;IACAC,cAAA;IACAC,WAAA;IACAC,cAAA;IACA,GAAGC;EACL,IAAI1C,gBAAA,CAAiBkB,KAAK;EAE1B,MAAMyB,YAAA,GAAkC;IACtChB,YAAA;IACAiB,WAAA,EAAalB,UAAA,GAAa,QAAQ;IAClC,GAAGlB,SAAA;IACH,GAAGY,MAAA,CAAOyB;EACZ;EAEA,IAAIP,WAAA,EAAa;IACfK,YAAA,CAAaL,WAAA,GAAcA,WAAA;EAC7B;EAEA,OACE,eAAAhC,GAAA,CAACR,MAAA,CAAOgD,IAAA,EAAP;IACC3B,GAAA;IACC,GAAGuB,IAAA;IACJK,SAAA,EAAW5C,EAAA,CAAG,iBAAiBe,KAAA,CAAM6B,SAAS;IAC9C,eAAa3C,QAAA,CAASiB,QAAQ;IAC9B2B,KAAA,EAAOL,YAAA;IAEPN,QAAA,iBAAA9B,IAAA,CAAC0C,oBAAA;MAAqBC,KAAA,EAAO9B,MAAA;MAC3BiB,QAAA,kBAAA/B,GAAA,CAAC6C,WAAA;QACC5B,GAAA;QACAC,MAAA;QACAY,OAAA;QACAP,MAAA,EAAQ3B,eAAA,CAAgB4B,UAAA,EAAY,MAAM;UACxCR,WAAA,CAAY,IAAI;QAClB,CAAC;QACDM,OAAA;QACAG,WAAA;QACAN,IAAA;QACAE,YAAA;QACAM,IAAA;QACAE,SAAA;QACAI,cAAA;QACAC,WAAA;QACAC;MAAA,CACF,GACCJ,QAAA;IAAA,CACH;EAAA,CACF;AAEJ,CAAC;AAEDpB,MAAA,CAAOmC,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}